{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "pine",
	"scopeName": "source.pine",
	"patterns": [
		{ "include": "#strings" },
		{ "include": "#types" },
		{ "include": "#functions" },
		{ "include": "#constants" },
		{ "include": "#other" },
		{ "include": "#numbers" },
		{ "include": "#keywords" },
		{ "include": "#variables" },
		{ "include": "#operators" },
		{ "include": "#booleans" }
	],
	"repository": {
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.pine",
					"beginCaptures": { "1": { "name": "punctuation.definition.string.begin.pine" } },
					"endCaptures": { "1": { "name": "punctuation.definition.string.end.pine" } },
					"begin": "(\")(?=[^\\n}]*$\\n?)",
					"end": "(\")|(?=\\n)",
					"include": "#escaped_char"
				},
				{
					"name": "string.quoted.single.pine",
					"beginCaptures": { "1": { "name": "punctuation.definition.string.begin.pine" } },
					"endCaptures": { "1": { "name": "punctuation.definition.string.end.pine" } },
					"begin": "(')(?=[^\\n}]*$\\n?)",
					"end": "(')|(?=\\n)",
					"include": "#escaped_char"
				}
			]
		},
		"escaped_char": {
			"name": "constant.character.escape.pine",
			"match": "\\\\[abfnrtvz\\\\\"'\\n]"
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.pine",
					"match": "\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(by|if|in|else|continue|break|for|not|while|switch)\\b",
					"name": "keyword.pinescript"
				},
				{
					"match": "\\n(?:^(export|import)\\s+)",
					"name": "storage.modifier.import.pine"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(=|-=|\\+=|\\*=|/=|%=|:=)",
					"name": "keyword.other.pine"
				},
				{
					"match": "(\\-|\\+|\\*|/|%)",
					"name": "keyword.other.pine"
				},
				{
					"match": "(==|!=|<=|>=|<|>)",
					"name": "keyword.other.operator..pine"
				},
				{
					"match": "(\\?|\\:)",
					"name": "keyword.other.ternary.pine"
				},
				{
					"name": "meta",
					"match": "^\\s.+(\\s*=>)",
					"captures": { "1": { "name": "keyword" } }
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "support.function.pine",
					"match": "(?:([a-zA-Z_]\\w*(?:\\.))+?([a-zA-Z_]\\w*(?:\\.))*)?(\\w+(<([\\w*\\.]+)>)?)\\s*\\(",
					"captures": {
						"1": { "name": "entity.name.namespace.pine" },
						"2": { "name": "entity.name.section.pine" },
						"3": { "name": "entity.name.function.pine" },
						"4": { "name": "support.class.pine" },
						"5": { "name": "entity.name.type.pine" },
						"6": { "name": "support.pine" }
					},
					"patterns": [
						{ "include": "#strings" },
						{ "include": "#variables" }
					]
				},
				{
					"name": "entity.name.function.pine",
					"begin": "^(export\\s+)?(method\\s+)?(\\w+)\\s*(?=\\((.+\\n*)*\\).*=>)",
					"beginCaptures": {
						"1": { "name": "storage.modifier.cs" },
						"2": { "name": "storage.modifier.cs" },
						"3": { "name": "entity.name.function.cs" }
					},
					"match": "(?:(simple|series)?\\s+)(.+(?:<(.+)>|\\[\\]))?(\\s*\\w+\\s*)(?:(\\=)(('.*')|(\".*\")|(\\d*(.?\\d+[eE]?\\d*))|(#?\\w+)|(?:([a-zA-Z_]\\w*(?:\\.))+?([a-zA-Z_]\\w*(?:\\.))*)?([a-zA-Z_]\\w*)))*",
					"captures": {
						"1": { "name": "storage.type.pine" },
						"2": { "name": "variable.other.pine" },
						"3": { "name": "support.class.pine" },
						"4": { "name": "punctuation.definition.variable.pine" },
						"5": { "name": "entity.name.class.pine" },
						"6": { "name": "string.quoted.single.pine" },
						"7": { "name": "string.quoted.double.pine" },
						"8": { "name": "constant.numeric.pine" },
						"9": { "name": "variable.other.pine" },
						"10": { "name": "entity.name.namespace.pine" },
						"11": { "name": "entity.name.section.pine" },
						"12": { "name": "entity.name.function.pine" }
					},
					"end": "(\\))\\s*(?==>)",
					"endCaptures": {
						"1": { "name": "punctuation.definition.parameters.end.cs" },
						"2": { "name": "punctuation.separator.cs" }
					},
					"patterns": [
						{ "include": "#strings" },
						{ "include": "#variables" }
					]
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.pine",
					"match": "(?:([a-zA-Z_]\\w*(?:\\.))+?([a-zA-Z_]\\w*(?:\\.))*)?([a-zA-Z_]\\w*)"
				},
				{
					"name": "variable.other.pine",
					"match": "(?:([a-zA-Z_]\\w*(?:\\.))+?([a-zA-Z_]\\w*(?:\\.))*)?([a-zA-Z_]\\w*)"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.pine",
					"match": "\\b(?:true|false|null)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "meta.type.pine",
					"match": "(?=\n)^(export +)?(type +)([^\n]+)\n(?:\n+(\\s+\\N+\n)+)",
					"captures": {
						"1": { "name": "keyword.class.type.pine" },
						"2": { "name": "entity.name.tag.pine" },
						"3": { "name": "entity.name.type.pine" }
					}
				},
				{
					"match": "^((   |\\t)+\\w+\\s*(<.+?>|\\[\\])?)(?:\\s+\\w+)",
					"name": "storage.type.pine"
				},
				{
					"name": "entity.name.class.pine",
					"match": "\\b(float|bool|box|color|string|table|int|label|linefill|line)\\b"
				}
			]
		},
		"booleans": {
			"patterns": [
				{
					"name": "constant.language.boolean.pine",
					"match": "\\b(?:true|false)\\b"
				}
			]
		},
		"other": {
			"patterns": [
				{
					"match": "(^\/\/)\\s*(â“˜)\\s*(https:\/\/www\\.tradingview\\.com)(.*)",
					"captures": {
						"0": { "name": "comment.line.double-slash.pine" },
						"1": { "name": "punctuation.definition.list.markdown.pine" },
						"2": { "name": "constant.numeric.pine" },
						"3": { "name": "keyword.operator.logical.js.pine" },
						"4": { "name": "keyword.operator.logical.js.pine" },
						"5": { "name": "keyword.operator.logical.js.pine" }
					}
				},
				{
					"match": "^(?:import)\\s*(\\w+)(?:\/)(\\w+)(?:\/)(\\w+)\\s*((?:as)\\s*(?<name>\\w+))?",
					"captures": {
						"0": { "name": "punctuation.definition.list.markdown.pine" },
						"1": { "name": "keyword.operator.logical.js.pine" },
						"2": { "name": "storage.package.pine" },
						"3": { "name": "constant.numeric.pine" },
						"4": { "name": "storage.type.cs.pine" },
						"5": { "name": "punctuation.definition.list.markdown.pine" }
					}
				},
				{
					"match": "(^\/\/)(@)(version)(=)(\\d)(.*)",
					"captures": {
						"0": { "name": "comment.line.double-slash.pine" },
						"1": { "name": "comment.line.double-slash.pine" },
						"2": { "name": "keyword.operator.logical.pine" },
						"4": { "name": "keyword.operator.logical.pine" },
						"5": { "name": "punctuation.definition.list.markdown.pine" },
						"5": { "name": "constant.numeric.pine" }
					}
				},
				{
					"name": "comment.line.double-slash.pine",
					"match": "^\/\/\\s*(\\@)(field|type|description|function|param|returns)(?:\\s+(\\w+)(\\s+[\\w\\<\\>\\(\\)\\[\\]]+\\s+)?(\\N+\\n)?)?",
					"captures": {
						"0": { "name": "entity.name.tag" },
						"1": { "name": "entity.name.type" },
						"2": { "name": "keyword.class.type.pine" },
						"3": { "name": "variable.parameter" },
						"4": { "name": "entity.other.attribute-name" }
					}
				},
				{
					"match": "(^\/\/).*(#)(.*)(\\|)\\s*(>)\\s*(.*)(#)",
					"captures": {
						"0": { "name": "comment.line.double-slash.pine" },
						"1": { "name": "comment.line.double-slash.pine" },
						"2": { "name": "markup.italic.markdown.pine" },
						"3": { "name": "token.info-token.pine" },
						"4": { "name": "comment.line.double-slash.pine" },
						"5": { "name": "constant.language.pine" },
						"6": { "name": "punctuation.definition.list.markdown.pine" }
					}
				}
			]
		}
	}
}
