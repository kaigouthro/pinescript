{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Pine Script",
  "patterns": [
    {"include": "#comments"},
    {"include": "#imports"},
    {"include": "#strings"},
    {"include": "#hover_function_parameters"},
    {"include": "#built_in_variables"},
    {"include": "#keywords"},
    {"include": "#built_in_functions"},
    {"include": "#multiline_functions"},
    {"include": "#user_defined_functions"},
    {"include": "#exports"},
    {"include": "#variable_declarations"},
    {"include": "#operators"},
    {"include": "#local_variables"}
  ],
  "repository": {
    "comments":{
      "patterns": [
        {
          "match": "(<function_name>|<parameter_name>|<default_value>|<series>|<simple>|<function_code>|<source>)",
          "name": "comment.line.double-slash.ps"
        },
        {
          "match": "(^\/\/)\\s*(©)\\s*(\\w.*)",
          "captures": {
            "0": {"name": "comment.line.double-slash.ps"},
            "1": {"name": "comment.line.double-slash.ps"},
            "2": {"name": "comment.line.double-slash.ps"},
            "3": {"name": "meta.numeric.ps"},
            "4": {"name": "comment.line.double-slash.ps"}
          }
        },
        {
          "match": "(^\/\/)\\s*(ⓘ)\\s*(https:\/\/www\\.tradingview\\.com)([\\w.,@?^=%&:\/~+#-\\{]*[\\}\\w@?^=%&\/~+#-])(\\w+)(.*)",
          "captures": {
            "0": {"name": "comment.line.double-slash.ps"},
            "1": {"name": "comment.line.double-slash.ps"},
            "2": {"name": "meta.numeric.ps"},
            "3": {"name": "keyword.operator.logical.ps"},
            "4": {"name": "keyword.operator.logical.ps"},
            "5": {"name": "keyword.operator.logical.ps"}
          }
        },
        {
          "match": "(^\/\/)\\s*(@)(version)(=)(5)(.*)",
          "captures": {
            "0": {"name": "comment.line.double-slash.ps"},
            "1": {"name": "comment.line.double-slash.ps"},
            "2": {"name": "meta.section.embedded.other.ps"},
            "3": {"name": "meta.other.ps"},
            "4": {"name": "meta.assignment.ps"},
            "5": {"name": "meta.numeric.ps"}
          }
        },
        {
          "match": "(^\/\/).*(\\d{10})(.*)(#)",
          "captures": {
            "0": {"name": "comment.line.double-slash.ps"},
            "1": {"name": "comment.line.double-slash.ps"},
            "2": {"name": "punctuation.definition.list.markdown.ps"},
            "3": {"name": "comment.line.double-slash.ps"}
          }
        },
        {
          "match": "(^\/\/)\\s*(@)(description|function|param|returns|type|field|strategy_alert_message|variable)(.*)",
          "captures": {
            "0": {"name": "meta.annotation.ps"},
            "1": {"name": "comment.line.double-slash.ps"},
            "2": {"name": "punctuation.definition.annotation.ps"},
            "3": {"name": "meta.annotation.identifier.ps"},
            "4": {"name": "comment.line.double-slash.ps"}
          }
        },
        {
          "match": "(^\/\/).*(\\d{4}\\s\\w{3,10}\\s\\w{3,10}).*(\\|)\\s(\\d{2}:\\d{2}:\\d{2})(.*)(#)",
          "captures": {
            "0": {"name": "comment.line.double-slash.ps"},
            "1": {"name": "comment.line.double-slash.ps"},
            "2": {"name": "markup.italic.markdown.ps"},
            "3": {"name": "comment.line.double-slash.ps"},
            "4": {"name": "punctuation.definition.list.markdown.ps"},
            "5": {"name": "invalid.illegal.ps"},
            "6": {"name": "comment.line.double-slash.ps"}
          }
        },
        {
          "match": "(^\/\/).*(\\d{2}-\\d{2}-\\d{2}).*(\\|)\\s(\\d{2}:\\d{2}:\\d{2})(.*)(#)",
          "captures": {
            "0": {"name": "comment.line.double-slash.ps"},
            "1": {"name": "comment.line.double-slash.ps"},
            "2": {"name": "markup.italic.markdown.ps"},
            "3": {"name": "comment.line.double-slash.ps"},
            "4": {"name": "punctuation.definition.list.markdown.ps"},
            "5": {"name": "invalid.illegal.ps"},
            "6": {"name": "comment.line.double-slash.ps"}
          }
        },
        {
          "match": "(^\/\/).*(##)(.*)(\\|)\\s*(>)\\s*(.*)(#)",
          "captures": {
            "0": {"name": "comment.line.double-slash.ps"},
            "1": {"name": "comment.line.double-slash.ps"},
            "2": {"name": "markup.italic.markdown.ps"},
            "3": {"name": "token.info-token.ps"},
            "4": {"name": "comment.line.double-slash.ps"},
            "5": {"name": "invalid.illegal.ps"},
            "6": {"name": "punctuation.definition.list.markdown.ps"}
          }
        },
        {
          "match": "//.*",
          "name": "comment.line.double-slash.ps"
        }
      ]
    },
    "imports":{
      "patterns": [
        {
          "match": "^(import)\\s+([\\w-]+)(\/)(\\w+)(\/)(\\w+)\\s+(as)\\s+(\\w+)",
          "captures": {
            "1": {"name": "keyword.control.import.ps"},
            "2": {"name": "entity.name.type.class.ps"},
            "3": {"name": "punctuation.separator.ps"},
            "4": {"name": "entity.name.type.class.ps"},
            "5": {"name": "punctuation.separator.ps"},
            "6": {"name": "constant.numeric.ps"},
            "7": {"name": "keyword.control.as.ps"},
            "8": {"name": "entity.name.namespace.ps"}
          }
        },
        {
          "match": "^(import)\\s+([\\w-]+)(\/)(\\w+)(\/)(\\w+)",
          "captures": {
            "1": {"name": "keyword.control.import.ps"},
            "2": {"name": "entity.name.type.class.ps"},
            "3": {"name": "punctuation.separator.ps"},
            "4": {"name": "entity.name.type.class.ps"},
            "5": {"name": "punctuation.separator.ps"},
            "6": {"name": "constant.numeric.ps"}
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {"0": {"name": "punctuation.definition.string.begin.ps"}},
          "end": "\"",
          "endCaptures": {"0": {"name": "punctuation.definition.string.end.ps"}},
          "name": "string.quoted.double.ps",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escaped.ps"
            },
            {
              "match": "(\\{)([^\"\\{\\}]+)(\\})",
              "captures": {
                "0": {"name": "variable.parameter.ps"},
                "1": {"name": "constant.character.format.placeholder.other.ps"},
                "3": {"name": "constant.character.format.placeholder.other.ps"},
                "2": {"patterns": [{"include": "#format_placeholders"}]}
              }
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {"1": {"name": "punctuation.definition.string.begin.ps"}},
          "end": "'",
          "endCaptures": {"1": {"name": "punctuation.definition.string.end.ps"}},
          "name": "string.quoted.single.ps",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escaped.ps"
            },
            {
              "match": "(\\{)([^'\\{\\}]+)(\\})",
              "captures": {
                "0": {"name": "variable.parameter.ps"},
                "1": {"name": "constant.character.format.placeholder.other.ps"},
                "3": {"name": "constant.character.format.placeholder.other.ps"},
                "2": {"patterns": [{"include": "#format_placeholders"}]}
              }
            }
          ]
        }
      ]
    },
    "format_placeholders": {
      "patterns": [
        {
          "match": "\\,",
          "name": "punctuation.separator.comma.ps"
        },
        {
          "match": "\\b([0-9]+)\\b(?!\\.)",
          "name": "constant.numeric.decimal.ps"
        },
        {
          "match": "[^\\s,]+",
          "name": "variable.parameter.ps"
        }
      ]
    },
    "built_in_variables": {
      "patterns": [
        {
          "match": "(?<![\\.]\\s*)\\b(adjustment)(\\.)(dividends|none|splits)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(alert)(\\.)(freq_all|freq_once_per_bar|freq_once_per_bar_close)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(barmerge)(\\.)(gaps_off|gaps_on|lookahead_off|lookahead_on)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(barstate)(\\.)(islastconfirmedhistory|isconfirmed|isfirst|ishistory|islast|isnew|isrealtime)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(chart)(\\.)(bg_color|fg_color|is_heikinashi|is_kagi|is_linebreak|is_pnf|is_range|is_renko|is_standard|left_visible_bar_time|right_visible_bar_time)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(color)(\\.)(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(currency)(\\.)(AUD|BTC|CAD|CHF|ETH|EUR|GBP|HKD|INR|JPY|KRW|MYR|NOK|NONE|NZD|RUB|SEK|SGD|TRY|USDT|USD|ZAR)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(dayofweek)(\\.)(friday|monday|saturday|sunday|thursday|tuesday|wednesday)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(display)(\\.)(all|data_window|none|pane|price_scale|status_line)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(dividends)(\\.)(future_amount|future_ex_date|future_pay_date|gross|net)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(earnings)(\\.)(actual|estimate|standardized|future_eps|future_period_end_time|future_revenue|future_time)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(extend)(\\.)(both|left|none|right)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(font)(\\.)(family_default|family_monospace)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(format)(\\.)(inherit|mintick|percent|price|volume)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(hline)(\\.)(style_dashed|style_dotted|style_solid)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(label)(\\.)(style_arrowdown|style_arrowup|style_circle|style_cross|style_diamond|style_flag|style_label_center|style_label_down|style_label_left|style_label_lower_left|style_label_lower_right|style_label_right|style_label_up|style_label_upper_left|style_label_upper_right|style_none|style_square|style_text_outline|style_triangledown|style_triangleup|style_xcross)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(line)(\\.)(style_arrow_both|style_arrow_left|style_arrow_right|style_dashed|style_dotted|style_solid)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(location)(\\.)(abovebar|absolute|belowbar|bottom|top)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(math)(\\.)(e|phi|pi|rphi)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(order)(\\.)(ascending|descending)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(plot)(\\.)(style_areabr|style_area|style_circles|style_columns|style_cross|style_histogram|style_linebr|style_line|style_stepline_diamond|style_steplinebr|style_stepline)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(position)(\\.)(bottom_center|bottom_left|bottom_right|middle_center|middle_left|middle_right|top_center|top_left|top_right)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(scale)(\\.)(left|none|right)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(session)(\\.)(extended|isfirstbar_regular|isfirstbar|islastbar_regular|islastbar|ismarket|ispostmarket|ispremarket|regular)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(shape)(\\.)(arrowdown|arrowup|circle|cross|diamond|flag|labeldown|labelup|square|triangledown|triangleup|xcross)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(size)(\\.)(auto|huge|large|normal|small|tiny)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(splits)(\\.)(denominator|numerator)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(strategy)(\\.)(account_currency|cash|equity|eventrades|fixed|grossloss_percent|grossprofit_percent|grossloss|grossprofit|initial_capital|long|losstrades|margin_liquidation_price|max_contracts_held_all|max_contracts_held_long|max_contracts_held_short|max_drawdown_percent|max_runup_percent|netprofit_percent|openprofit_percent|max_drawdown|max_runup|netprofit|openprofit|percent_of_equity|position_avg_price|position_entry_name|position_size|short|wintrades)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(strategy)(\\.)(commission)(\\.)(cash_per_contract|cash_per_order|percent)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "support.constant.ps"
            },
            "4": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(strategy)(\\.)(direction)(\\.)(all|long|short)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "support.constant.ps"
            },
            "4": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(strategy)(\\.)(oca)(\\.)(cancel|none|reduce)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "support.constant.ps"
            },
            "4": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(syminfo)(\\.)(basecurrency|country|currency|description|employees|industry|minmove|mintick|pointvalue|prefix|pricescale|recommendations_buy_strong|recommendations_buy|recommendations_date|recommendations_hold|recommendations_sell_strong|recommendations_sell|recommendations_total|root|sector|session|shareholders|shares_outstanding_float|shares_outstanding_total|target_price_average|target_price_date|target_price_estimates|target_price_high|target_price_low|target_price_median|tickerid|ticker|timezone|type|volumetype)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(ta)(\\.)(accdist|iii|nvi|obv|pvi|pvt|tr|vwap|wad|wvad)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(box|line|linefill|label|polyline|table)(\\.)(all)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(text)(\\.)(align_bottom|align_center|align_left|align_right|align_top|wrap_auto|wrap_none)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(timeframe)(\\.)(isdaily|isdwm|isintraday|isminutes|ismonthly|isseconds|isweekly|multiplier|period)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(xloc)(\\.)(bar_index|bar_time)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(yloc)(\\.)(abovebar|belowbar|price)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(true)\\b",
          "name": "constant.language.boolean.true.ps"
        },
        {
          "match": "\\b(false)\\b",
          "name": "constant.language.boolean.false.ps"
        },
        {
          "match": "\\b([0-9]+)\\b",
          "name": "constant.numeric.decimal.ps"
        },
        {
          "match": "(?<!\\w)#[a-fA-F0-9]{6}\\b",
          "name": "constant.numeric.decimal.ps"
        },
        {
          "match": "(?<!\\w)#[a-fA-F0-9]{8}\\b",
          "name": "constant.numeric.decimal.ps"
        }
      ]
    },
    "built_in_functions": {
      "patterns": [
        {
          "match": "^\\s*\\b(indicator|library|strategy)(?=\\s*\\()",
          "name": "storage.type.class.ps"
        },
        {
          "match": "\\b(array)(\\.)(abs|avg|binary_search_leftmost|binary_search_rightmost|binary_search|clear|concat|copy|covariance|every|fill|first|from|get|includes|indexof|insert|join|lastindexof|last|max|median|min|mode|new_bool|new_box|new_color|new_float|new_int|new_label|new_line|new_linefill|new_string|new_table|percentile_linear_interpolation|percentile_nearest_rank|percentrank|pop|push|range|remove|reverse|set|shift|size|slice|some|sort_indices|sort|standardize|stdev|sum|unshift|variance)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(matrix)(\\.)(add_col|add_row|avg|columns|col|concat|copy|det|diff|eigenvalues|eigenvectors|elements_count|fill|get|inv|is_antidiagonal|is_antisymmetric|is_binary|is_diagonal|is_identity|is_square|is_stochastic|is_symmetric|is_triangular|is_zero|kron|max|median|min|mode|mult|pinv|pow|rank|remove_col|remove_row|reshape|reverse|rows|row|set|sort|submatrix|sum|swap_columns|swap_rows|trace|transpose)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(array|matrix)(\\.)(new)\\s*(<)\\s*([a-zA-Z_][a-zA-Z0-9_\\.]*)\\b\\s*(>)(?=\\s*\\()",
          "captures": {
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "keyword.operator.new.ps"
            },
            "4": {
              "name": "punctuation.definition.generic.begin.ps"
            },
            "5": {
              "name": "support.type.primitive.ps"
            },
            "6": {
              "name": "punctuation.definition.generic.end.ps"
            }
          }
        },
        {
          "match": "\\b(box)(\\.)(copy|delete|get_bottom|get_left|get_right|get_top|set_bgcolor|set_border_color|set_border_style|set_border_width|set_bottom_right_point|set_bottom|set_extend|set_lefttop|set_left|set_rightbottom|set_right|set_text_color|set_text_font_family|set_text_halign|set_text_size|set_text_valign|set_text_wrap|set_text|set_top_left_point|set_top)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(box|color|label|line|linefill|table|ticker|chart.point|polyline)(\\.)(new)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "keyword.operator.new.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(chart)(\\.)(point)(\\.)(copy|from_index|from_time|now)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "support.function.ps"
            },
            "4": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(color)(\\.)(rgb|b|from_gradient|g|r|t)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(input)(\\.)(bool|color|float|int|price|session|source|string|symbol|text_area|timeframe|time)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(label)(\\.)(copy|delete|get_text|get_x|get_y|set_color|set_point|set_size|set_style|set_text_font_family|set_textalign|set_textcolor|set_text|set_tooltip|set_xloc|set_xy|set_x|set_yloc|set_y)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(line)(\\.)(copy|delete|get_price|get_x1|get_x2|get_y1|get_y2|set_color|set_extend|set_first_point|set_second_point|set_style|set_width|set_x1|set_x2|set_xloc|set_xy1|set_xy2|set_y1|set_y2)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(linefill)(\\.)(delete|get_line1|get_line2|set_color)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(log)(\\.)(error|info|warning)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(map)(\\.)(clear|contains|copy|get|keys|put_all|put|remove|size|values)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(map)(\\.)(new)\\s*(<)\\s*([a-zA-Z_]+)\\s*(\\,)\\s*([a-zA-Z_][\\w\\.]*)\\b\\s*(>)(?=\\s*\\()",
          "captures": {
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "keyword.operator.new.ps"
            },
            "4": {
              "name": "punctuation.definition.generic.begin.ps"
            },
            "5": {
              "name": "support.type.primitive.ps"
            },
            "6": {
              "name": "punctuation.separator.comma.ps"
            },
            "7": {
              "name": "support.type.primitive.ps"
            },
            "8": {
              "name": "punctuation.definition.generic.end.ps"
            }
          }
        },
        {
          "match": "\\b(math)(\\.)(abs|acos|asin|atan|avg|ceil|cos|exp|floor|log10|log|max|min|pow|random|round_to_mintick|round|sign|sin|sqrt|sum|tan|todegrees|toradians)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(polyline)(\\.)(delete)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(request)(\\.)(currency_rate|dividends|earnings|economic|financial|quandl|security_lower_tf|security|seed|splits)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(runtime)(\\.)(error)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(str)(\\.)(contains|endswith|format_time|format|length|lower|match|pos|replace_all|replace|split|startswith|substring|tonumber|tostring|upper)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(strategy)(\\.)(closedtrades)(\\.)(commission|entry_bar_index|entry_comment|entry_id|entry_price|entry_time|exit_bar_index|exit_comment|exit_id|exit_price|exit_time|max_drawdown_percent|max_runup_percent|profit_percent|max_drawdown|max_runup|profit|size)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "support.function.ps"
            },
            "4": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(strategy)(\\.)(opentrades)(\\.)(commission|entry_bar_index|entry_comment|entry_id|entry_price|entry_time|max_drawdown_percent|max_runup_percent|profit_percent|max_drawdown|max_runup|profit|size)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "support.function.ps"
            },
            "4": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(strategy)(\\.)(risk)(\\.)(allow_entry_in|max_cons_loss_days|max_drawdown|max_intraday_filled_orders|max_intraday_loss|max_position_size)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            },
            "3": {
              "name": "support.function.ps"
            },
            "4": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(strategy)(\\.)(cancel_all|cancel|close_all|close|convert_to_account|convert_to_symbol|default_entry_qty|entry|exit|order)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(syminfo)(\\.)(prefix|ticker)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(ta)(\\.)(alma|atr|barssince|bbw|bb|cci|change|cmo|cog|correlation|crossover|crossunder|cross|cum|dev|dmi|ema|falling|highestbars|highest|hma|kcw|kc|linreg|lowestbars|lowest|macd|max|median|mfi|min|mode|mom|percentile_linear_interpolation|percentile_nearest_rank|percentrank|pivot_point_levels|pivothigh|pivotlow|range|rising|rma|roc|rsi|sar|sma|stdev|stoch|supertrend|swma|tr|tsi|valuewhen|variance|vwap|vwma|wma|wpr)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(table)(\\.)(cell_set_bgcolor|cell_set_height|cell_set_text_color|cell_set_text_font_family|cell_set_text_halign|cell_set_text_size|cell_set_text_valign|cell_set_text|cell_set_tooltip|cell_set_width|cell|clear|delete|merge_cells|set_bgcolor|set_border_color|set_border_width|set_frame_color|set_frame_width|set_position)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(ticker)(\\.)(heikinashi|inherit|kagi|linebreak|modify|pointfigure|renko|standard)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "\\b(timeframe)(\\.)(change|from_seconds|in_seconds)\\b(?=\\s*\\()",
          "captures": {
            "0": {
              "name": "support.function.property.ps"
            },
            "1": {
              "name": "support.function.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(alert|alertcondition|barcolor|bgcolor|bool|box|color|dayofmonth|dayofweek|fixnan|float|hline|hour|input|int|label|line|linefill|max_bars_back|minute|month|na|nz|plot|plotarrow|plotbar|plotcandle|plotchar|plotshape|second|string|table|time_close|timestamp|time|weekofyear|year)(?=\\s*\\((?!\\s*\\)))",
          "name": "support.function.property.ps"
        },
        {"include": "#built_in_var_extend"},
        {"include": "#array_methods"},
        {"include": "#box_methods"},
        {"include": "#label_methods"},
        {"include": "#line_methods"},
        {"include": "#linefill_methods"},
        {"include": "#map_methods"},
        {"include": "#matrix_methods"},
        {"include": "#table_methods"},
        {
          "match": "(?<![\\.]\\s*)\\b(fill)(?=\\s*\\((?!\\s*[\"'\\)]))",
          "name": "support.function.property.ps"
        }      
      ]
    },
    "user_defined_functions": {
        "patterns": [
        {
          "match": "(?<=^|[^\\w])(?!array\\.new|matrix\\.new|map\\.new)([\\w\\.]*)(\\.)(new|copy)\\b(?=\\s*\\()",
          "captures": {
            "1": {"name": "support.type.primitive.ps"},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "keyword.operator.new.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*))(\\.)([a-zA-Z_]\\w*)\\b(?=\\s*\\()",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "entity.name.function.ps"}
          }
        },
        {
          "match": "\\b([a-zA-Z_]\\w*)\\b(?=\\s*\\()",
          "name": "entity.name.function.ps"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(if|else|return)\\b",
          "name": "keyword.control.conditional.ps"
        },
        {
          "match": "\\b(switch)\\b",
          "name": "keyword.control.switch.ps"
        },
        {
          "match": "=>",
          "name": "keyword.control.switch.ps"
        },
        {
          "match": "\\b(in|continue|break|for|while|by)\\b",
          "name": "keyword.control.loop.ps"
        },
        {
          "match": "\\b(to)\\b(?!\\s*\\=)",
          "name": "keyword.control.loop.ps"
        },
        {
          "match": "\\b(var|varip)\\b(?!\\s*\\=)",
          "name": "storage.type.ps"
        },
        {
          "match": "\\b(and|or|not)\\b",
          "name": "keyword.operator.word.ps"
        }
      ]
    },
    "exports":{
      "patterns": [
        {
          "include": "#collection_new"
        },
        {
          "match": "^(?:(export)\\s+)?\\b(type)\\s+([a-zA-Z_]\\w*)\\b(?=\\s*(?:\\s*//.*)?$)",
          "captures": {
            "1": {"name": "keyword.control.export.ps"},
            "2": {"name": "storage.type.type.ps"},
            "3": {"name": "support.type.primitive.ps"}
          }
        },
        {
          "match": "^(export)\\s+(type)\\b",
          "captures": {
            "1": {"name": "keyword.control.export.ps"},
            "2": {"name": "storage.type.type.ps"}
          }
        },
        {
          "match": "^(export)\\s+(method)\\b",
          "captures": {
            "1": {"name": "keyword.control.export.ps"},
            "2": {"name": "storage.type.function.ps"}
          }
        },
        {
          "match": "^\\btype\\b",
          "name": "storage.type.type.ps"
        }
      ]
    },
    "variable_declarations": {
      "patterns": [
        {
          "match": "\\b([\\w\\.]+)\\b(\\s*\\[\\s*\\])?\\s+([a-zA-Z_]\\w*)\\s*(?=\\=)(?!\\=\\=)",
          "captures": {
            "1":{"patterns": [
              {"include": "#keywords"},
              {"include": "#keyword_control_words"},
              {
                "match": ".*",
                "name":"support.type.primitive.ps"
              }
            ]},
            "2":{"name":"meta.brace.square.ps"},
            "3":{"name":"variable.other.readwrite.ps"}
          }
        },
        {
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\=|:=)",
          "name": "variable.other.readwrite.ps"
        },
        {
          "match": "^\\s*\\b([\\w\\.]+)\\b(\\s*\\[\\s*\\])?\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=(?:\\s*//.*)?$)",
          "captures": {
            "1":{"patterns": [
              {"include": "#keywords"},
              {"include": "#keyword_control_words"},
              {
                "match": ".*",
                "name":"support.type.primitive.ps"
              }
            ]},
            "2":{"name":"meta.brace.square.ps"},
            "3":{"name":"variable.other.readwrite.ps"}
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(\\-\\=|\\+\\=|\\*\\=|/=|%=)",
          "name": "keyword.operator.assignment.compound.ps"
        },
        {
          "match": "(\\-|\\+|\\*|/|%)",
          "name": "keyword.operator.arithmetic.ps"
        },
        {
          "match": "(<=|>=|<|>)",
          "name": "keyword.operator.relational.ps"
        },
        {
          "match": "(={2}|!=)",
          "name": "keyword.operator.comparison.ps"
        },
        {
          "match": ":=",
          "name": "keyword.operator.assignment.ps"
        },
        {
          "match": "(\\?|\\:)",
          "name": "keyword.operator.ternary.ps"
        },
        {
          "match": "\\.",
          "name": "punctuation.accessor.ps"
        },
        {
          "match": "\\(",
          "name": "meta.brace.round.ps"
        },
        {
          "match": "\\)",
          "name": "meta.brace.round.ps"
        },
        {
          "match": "[]\\[]",
          "name": "meta.brace.square.ps"
        },
        {
          "match": "\\,",
          "name": "punctuation.separator.comma.ps"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.ps"
        },
        {"include": "#keyword_control_words"},
        {"include": "#support_type"}
      ]
    },
    "local_variables":{
      "patterns": [
        {
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
          "name": "variable.other.readwrite.ps"
        }
      ]
    },
    "collection_new":{
      "patterns": [
        {
          "match": "(?<![\\.]\\s*)\\b(array|matrix)\\s*(<)\\s*([a-zA-Z_][\\w\\.]*)\\b\\s*(>)",
          "captures": {
            "1":{"name":"support.type.primitive.ps"},
            "2":{"name":"punctuation.definition.generic.begin.ps"},
            "3":{"name":"support.type.primitive.ps"},
            "4":{"name":"punctuation.definition.generic.end.ps"}
          }
        },
        {
          "match": "(?<![\\.]\\s*)\\b(map)\\s*(<)\\s*(int|float|bool|string|color)\\s*(\\,)\\s*([a-zA-Z_][\\w\\.]*)\\b\\s*(>)",
          "captures": {
            "1":{"name":"support.type.primitive.ps"},
            "2":{"name":"punctuation.definition.generic.begin.ps"},
            "3":{"name":"support.type.primitive.ps"},
            "4":{"name":"punctuation.separator.comma.ps"},
            "5":{"name":"support.type.primitive.ps"},
            "6":{"name":"punctuation.definition.generic.end.ps"}
          }
        },
        {
          "match": "\\b([a-zA-Z_][\\w\\.]*)\\b\\s*(\\[\\s*\\])",
          "captures": {
            "0":{"name":"support.type.primitive.ps"},
            "1":{"name":"support.type.primitive.ps"},
            "2":{"name":"meta.brace.square.ps"}
          }
        }
      ]
    },
    "multiline_functions":{
      "patterns": [
        {
          "match": "(?<=^(?:export\\s+)?(?:method\\s+)?\\b\\w+\\s*\\()([\\s\\S]*)(\\))\\s*(\\=>)",
          "captures": {
            "1":{"patterns":[{"include": "#functions_parameters_capture"}]},
            "2":{"name":"meta.brace.round.ps"},
            "3":{"name":"storage.type.function.arrow.ps"}
        }
        },
        {
          "match": "(?<=^export\\s+(?:method\\s+)?\\b\\w+\\s*\\()\\b([\\w][^\\(\\)]*)(?=\\s*\\,\\s*(?://.*)?$)",
          "captures": {"1":{"patterns":[{"include": "#functions_parameters_capture"}]}}
        },
        {
          "match": "(?<=^(?:export\\s+)?method\\s+\\b\\w+\\s*\\()\\b([\\w][^\\(\\)]*)(?=\\s*\\,\\s*(?://.*)?$)",
          "captures": {"1":{"patterns":[{"include": "#functions_parameters_capture"}]}}
        },
        {
          "match": "(?<=^(?:export\\s+)?(?:method\\s+)?\\b\\w+\\s*\\()((?:\\s*(?:\\b[\\w\\.]+\\s*(?:(?:\\<\\s*(?:(?:[\\w\\.]+)|(?:[\\w]+\\s*\\,\\s*[\\w\\.]+))\\s*\\>)|(?:\\[\\s*\\]))?\\s+)?\\b\\w+\\s*(?:\\=\\s*[\\w\\.\\#]+)?\\s*\\,)*(?:\\s*\\b[\\w\\.]+\\s*(?:(?:\\<\\s*(?:(?:[\\w\\.]+)|(?:[\\w]+\\s*\\,\\s*[\\w\\.]+))\\s*\\>)|(?:\\[\\s*\\]))?\\s+\\b\\w+\\s*(?:\\=\\s*[\\w\\.\\#]+)?\\s*)(?:\\,\\s*(?:\\b[\\w\\.]+\\s*(?:(?:\\<\\s*(?:(?:[\\w\\.]+)|(?:[\\w]+\\s*\\,\\s*[\\w\\.]+))\\s*\\>)|(?:\\[\\s*\\]))?\\s+)?\\b\\w+\\s*(?:\\=\\s*[\\w\\.\\#]+)?\\s*)*)(?=\\s*\\,\\s*(?://.*)?$)",
          "captures": {"1":{"patterns":[{"include": "#functions_parameters_capture"}]}}
        },
        {
          "match": "(?<=^\\s+)((?:\\s*(?:\\b[\\w\\.]+\\s*(?:(?:\\<\\s*(?:(?:[\\w\\.]+)|(?:[\\w]+\\s*\\,\\s*[\\w\\.]+))\\s*\\>)|(?:\\[\\s*\\]))?\\s+)?\\b\\w+\\s*(?:\\=\\s*[\\w\\.\\#]+)?\\s*\\,)*(?:\\s*\\b[\\w\\.]+\\s*(?:(?:\\<\\s*(?:(?:[\\w\\.]+)|(?:[\\w]+\\s*\\,\\s*[\\w\\.]+))\\s*\\>)|(?:\\[\\s*\\]))?\\s+\\b\\w+\\s*(?:\\=\\s*[\\w\\.\\#]+)?\\s*)(?:\\,\\s*(?:\\b[\\w\\.]+\\s*(?:(?:\\<\\s*(?:(?:[\\w\\.]+)|(?:[\\w]+\\s*\\,\\s*[\\w\\.]+))\\s*\\>)|(?:\\[\\s*\\]))?\\s+)?\\b\\w+\\s*(?:\\=\\s*[\\w\\.\\#]+)?\\s*)*)(?=\\s*\\,\\s*(?://.*)?$)",
          "captures": {"1":{"patterns":[{"include": "#functions_parameters_capture"}]}}
        },
        {
          "match": "(?<=^\\s+)\\b([\\w][^\\(\\)]*)(\\))\\s*(\\=>)",
          "captures": {
            "1":{"patterns":[{"include": "#functions_parameters_capture"}]},
            "2":{"name":"meta.brace.round.ps"},
            "3":{"name":"storage.type.function.arrow.ps"}
          }
        }
      ]
    },
    "functions_parameters_capture":{
      "patterns": [
        {"include": "#strings"},
        {"include": "#collection_new"},
        {"include": "#built_in_variables"},
        {"include": "#support_type"},
        {"include": "#built_in_var_extend"},
        {"include": "#user_define_types"},
        {
          "match": "\\b([a-zA-Z_]\\w*)\\b",
          "name":"variable.parameter.ps"
        },
        {
          "include": "#operators"
        }
      ]
    },
    "hover_function_parameters":{
      "patterns": [
        {
          "match": "(?<=^(?:(?:[a-zA-Z_]\\w*)|(?:\\b[\\w\\.]*\\.(?:(?:[a-zA-Z_]\\w*)|(?:new\\s*<\\s*[a-zA-Z_][^\\(\\)]*\\b\\s*>))))\\s*\\(\\s*)([^\\(\\)]*)\\)\\s*(→)(.+)",
          "captures": {
            "1":{
              "patterns": [
                {
                  "match": "\\b([a-zA-Z_]\\w*)\\b",
                  "name": "variable.parameter.ps"
                },
                {
                  "include": "#operators"
                }
              ]
            },
            "2":{"name":"storage.type.function.arrow.ps"},
            "3":{
              "patterns": [
                {"include": "#operators"},
                {
                  "match": "\\b(void|input|map|keyType|valueType|value_type)\\b",
                  "name": "support.type.primitive.ps"
                },
                {
                  "match": "\\b([a-zA-Z_]+)\\b",
                  "name": "support.type.primitive.ps"
                }
              ]
            }
          }
        }
      ]
    },
    "user_define_types":{
      "patterns": [
        {
          "match": "\\b([\\w\\.]+)\\b\\s+([a-zA-Z_]\\w*)\\b",
                  "captures": {
                    "1":{"name":"support.type.primitive.ps"},
                    "2":{"name":"variable.parameter.ps"}
                  }
        }
      ]
    },
    "array_methods":{
      "patterns":[
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(max|min|sort_indices|sort|stdev)\\b(?=\\s*\\()",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(binary_search_leftmost|binary_search_rightmost|binary_search|concat|covariance|get|percentile_linear_interpolation|percentile_nearest_rank|percentrank|remove|set|slice|variance)\\b(?=\\s*\\((?!\\s*[\"'\\)]))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(fill|from|includes|indexof|insert|join|lastindexof|push|unshift)\\b(?=\\s*\\((?!\\s*\\)))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(abs|avg|clear|copy|every|first|last|median|mode|pop|range|reverse|shift|size|some|standardize|sum)\\b(?=\\s*\\(\\s*\\))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        }
      ]
    },
    "box_methods":{
      "patterns":[
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(set_bgcolor|set_border_color|set_border_style|set_border_width|set_bottom_right_point|set_bottom|set_extend|set_lefttop|set_left|set_rightbottom|set_right|set_text_color|set_text_font_family|set_text_halign|set_text_size|set_text_valign|set_text_wrap|set_top_left_point|set_top)\\b(?=\\s*\\((?!\\s*[\"'\\)]))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(set_text)\\b(?=\\s*\\((?!\\s*\\)))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(copy|delete|get_bottom|get_left|get_right|get_top)\\b(?=\\s*\\(\\s*\\))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        }
      ]
    },
    "label_methods":{
      "patterns":[
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(set_size)\\b(?=\\s*\\()",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(set_color|set_point|set_style|set_text_font_family|set_textalign|set_textcolor|set_x|set_xloc|set_xy|set_y|set_yloc)\\b(?=\\s*\\((?!\\s*[\"'\\)]))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(set_text|set_tooltip)\\b(?=\\s*\\((?!\\s*\\)))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(copy|delete|get_text|get_x|get_y)\\b(?=\\s*\\(\\s*\\))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        }
      ]
    },
    "line_methods":{
      "patterns":[
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(get_price|set_color|set_extend|set_first_point|set_second_point|set_style|set_width|set_x1|set_x2|set_xloc|set_xy1|set_xy2|set_y1|set_y2)\\b(?=\\s*\\((?!\\s*[\"'\\)]))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(copy|delete|get_x1|get_x2|get_y1|get_y2)\\b(?=\\s*\\(\\s*\\))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        }
      ]
    },
    "linefill_methods":{
      "patterns":[
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(set_color)\\b(?=\\s*\\((?!\\s*[\"'\\)]))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(delete|get_line1|get_line2)\\b(?=\\s*\\(\\s*\\))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        }
      ]
    },
    "map_methods":{
      "patterns":[
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(put_all)\\b(?=\\s*\\((?!\\s*[\"'\\)]))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(contains|get|put|remove)\\b(?=\\s*\\((?!\\s*\\)))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(clear|copy|keys|size|values)\\b(?=\\s*\\(\\s*\\))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        }
      ]
    },
    "matrix_methods":{
      "patterns":[
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(add_col|add_row|remove_col|remove_row|sort|submatrix)\\b(?=\\s*\\()",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(col|concat|diff|get|kron|mult|pow|reshape|row|set|sum|swap_columns|swap_rows)\\b(?=\\s*\\((?!\\s*[\"'\\)]))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(fill)\\b(?=\\s*\\((?!\\s*\\)))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(avg|columns|copy|det|eigenvalues|eigenvectors|elements_count|inv|is_antidiagonal|is_antisymmetric|is_binary|is_diagonal|is_identity|is_square|is_stochastic|is_symmetric|is_triangular|is_zero|max|median|min|mode|pinv|rank|reverse|rows|trace|transpose)\\b(?=\\s*\\(\\s*\\))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        }
      ]
    },
    "table_methods":{
      "patterns":[
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(set_bgcolor|set_border_color|set_border_width|set_frame_color|set_frame_width)\\b(?=\\s*\\()",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(cell_set_bgcolor|cell_set_height|cell_set_text_color|cell_set_text_font_family|cell_set_text_halign|cell_set_text_size|cell_set_text_valign|cell_set_text|cell_set_tooltip|cell_set_width|cell|clear|merge_cells|set_position)\\b(?=\\s*\\((?!\\s*[\"'\\)]))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        },
        {
          "match": "(?:([\\w\\.]*)|(?<=\\)))(\\.)(delete)\\b(?=\\s*\\(\\s*\\))",
          "captures": {
            "1": {"patterns": [{"include": "#method_namespace"}]},
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "support.function.property.ps"}
          }
        }
      ]
    },
    "method_namespace":{
      "patterns": [
        {
          "match": "([\\.]?\\b[a-zA-Z_][\\w\\.]*)\\b(\\.)([a-zA-Z_]\\w*)\\b",
          "captures": {
            "1": {
              "patterns": [
                {
                  "match": "\\b[a-zA-Z_]\\w*\\b",
                  "name": "variable.other.readwrite.ps"
                },
                {
                  "match": "\\.",
                  "name": "punctuation.accessor.ps"
                }
              ]
            },
            "2": {"name": "punctuation.accessor.ps"},
            "3": {"name": "variable.other.readwrite.ps"}
          }
        },
        {
          "match": "([\\.]?)\\b([a-zA-Z_]\\w*)\\b",
          "captures": {
            "1": {"name": "punctuation.accessor.ps"},
            "2": {"name": "variable.other.readwrite.ps"}
          }
        }
      ]
    },
    "support_type":{
      "patterns":[
        {"include": "#primitive_type"},
        {
          "match": "(?<![\\.]\\s*)\\b(box|color|label|line|linefill|table|polyline)\\b(?!\\s*[\\=\\(\\,])",
          "name": "support.type.primitive.ps"
        }
      ]
    },
    "primitive_type":{
      "patterns":[
        {
          "match": "(?<![\\.]\\s*)\\b(const|bool|float|int|string|simple|series|array|map|matrix|chart.point)\\b(?!\\s*[\\=\\(\\)])",
          "name": "support.type.primitive.ps"
        }
      ]
    },
    "keyword_control_words":{
      "patterns": [
        {
          "match": "(?<![\\.]\\s*)\\b(method|type)\\b",
          "name": "storage.type.function.ps"
        },
        {
          "match": "(?<![\\.]\\s*)\\bimport\\b",
          "name": "keyword.control.import.ps"
        },
        {
          "match": "(?<![\\.]\\s*)\\bexport\\b",
          "name": "keyword.control.export.ps"
        }
      ]
    },
    "strategy_openclose_trade":{
      "patterns": [
        {
          "match": "(?<![\\.]\\s*)\\b(strategy)(\\.)(opentrades|closedtrades)\\b(?!\\s*\\()",
          "captures": {
            "0": {
              "name": "support.constant.property.ps"
            },
            "1": {
              "name": "support.constant.ps"
            },
            "2": {
              "name": "punctuation.accessor.ps"
            }
          }
        }
      ]
    },
    "built_in_var_extend":{
      "patterns": [
        {
          "match": "(?<![\\.]\\s*)\\b(hour|minute|month|second|time|volume|year)\\b(?=(?!\\s*(?:[\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
          "name": "support.constant.ps"
        },
        {
          "match": "(?<![\\.]\\s*)\\b(bar_index|close|dayofmonth|dayofweek|high|hl2|hlc3|hlcc4|last_bar_index|last_bar_time|low|na|ohlc4|open|time_close|time_tradingday|timenow|weekofyear)\\b(?=(?!\\s*(?:[\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
          "name": "support.constant.ps"
        },
        {"include": "#strategy_openclose_trade"}
      ]
    }
  },
  "scopeName": "source.ps"
}