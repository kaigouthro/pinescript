[
   {
     "pattern": "(?<![\\.]\\s*)\\b(alert)(?=\\s*\\()",
     "codeblock": [
        "alert(message, freq) → void"
     ],
     "markdown": "Creates an alert event when called during the real-time bar, which will trigger a script alert based on \"alert function events\" if one was previously created for the indicator or strategy through the \"Create Alert\" dialog box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_alert",
     "param": [
        {
           "field": "message (series string)",
           "description": "Message sent when the alert triggers. Required argument."
        },
        {
           "field": "freq (input string)",
           "description": "The triggering frequency. Possible values are: alert.freq_all (all function calls trigger the alert), alert.freq_once_per_bar (the first function call during the bar triggers the alert), alert.freq_once_per_bar_close (the function call triggers the alert only when it occurs during the last script iteration of the real-time bar, when it closes). The default is alert.freq_once_per_bar."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(alertcondition)(?=\\s*\\()",
     "codeblock": [
        "alertcondition(condition, title, message) → void"
     ],
     "markdown": "Creates alert condition, that is available in Create Alert dialog. Please note, that alertcondition does NOT create an alert, it just gives you more options in Create Alert dialog. Also, alertcondition effect is invisible on chart.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_alertcondition",
     "param": [
        {
           "field": "condition (series bool)",
           "description": "Series of boolean values that is used for alert. True values mean alert fire, false - no alert. Required argument."
        },
        {
           "field": "title (const string)",
           "description": "Title of the alert condition. Optional argument."
        },
        {
           "field": "message (const string)",
           "description": "Message to display when alert fires. Optional argument."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.abs)(?=\\s*\\()",
     "codeblock": [
        "array.abs(id) → float[]|int[]"
     ],
     "markdown": "Returns an array containing the absolute value of each element in the original array.",
     "returns": "An array containing the absolute value of each element in the original array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.abs",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.avg)(?=\\s*\\()",
     "codeblock": [
        "array.avg(id) → float|int"
     ],
     "markdown": "Returns the mean of an array's elements.",
     "returns": "Mean of array's elements.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.avg",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.binary_search)(?=\\s*\\()",
     "codeblock": [
        "array.binary_search(id, val) → series int"
     ],
     "markdown": "Returns the index of the value, or -1 if the value is not found. The array to search must be sorted in ascending order.",
     "returns": "Index of the value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.binary_search",
     "param": [
        {
           "field": "id (float[])",
           "description": "An array object."
        },
        {
           "field": "val (series int|float)",
           "description": "The value to search for in the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.binary_search_leftmost)(?=\\s*\\()",
     "codeblock": [
        "array.binary_search_leftmost(id, val) → series int"
     ],
     "markdown": "Returns the index of the value if it is found. When the value is not found, the function returns the index of the next smallest element to the left of where the value would lie if it was in the array. The array to search must be sorted in ascending order.",
     "returns": "Index of the value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.binary_search_leftmost",
     "param": [
        {
           "field": "id (float[])",
           "description": "An array object."
        },
        {
           "field": "val (series int|float)",
           "description": "The value to search for in the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.binary_search_rightmost)(?=\\s*\\()",
     "codeblock": [
        "array.binary_search_rightmost(id, val) → series int"
     ],
     "markdown": "Returns the index of the value if it is found. When the value is not found, the function returns the index of the element to the right of where the value would lie if it was in the array. The array must be sorted in ascending order.",
     "returns": "Index of the value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.binary_search_rightmost",
     "param": [
        {
           "field": "id (float[])",
           "description": "An array object."
        },
        {
           "field": "val (series int|float)",
           "description": "The value to search for in the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.clear)(?=\\s*\\()",
     "codeblock": [
        "array.clear(id) → void"
     ],
     "markdown": "Removes all elements from an array.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.clear",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.concat)(?=\\s*\\()",
     "codeblock": [
        "array.concat(id1, id2) → array<type>"
     ],
     "markdown": "Merge two arrays. It pushes all elements from the 2nd array to the 1st array, and returns the 1st array.",
     "returns": "The 1st array with merged elements from the 2nd array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.concat",
     "param": [
        {
           "field": "id1 (any array type)",
           "description": "The 1st array object."
        },
        {
           "field": "id2 (any array type)",
           "description": "The 2nd array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.copy)(?=\\s*\\()",
     "codeblock": [
        "array.copy(id) → array<type>"
     ],
     "markdown": "Creates a copy of an existing array.",
     "returns": "A copy of an array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.copy",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.covariance)(?=\\s*\\()",
     "codeblock": [
        "array.covariance(id1, id2, biased) → series float"
     ],
     "markdown": "Returns the covariance of two arrays.",
     "returns": "The covariance of two arrays.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.covariance",
     "param": [
        {
           "field": "id1 (int[])",
           "description": "An array object."
        },
        {
           "field": "id2 (int[])",
           "description": "An array object."
        },
        {
           "field": "biased (series bool)",
           "description": "Determines which estimate should be used. Optional. The default is true."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.every)(?=\\s*\\()",
     "codeblock": [
        "array.every(id) → series bool"
     ],
     "markdown": "Returns true if all elements of the `id` array are true, false otherwise.",
     "returns": "boolean",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.every",
     "param": [
        {
           "field": "id (bool[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.fill)(?=\\s*\\()",
     "codeblock": [
        "array.fill(id, value, index_from, index_to) → void"
     ],
     "markdown": "Sets elements of an array to a single value. If no index is specified, all elements are set. If only a start index (default 0) is supplied, the elements starting at that index are set. If both index parameters are used, the elements from the starting index up to but not including the end index (default na) are set.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.fill",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "value (series <type of the array's elements>)",
           "description": "Value to fill the array with."
        },
        {
           "field": "index_from (series int)",
           "description": "Start index, default is 0."
        },
        {
           "field": "index_to (series int)",
           "description": "End index, default is na. Must be one greater than the index of the last element to set."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.first)(?=\\s*\\()",
     "codeblock": [
        "array.first(id) → series <type>"
     ],
     "markdown": "Returns the array's 1st element. Throws a runtime error if the array is empty.",
     "returns": "The array's 1st element.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.first",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.from)(?=\\s*\\()",
     "codeblock": [
        "array.from(arg0, arg1, ...) → array<type>"
     ],
     "markdown": "Takes a variable number of arguments with one of the types and returns an array of the corresponding type.",
     "returns": "An array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.from",
     "param": [
        {
           "field": "arg0, arg1, ... (\\<arg..._type\\>)",
           "description": "Array arguments."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.get)(?=\\s*\\()",
     "codeblock": [
        "array.get(id, index) → series <type>"
     ],
     "markdown": "Returns the value of the element at the specified index.",
     "returns": "The array element's value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.get",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "index (series int)",
           "description": "The index of the element whose value is to be returned."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.includes)(?=\\s*\\()",
     "codeblock": [
        "array.includes(id, value) → series bool"
     ],
     "markdown": "Returns true if the value was found in an array, false otherwise.",
     "returns": "True if the value was found in the array, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.includes",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "value (series <type of the array's elements>)",
           "description": "The value to search in the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.indexof)(?=\\s*\\()",
     "codeblock": [
        "array.indexof(id, value) → series int"
     ],
     "markdown": "Returns the index of the first occurrence of the value, or -1 if the value is not found.",
     "returns": "The index of an element.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.indexof",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "value (series <type of the array's elements>)",
           "description": "The value to search in the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.insert)(?=\\s*\\()",
     "codeblock": [
        "array.insert(id, index, value) → void"
     ],
     "markdown": "Changes the contents of an array by adding new elements in place.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.insert",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "index (series int)",
           "description": "The index at which to insert the value."
        },
        {
           "field": "value (series <type of the array's elements>)",
           "description": "The value to add to the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.join)(?=\\s*\\()",
     "codeblock": [
        "array.join(id, separator) → series string"
     ],
     "markdown": "Creates and returns a new string by concatenating all the elements of an array, separated by the specified separator string.",
     "returns": "A new string",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.join",
     "param": [
        {
           "field": "id (float[]|int[]|string[])",
           "description": "An array object."
        },
        {
           "field": "separator (series string)",
           "description": "The string used to separate each array element."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.last)(?=\\s*\\()",
     "codeblock": [
        "array.last(id) → series <type>"
     ],
     "markdown": "Returns the array's last element. Throws a runtime error if the array is empty.",
     "returns": "The array's last element.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.last",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.lastindexof)(?=\\s*\\()",
     "codeblock": [
        "array.lastindexof(id, value) → series int"
     ],
     "markdown": "Returns the index of the last occurrence of the value, or -1 if the value is not found.",
     "returns": "The index of an element.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.lastindexof",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "value (series <type of the array's elements>)",
           "description": "The value to search in the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.max)(?=\\s*\\()",
     "codeblock": [
        "array.max(id, nth) → float|int"
     ],
     "markdown": "Returns the greatest value, or the nth greatest value in a given array.",
     "returns": "The greatest or the nth greatest value in the array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.max",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        },
        {
           "field": "nth (series int)",
           "description": "The nth greatest value to return, where zero is the greatest. Optional. The default is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.median)(?=\\s*\\()",
     "codeblock": [
        "array.median(id) → float|int"
     ],
     "markdown": "Returns the median of an array's elements.",
     "returns": "The median of the array's elements.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.median",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.min)(?=\\s*\\()",
     "codeblock": [
        "array.min(id, nth) → float|int"
     ],
     "markdown": "Returns the smallest value, or the nth smallest value in a given array.",
     "returns": "The smallest or the nth smallest value in the array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.min",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        },
        {
           "field": "nth (series int)",
           "description": "The nth smallest value to return, where zero is the smallest. Optional. The default is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.mode)(?=\\s*\\()",
     "codeblock": [
        "array.mode(id) → float|int"
     ],
     "markdown": "Returns the mode of an array's elements. If there are several values with the same frequency, it returns the smallest value.",
     "returns": "The most frequently occurring value from the `id` array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.mode",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_bool)(?=\\s*\\()",
     "codeblock": [
        "array.new_bool(size, initial_value) → bool[]"
     ],
     "markdown": "Creates a new array object of bool type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_bool",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series bool)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_box)(?=\\s*\\()",
     "codeblock": [
        "array.new_box(size, initial_value) → box[]"
     ],
     "markdown": "Creates a new array object of box type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_box",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series box)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_color)(?=\\s*\\()",
     "codeblock": [
        "array.new_color(size, initial_value) → color[]"
     ],
     "markdown": "Creates a new array object of color type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_color",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series color)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_float)(?=\\s*\\()",
     "codeblock": [
        "array.new_float(size, initial_value) → float[]"
     ],
     "markdown": "Creates a new array object of float type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_float",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series int|float)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_int)(?=\\s*\\()",
     "codeblock": [
        "array.new_int(size, initial_value) → int[]"
     ],
     "markdown": "Creates a new array object of int type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_int",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series int)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_label)(?=\\s*\\()",
     "codeblock": [
        "array.new_label(size, initial_value) → label[]"
     ],
     "markdown": "creates a new array object of label type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_label",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series label)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_line)(?=\\s*\\()",
     "codeblock": [
        "array.new_line(size, initial_value) → line[]"
     ],
     "markdown": "Creates a new array object of line type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_line",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series line)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_linefill)(?=\\s*\\()",
     "codeblock": [
        "array.new_linefill(size, initial_value) → linefill[]"
     ],
     "markdown": "creates a new array object of linefill type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_linefill",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series linefill)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_string)(?=\\s*\\()",
     "codeblock": [
        "array.new_string(size, initial_value) → string[]"
     ],
     "markdown": "Creates a new array object of string type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_string",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series string)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new_table)(?=\\s*\\()",
     "codeblock": [
        "array.new_table(size, initial_value) → table[]"
     ],
     "markdown": "Creates a new array object of table type elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new_table",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (series table)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.new)(?=\\s*<\\s*\\b[a-zA-Z0-9_\\.]+\\b\\s*>\\s*\\()",
     "codeblock": [
        "array.new<type>(size, initial_value) → array<type>"
     ],
     "markdown": "Creates a new array object of \\<type\\> elements.",
     "returns": "The ID of an array object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.new%3Ctype%3E",
     "param": [
        {
           "field": "size (series int)",
           "description": "Initial size of an array. Optional. The default is 0."
        },
        {
           "field": "initial_value (\\<array_type\\>)",
           "description": "Initial value of all array elements. Optional. The default is 'na'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.percentile_linear_interpolation)(?=\\s*\\()",
     "codeblock": [
        "array.percentile_linear_interpolation(id, percentage) → float|int"
     ],
     "markdown": "Returns the value for which the specified percentage of array values (percentile) are less than or equal to it, using linear interpolation.",
     "returns": "The array element's value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.percentile_linear_interpolation",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        },
        {
           "field": "percentage (series int|float)",
           "description": "The percentage of values that must be equal or less than the returned value."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.percentile_nearest_rank)(?=\\s*\\()",
     "codeblock": [
        "array.percentile_nearest_rank(id, percentage) → float|int"
     ],
     "markdown": "Returns the value for which the specified percentage of array values (percentile) are less than or equal to it, using the nearest-rank method.",
     "returns": "The array element's value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.percentile_nearest_rank",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        },
        {
           "field": "percentage (series int|float)",
           "description": "The percentage of values that must be equal or less than the returned value."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.percentrank)(?=\\s*\\()",
     "codeblock": [
        "array.percentrank(id, index) → float|int"
     ],
     "markdown": "Returns the percentile rank of the element at the specified `index`.",
     "returns": "The array element's value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.percentrank",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        },
        {
           "field": "index (series int)",
           "description": "The index of the element for which the percentile rank should be calculated."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.pop)(?=\\s*\\()",
     "codeblock": [
        "array.pop(id) → series <type>"
     ],
     "markdown": "Removes the last element from an array and returns its value.",
     "returns": "The value of the removed element.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.pop",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.push)(?=\\s*\\()",
     "codeblock": [
        "array.push(id, value) → void"
     ],
     "markdown": "Appends a value to an array.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.push",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "value (series <type of the array's elements>)",
           "description": "The value of the element added to the end of the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.range)(?=\\s*\\()",
     "codeblock": [
        "array.range(id) → float|int"
     ],
     "markdown": "Returns the difference between the min and max values from a given array.",
     "returns": "The difference between the min and max values in the array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.range",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.remove)(?=\\s*\\()",
     "codeblock": [
        "array.remove(id, index) → series <type>"
     ],
     "markdown": "Changes the contents of an array by removing the element with the specified index.",
     "returns": "The value of the removed element.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.remove",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "index (series int)",
           "description": "The index of the element to remove."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.reverse)(?=\\s*\\()",
     "codeblock": [
        "array.reverse(id) → void"
     ],
     "markdown": "Reverses an array. The first array element becomes the last, and the last array element becomes the first.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.reverse",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.set)(?=\\s*\\()",
     "codeblock": [
        "array.set(id, index, value) → void"
     ],
     "markdown": "Sets the value of the element at the specified index.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.set",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "index (series int)",
           "description": "The index of the element to be modified."
        },
        {
           "field": "value (series <type of the array's elements>)",
           "description": "The new value to be set."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.shift)(?=\\s*\\()",
     "codeblock": [
        "array.shift(id) → series <type>"
     ],
     "markdown": "Removes an array's 1st element and returns its value.",
     "returns": "The value of the removed element.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.shift",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.size)(?=\\s*\\()",
     "codeblock": [
        "array.size(id) → series int"
     ],
     "markdown": "Returns the number of elements in an array.",
     "returns": "The number of elements in the array.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.size",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.slice)(?=\\s*\\()",
     "codeblock": [
        "array.slice(id, index_from, index_to) → array<type>"
     ],
     "markdown": "Creates a slice from an existing array. If an object from the slice changes, the changes are applied to both the new and the original arrays.",
     "returns": "A shallow copy of an array's slice.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.slice",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "index_from (series int)",
           "description": "Zero-based index at which to begin extraction."
        },
        {
           "field": "index_to (series int)",
           "description": "Zero-based index before which to end extraction. The function extracts up to but not including the element with this index."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.some)(?=\\s*\\()",
     "codeblock": [
        "array.some(id) → series bool"
     ],
     "markdown": "Returns true if at least one element of the `id` array is true, false otherwise.",
     "returns": "boolean",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.some",
     "param": [
        {
           "field": "id (bool[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.sort)(?=\\s*\\()",
     "codeblock": [
        "array.sort(id, order) → void"
     ],
     "markdown": "Sorts the elements of an array.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.sort",
     "param": [
        {
           "field": "id (float[])",
           "description": "An array object."
        },
        {
           "field": "order (simple sort_order)",
           "description": "The sort order: order.ascending (default) or order.descending."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.sort_indices)(?=\\s*\\()",
     "codeblock": [
        "array.sort_indices(id, order) → int[]"
     ],
     "markdown": "Returns an array of indices which, when used to index the original array, will access its elements in their sorted order. It does not modify the original array.",
     "returns": "An array of indices.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.sort_indices",
     "param": [
        {
           "field": "id (float[])",
           "description": "An array object."
        },
        {
           "field": "order (series sort_order)",
           "description": "The sort order: order.ascending or order.descending. Optional. The default is order.ascending."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.standardize)(?=\\s*\\()",
     "codeblock": [
        "array.standardize(id) → float[]|int[]"
     ],
     "markdown": "Returns the array of standardized elements.",
     "returns": "The array of standardized elements.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.standardize",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.stdev)(?=\\s*\\()",
     "codeblock": [
        "array.stdev(id, biased) → float|int"
     ],
     "markdown": "Returns the standard deviation of an array's elements.",
     "returns": "The standard deviation of the array's elements.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.stdev",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        },
        {
           "field": "biased (series bool)",
           "description": "Determines which estimate should be used. Optional. The default is true."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.sum)(?=\\s*\\()",
     "codeblock": [
        "array.sum(id) → float|int"
     ],
     "markdown": "Returns the sum of an array's elements.",
     "returns": "The sum of the array's elements.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.sum",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.unshift)(?=\\s*\\()",
     "codeblock": [
        "array.unshift(id, value) → void"
     ],
     "markdown": "Inserts the value at the beginning of the array.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.unshift",
     "param": [
        {
           "field": "id (any array type)",
           "description": "An array object."
        },
        {
           "field": "value (series <type of the array's elements>)",
           "description": "The value to add to the start of the array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(array\\.variance)(?=\\s*\\()",
     "codeblock": [
        "array.variance(id, biased) → float|int"
     ],
     "markdown": "Returns the variance of an array's elements.",
     "returns": "The variance of the array's elements.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_array.variance",
     "param": [
        {
           "field": "id (float[]|int[])",
           "description": "An array object."
        },
        {
           "field": "biased (series bool)",
           "description": "Determines which estimate should be used. Optional. The default is true."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(barcolor)(?=\\s*\\()",
     "codeblock": [
        "barcolor(color, offset, editable, show_last, title, display) → void"
     ],
     "markdown": "Set color of bars.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_barcolor",
     "param": [
        {
           "field": "color (series color)",
           "description": "Color of bars. Required argument."
        },
        {
           "field": "offset (series int)",
           "description": "Shifts the color series to the left or to the right on the given number of bars. Default is 0."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then barcolor style will be editable in Format dialog. Default is true."
        },
        {
           "field": "show_last (input int)",
           "description": "If set, defines the number of bars (from the last bar back to the past) to fill on chart."
        },
        {
           "field": "title (const string)",
           "description": "Title of the barcolor. Optional argument."
        },
        {
           "field": "display (input plot_simple_display)",
           "description": "Controls where the barcolor is displayed. Default is display.all."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(bgcolor)(?=\\s*\\()",
     "codeblock": [
        "bgcolor(color, offset, editable, show_last, title, display, force_overlay) → void"
     ],
     "markdown": "Fill background of bars with specified color.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_bgcolor",
     "param": [
        {
           "field": "color (series color)",
           "description": "Color of the filled background. Required argument."
        },
        {
           "field": "offset (series int)",
           "description": "Shifts the color series to the left or to the right on the given number of bars. Default is 0."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then bgcolor style will be editable in Format dialog. Default is true."
        },
        {
           "field": "show_last (input int)",
           "description": "(input int) If set, defines the number of bars (from the last bar back to the past) to fill on chart."
        },
        {
           "field": "title (const string)",
           "description": "Title of the bgcolor. Optional argument."
        },
        {
           "field": "display (input plot_simple_display)",
           "description": "Controls where the bgcolor is displayed. Default is display.all."
        },
        {
           "field": "force_overlay (const bool)",
           "description": "If true, the plotted results will display on the main chart pane, even when the script occupies a separate pane. Optional. Default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(bool)(?=\\s*\\()",
     "codeblock": [
        "bool(x) → bool"
     ],
     "markdown": "Casts na to bool.",
     "returns": "The value of the argument after casting to bool.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_bool",
     "param": [
        {
           "field": "x (bool)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box)(?=\\s*\\()",
     "codeblock": [
        "box(x) → series box"
     ],
     "markdown": "Casts na to box.",
     "returns": "The value of the argument after casting to box.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box",
     "param": [
        {
           "field": "x (series box)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.copy)(?=\\s*\\()",
     "codeblock": [
        "box.copy(id) → series box"
     ],
     "markdown": "Clones the box object.",
     "returns": "A copy of the box object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.copy",
     "param": [
        {
           "field": "id (series box)",
           "description": "Box object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.delete)(?=\\s*\\()",
     "codeblock": [
        "box.delete(id) → void"
     ],
     "markdown": "Deletes the specified box object. If it has already been deleted, does nothing.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.delete",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object to delete."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.get_bottom)(?=\\s*\\()",
     "codeblock": [
        "box.get_bottom(id) → series float"
     ],
     "markdown": "Returns the price value of the bottom border of the box.",
     "returns": "The price value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.get_bottom",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.get_left)(?=\\s*\\()",
     "codeblock": [
        "box.get_left(id) → series int"
     ],
     "markdown": "Returns the bar index or the UNIX time (depending on the last value used for 'xloc') of the left border of the box.",
     "returns": "A bar index or a UNIX timestamp (in milliseconds).",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.get_left",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.get_right)(?=\\s*\\()",
     "codeblock": [
        "box.get_right(id) → series int"
     ],
     "markdown": "Returns the bar index or the UNIX time (depending on the last value used for 'xloc') of the right border of the box.",
     "returns": "A bar index or a UNIX timestamp (in milliseconds).",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.get_right",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.get_top)(?=\\s*\\()",
     "codeblock": [
        "box.get_top(id) → series float"
     ],
     "markdown": "Returns the price value of the top border of the box.",
     "returns": "The price value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.get_top",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.new)(?=\\s*\\()",
     "codeblock": [
        "box.new(left, top, right, bottom, border_color, border_width, border_style, extend, xloc, bgcolor, text, text_size, text_color, text_halign, text_valign, text_wrap, text_font_family) → series box",
        "box.new(top_left, bottom_right, border_color, border_width, border_style, extend, xloc, bgcolor, text, text_size, text_color, text_halign, text_valign, text_wrap, text_font_family) → series box"
     ],
     "markdown": "Creates a new box object.",
     "returns": "The ID of a box object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.new",
     "param": [
        {
           "field": "left (series int)",
           "description": "Bar index (if xloc = xloc.bar_index) or UNIX time (if xloc = xloc.bar_time) of the left border of the box."
        },
        {
           "field": "top (series int|float)",
           "description": "Price of the top border of the box."
        },
        {
           "field": "right (series int)",
           "description": "Bar index (if xloc = xloc.bar_index) or UNIX time (if xloc = xloc.bar_time) of the right border of the box."
        },
        {
           "field": "bottom (series int|float)",
           "description": "Price of the bottom border of the box."
        },
        {
           "field": "border_color (series color)",
           "description": "Color of the four borders. Optional. The default is color.blue."
        },
        {
           "field": "border_width (series int)",
           "description": "Width of the four borders, in pixels. Optional. The default is 1 pixel."
        },
        {
           "field": "border_style (series string)",
           "description": "Style of the four borders. Optional. The default value is line.style_solid."
        },
        {
           "field": "extend (series string)",
           "description": "Extending type of the border of box object. Optional. The default value is extend.none."
        },
        {
           "field": "xloc (series string)",
           "description": "Determines whether the arguments to 'left' and 'right' are a bar index or a time value. Optional. The default is xloc.bar_index."
        },
        {
           "field": "bgcolor (series color)",
           "description": "Background color of the box. Optional. The default is color.blue."
        },
        {
           "field": "text (series string)",
           "description": "The text to be displayed inside the box. Optional. The default is empty string."
        },
        {
           "field": "text_size (series string)",
           "description": "The size of the text. Optional. The default value is size.auto."
        },
        {
           "field": "text_color (series color)",
           "description": "The color of the text. Optional. The default is color.black."
        },
        {
           "field": "text_halign (series string)",
           "description": "The horizontal alignment of the box's text. Optional. The default value is text.align_center."
        },
        {
           "field": "text_valign (series string)",
           "description": "The vertical alignment of the box's text. Optional. The default value is text.align_center."
        },
        {
           "field": "text_wrap (series string)",
           "description": "Defines whether the text is presented in a single line, extending past the width of the box if necessary, or wrapped so every line is no wider than the box itself (and clipped by the bottom border of the box if the height of the resulting wrapped text is higher than the height of the box). Optional. The default value is text.wrap_none."
        },
        {
           "field": "text_font_family (series string)",
           "description": "The font family of the text. Optional. The default value is font.family_default."
        },
        {
           "field": "top_left (chart.point)",
           "description": "A chart.point object that specifies the top-left corner location of the box."
        },
        {
           "field": "bottom_right (chart.point)",
           "description": "A chart.point object that specifies the bottom-right corner location of the box."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_bgcolor)(?=\\s*\\()",
     "codeblock": [
        "box.set_bgcolor(id, color) → void"
     ],
     "markdown": "Sets the background color of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_bgcolor",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "color (series color)",
           "description": "New background color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_border_color)(?=\\s*\\()",
     "codeblock": [
        "box.set_border_color(id, color) → void"
     ],
     "markdown": "Sets the border color of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_border_color",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "color (series color)",
           "description": "New border color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_border_style)(?=\\s*\\()",
     "codeblock": [
        "box.set_border_style(id, style) → void"
     ],
     "markdown": "Sets the border style of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_border_style",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "style (series string)",
           "description": "New border style."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_border_width)(?=\\s*\\()",
     "codeblock": [
        "box.set_border_width(id, width) → void"
     ],
     "markdown": "Sets the border width of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_border_width",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "width (series int)",
           "description": "Width of the four borders, in pixels."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_bottom)(?=\\s*\\()",
     "codeblock": [
        "box.set_bottom(id, bottom) → void"
     ],
     "markdown": "Sets the bottom coordinate of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_bottom",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "bottom (series int|float)",
           "description": "Price value of the bottom border."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_bottom_right_point)(?=\\s*\\()",
     "codeblock": [
        "box.set_bottom_right_point(id, point) → void"
     ],
     "markdown": "Sets the bottom-right corner location of the `id` box to `point`.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_bottom_right_point",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "point (chart.point)",
           "description": "A chart.point object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_extend)(?=\\s*\\()",
     "codeblock": [
        "box.set_extend(id, extend) → void"
     ],
     "markdown": "Sets extending type of the border of this box object. When extend.none is used, the horizontal borders start at the left border and end at the right border. With extend.left or extend.right, the horizontal borders are extended indefinitely to the left or right of the box, respectively. With extend.both, the horizontal borders are extended on both sides.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_extend",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "extend (series string)",
           "description": "New extending type of the border."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_left)(?=\\s*\\()",
     "codeblock": [
        "box.set_left(id, left) → void"
     ],
     "markdown": "Sets the left coordinate of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_left",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "left (series int)",
           "description": "Bar index or bar time of the left border."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_lefttop)(?=\\s*\\()",
     "codeblock": [
        "box.set_lefttop(id, left, top) → void"
     ],
     "markdown": "Sets the left and top coordinates of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_lefttop",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "left (series int)",
           "description": "Bar index or bar time of the left border."
        },
        {
           "field": "top (series int|float)",
           "description": "Price value of the top border."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_right)(?=\\s*\\()",
     "codeblock": [
        "box.set_right(id, right) → void"
     ],
     "markdown": "Sets the right coordinate of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_right",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "right (series int)",
           "description": "Bar index or bar time of the right border."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_rightbottom)(?=\\s*\\()",
     "codeblock": [
        "box.set_rightbottom(id, right, bottom) → void"
     ],
     "markdown": "Sets the right and bottom coordinates of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_rightbottom",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "right (series int)",
           "description": "Bar index or bar time of the right border."
        },
        {
           "field": "bottom (series int|float)",
           "description": "Price value of the bottom border."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_text)(?=\\s*\\()",
     "codeblock": [
        "box.set_text(id, text) → void"
     ],
     "markdown": "Sets the text in the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_text",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "text (series string)",
           "description": "The text to be displayed inside the box."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_text_color)(?=\\s*\\()",
     "codeblock": [
        "box.set_text_color(id, text_color) → void"
     ],
     "markdown": "Sets the color of the text inside the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_text_color",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "text_color (series color)",
           "description": "The color of the text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_text_font_family)(?=\\s*\\()",
     "codeblock": [
        "box.set_text_font_family(id, text_font_family) → void"
     ],
     "markdown": "Sets the font family of the text inside the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_text_font_family",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "text_font_family (series string)",
           "description": "The font family of the text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_text_halign)(?=\\s*\\()",
     "codeblock": [
        "box.set_text_halign(id, text_halign) → void"
     ],
     "markdown": "Sets the horizontal alignment of the box's text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_text_halign",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "text_halign (series string)",
           "description": "The horizontal alignment of a box's text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_text_size)(?=\\s*\\()",
     "codeblock": [
        "box.set_text_size(id, text_size) → void"
     ],
     "markdown": "Sets the size of the box's text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_text_size",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "text_size (series string)",
           "description": "The size of the text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_text_valign)(?=\\s*\\()",
     "codeblock": [
        "box.set_text_valign(id, text_valign) → void"
     ],
     "markdown": "Sets the vertical alignment of a box's text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_text_valign",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "text_valign (series string)",
           "description": "The vertical alignment of the box's text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_text_wrap)(?=\\s*\\()",
     "codeblock": [
        "box.set_text_wrap(id, text_wrap) → void"
     ],
     "markdown": "sets the mode of wrapping of the text inside the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_text_wrap",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "text_wrap (series string)",
           "description": "The mode of the wrapping."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_top)(?=\\s*\\()",
     "codeblock": [
        "box.set_top(id, top) → void"
     ],
     "markdown": "Sets the top coordinate of the box.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_top",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "top (series int|float)",
           "description": "Price value of the top border."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(box\\.set_top_left_point)(?=\\s*\\()",
     "codeblock": [
        "box.set_top_left_point(id, point) → void"
     ],
     "markdown": "Sets the top-left corner location of the `id` box to `point`.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_box.set_top_left_point",
     "param": [
        {
           "field": "id (series box)",
           "description": "A box object."
        },
        {
           "field": "point (chart.point)",
           "description": "A chart.point object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(chart\\.point\\.copy)(?=\\s*\\()",
     "codeblock": [
        "chart.point.copy(id) → chart.point"
     ],
     "markdown": "Creates a copy of a chart.point object with the specified `id`.",
     "returns": "A copy of a chart.point object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_chart.point.copy",
     "param": [
        {
           "field": "id (chart.point)",
           "description": "A chart.point object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(chart\\.point\\.from_index)(?=\\s*\\()",
     "codeblock": [
        "chart.point.from_index(index, price) → chart.point"
     ],
     "markdown": "Returns a chart.point object with `index` as its x-coordinate and `price` as its y-coordinate.",
     "returns": "A chart.point object with `index` as its x-coordinate and `price` as its y-coordinate.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_chart.point.from_index",
     "param": [
        {
           "field": "index (series int)",
           "description": "The x-coordinate of the point, expressed as a bar index value."
        },
        {
           "field": "price (series int|float)",
           "description": "The y-coordinate of the point."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(chart\\.point\\.from_time)(?=\\s*\\()",
     "codeblock": [
        "chart.point.from_time(time, price) → chart.point"
     ],
     "markdown": "Returns a chart.point object with `time` as its x-coordinate and `price` as its y-coordinate.",
     "returns": "A chart.point object with `time` as its x-coordinate and `price` as its y-coordinate.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_chart.point.from_time",
     "param": [
        {
           "field": "time (series int)",
           "description": "The x-coordinate of the point, expressed as a UNIX time value."
        },
        {
           "field": "price (series int|float)",
           "description": "The y-coordinate of the point."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(chart\\.point\\.new)(?=\\s*\\()",
     "codeblock": [
        "chart.point.new(time, index, price) → chart.point"
     ],
     "markdown": "Creates a new chart.point object with the specified `time`, `index`, and `price`.",
     "returns": "A new chart.point object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_chart.point.new",
     "param": [
        {
           "field": "time (series int)",
           "description": "The x-coordinate of the point, expressed as a UNIX time value."
        },
        {
           "field": "index (series int)",
           "description": "The x-coordinate of the point, expressed as a bar index value."
        },
        {
           "field": "price (series int|float)",
           "description": "The y-coordinate of the point."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(chart\\.point\\.now)(?=\\s*\\()",
     "codeblock": [
        "chart.point.now(price) → chart.point"
     ],
     "markdown": "Returns a chart.point object with `price` as the y-coordinate.",
     "returns": "A chart.point object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_chart.point.now",
     "param": [
        {
           "field": "price (series int|float)",
           "description": "The y-coordinate of the point. Optional. The default is close."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(color)(?=\\s*\\()",
     "codeblock": [
        "color(x) → color"
     ],
     "markdown": "Casts na to color.",
     "returns": "The value of the argument after casting to color.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_color",
     "param": [
        {
           "field": "x (color)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(color\\.b)(?=\\s*\\()",
     "codeblock": [
        "color.b(color) → float"
     ],
     "markdown": "Retrieves the value of the color's blue component.",
     "returns": "The value (0 to 255) of the color's blue component.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_color.b",
     "param": [
        {
           "field": "color (const color)",
           "description": "Color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(color\\.from_gradient)(?=\\s*\\()",
     "codeblock": [
        "color.from_gradient(value, bottom_value, top_value, bottom_color, top_color) → series color"
     ],
     "markdown": "Returns a color from the gradient defined by bottom_color to top_color. Based on the relative position of value in the bottom_value to top_value range.",
     "returns": "A color calculated from the linear gradient between bottom_color to top_color.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_color.from_gradient",
     "param": [
        {
           "field": "value (series int|float)",
           "description": "Value to calculate the position-dependent color."
        },
        {
           "field": "bottom_value (series int|float)",
           "description": "Bottom position value corresponding to bottom_color."
        },
        {
           "field": "top_value (series int|float)",
           "description": "Top position value corresponding to top_color."
        },
        {
           "field": "bottom_color (series color)",
           "description": "Bottom position color."
        },
        {
           "field": "top_color (series color)",
           "description": " Top position color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(color\\.g)(?=\\s*\\()",
     "codeblock": [
        "color.g(color) → float"
     ],
     "markdown": "Retrieves the value of the color's green component.",
     "returns": "The value (0 to 255) of the color's green component.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_color.g",
     "param": [
        {
           "field": "color (const color)",
           "description": "Color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(color\\.new)(?=\\s*\\()",
     "codeblock": [
        "color.new(color, transp) → color"
     ],
     "markdown": "Color applies the specified transparency to the given color.",
     "returns": "Color with specified transparency.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_color.new",
     "param": [
        {
           "field": "color (const color)",
           "description": "Color to apply transparency to."
        },
        {
           "field": "transp (series int|float)",
           "description": "Possible values are from 0 (not transparent) to 100 (invisible)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(color\\.r)(?=\\s*\\()",
     "codeblock": [
        "color.r(color) → float"
     ],
     "markdown": "Retrieves the value of the color's red component.",
     "returns": "The value (0 to 255) of the color's red component.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_color.r",
     "param": [
        {
           "field": "color (const color)",
           "description": "Color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(color\\.rgb)(?=\\s*\\()",
     "codeblock": [
        "color.rgb(red, green, blue, transp) → color"
     ],
     "markdown": "Creates a new color with transparency using the RGB color model.",
     "returns": "Color with specified transparency.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_color.rgb",
     "param": [
        {
           "field": "red (const int|float)",
           "description": "Red color component. (0-255)"
        },
        {
           "field": "green (const int|float)",
           "description": "Green color component. (0-255)"
        },
        {
           "field": "blue (const int|float)",
           "description": "Blue color component. (0-255)"
        },
        {
           "field": "transp (const int|float)",
           "description": "Optional. Color transparency. 0-100)"
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(color\\.t)(?=\\s*\\()",
     "codeblock": [
        "color.t(color) → float"
     ],
     "markdown": "Retrieves the color's transparency.",
     "returns": "The value (0-100) of the color's transparency.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_color.t",
     "param": [
        {
           "field": "color (const color)",
           "description": "Color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(dayofmonth)(?=\\s*\\()",
     "codeblock": [
        "dayofmonth(time, timezone) → series int"
     ],
     "markdown": "Returns day of month (in exchange timezone) for provided UNIX time.",
     "returns": "Day of month (in exchange timezone) for provided UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_dayofmonth",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time in milliseconds."
        },
        {
           "field": "timezone (series string)",
           "description": "A time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(dayofweek)(?=\\s*\\()",
     "codeblock": [
        "dayofweek(time, timezone) → series int"
     ],
     "markdown": "Returns day of week (in exchange timezone) for provided UNIX time.",
     "returns": "Day of week (in exchange timezone) for provided UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_dayofweek",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time in milliseconds."
        },
        {
           "field": "timezone (series string)",
           "description": "A time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(fill)(?=\\s*\\()",
     "codeblock": [
        "fill(plot1, plot2, color, title, editable, show_last, fillgaps, display) → void",
        "fill(plot1, plot2, top_value, bottom_value, top_color, bottom_color, title, display, fillgaps, editable) → void",
        "fill(hline1, hline2, color, title, editable, fillgaps, display) → void"
     ],
     "markdown": "Fills background between two plots or hlines with a given color.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_fill",
     "param": [
        {
           "field": "plot1 (plot)",
           "description": "The first plot object."
        },
        {
           "field": "plot2 (plot)",
           "description": "The second plot object."
        },
        {
           "field": "color (series color)",
           "description": "Color of the background fill. Optional."
        },
        {
           "field": "title (const string)",
           "description": "Title of the created fill object. Optional."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then fill style will be editable in Format dialog. Optional. Default is true."
        },
        {
           "field": "show_last (input int)",
           "description": "If set, defines the number of bars (from the last bar back to the past) to fill on chart. Optional."
        },
        {
           "field": "fillgaps (const bool)",
           "description": "Controls continuing fills on gaps. Optional. The default is false."
        },
        {
           "field": "display (input plot_simple_display)",
           "description": "Controls where the fill is displayed. Optional. Default is display.all."
        },
        {
           "field": "top_value (series int|float)",
           "description": "Value where the gradient uses the `top_color`."
        },
        {
           "field": "bottom_value (series int|float)",
           "description": "Value where the gradient uses the `bottom_color`."
        },
        {
           "field": "top_color (series color)",
           "description": "Color of the gradient at the topmost value."
        },
        {
           "field": "bottom_color (series color)",
           "description": "Color of the gradient at the bottommost value."
        },
        {
           "field": "hline1 (hline)",
           "description": "The first hline object. Required argument."
        },
        {
           "field": "hline2 (hline)",
           "description": "The second hline object. Required argument."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(fixnan)(?=\\s*\\()",
     "codeblock": [
        "fixnan(source) → series color|int|float|bool"
     ],
     "markdown": "For a given series replaces NaN values with previous nearest non-NaN value.",
     "returns": "Series without na gaps.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_fixnan",
     "param": [
        {
           "field": "source (series color|int|float|bool)",
           "description": "Source used for the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(float)(?=\\s*\\()",
     "codeblock": [
        "float(x) → float"
     ],
     "markdown": "Casts na to float.",
     "returns": "The value of the argument after casting to float.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_float",
     "param": [
        {
           "field": "x (int|float)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(hline)(?=\\s*\\()",
     "codeblock": [
        "hline(price, title, color, linestyle, linewidth, editable, display) → hline"
     ],
     "markdown": "Renders a horizontal line at a given fixed price level.",
     "returns": "An hline object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_hline",
     "param": [
        {
           "field": "price (input int|float)",
           "description": "Price value at which the object will be rendered."
        },
        {
           "field": "title (const string)",
           "description": "Title of the object."
        },
        {
           "field": "color (input color)",
           "description": "Color of the rendered line. Must be a constant value (not an expression). Optional."
        },
        {
           "field": "linestyle (input hline_style)",
           "description": "Style of the rendered line. Optional."
        },
        {
           "field": "linewidth (input int)",
           "description": "Width of the rendered line. Default value is 1."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then hline style will be editable in Format dialog. Default is true."
        },
        {
           "field": "display (input plot_simple_display)",
           "description": "Controls where the hline is displayed. Optional. Default is display.all."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(hour)(?=\\s*\\()",
     "codeblock": [
        "hour(time, timezone) → series int"
     ],
     "markdown": "Returns hour (in exchange timezone) for provided UNIX time.",
     "returns": "Hour (in exchange timezone) for provided UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_hour",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time in milliseconds."
        },
        {
           "field": "timezone (series string)",
           "description": "A time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(indicator)(?=\\s*\\()",
     "codeblock": [
        "indicator(title, shorttitle, overlay, format, precision, scale, max_bars_back, timeframe, timeframe_gaps, explicit_plot_zorder, max_lines_count, max_labels_count, max_boxes_count, calc_bars_count, max_polylines_count) → void"
     ],
     "markdown": "This declaration statement designates the script as an indicator and sets a number of indicator-related properties.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_indicator",
     "param": [
        {
           "field": "title (const string)",
           "description": "The title of the script."
        },
        {
           "field": "shorttitle (const string)",
           "description": "The script's display name on charts. If specified, it will replace the `title` argument in most chart-related windows. Optional."
        },
        {
           "field": "overlay (const bool)",
           "description": "If true, the indicator will be displayed over the chart. If false, it will be added in a separate pane. Optional. The default is false."
        },
        {
           "field": "format (const string)",
           "description": "Specifies the formatting of the script's displayed values. Optional. The default is format.inherit."
        },
        {
           "field": "precision (const int)",
           "description": "Specifies the number of digits after the floating point of the script's displayed values. Must be a non-negative integer no greater than 16. Optional. The default is inherited from the precision of the chart's symbol."
        },
        {
           "field": "scale (const scale_type)",
           "description": "The price scale used. Optional. By default, the script uses the same scale as the chart."
        },
        {
           "field": "max_bars_back (const int)",
           "description": "The length of the historical buffer the script keeps for every variable and function, which determines how many past values can be referenced using the `[]` history-referencing operator. Optional. The default is 0."
        },
        {
           "field": "timeframe (const string)",
           "description": "Adds multi-timeframe functionality to simple scripts. When used, a ‘Timeframe’ field will be added to the script's ‘Settings/Inputs’ tab. Optional. The default is timeframe.period."
        },
        {
           "field": "timeframe_gaps (const bool)",
           "description": "Specifies how the indicator's values are displayed on chart bars when the `timeframe` is higher than the chart's. If true, a value only appears on a chart bar when the higher `timeframe` value becomes available, otherwise na is returned (thus a ‘gap’ occurs). With false, what would otherwise be gaps are filled with the latest known value returned, avoiding na values. When used, a ‘Gaps’ checkbox will appear in the indicator's ‘Settings/Inputs’ tab. Optional. The default is true."
        },
        {
           "field": "explicit_plot_zorder (const bool)",
           "description": "Specifies the order in which the script's plots, fills, and hlines are rendered. If true, plots are drawn in the order in which they appear in the script's code, each newer plot being drawn above the previous ones. Optional. The default is false."
        },
        {
           "field": "max_lines_count (const int)",
           "description": "The number of last line drawings displayed. Optional. The default is 50."
        },
        {
           "field": "max_labels_count (const int)",
           "description": "The number of last label drawings displayed. Optional. The default is 50."
        },
        {
           "field": "max_boxes_count (const int)",
           "description": "The number of last box drawings displayed. Optional. The default is 50."
        },
        {
           "field": "calc_bars_count (const int)",
           "description": "Limits the initial calculation of a script to the last number of bars specified. When specified, a \"Calculated bars\" field will be included in the \"Calculation\" section of the script's \"Settings/Inputs\" tab. Optional. The default is 0, in which case the script executes on all available bars."
        },
        {
           "field": "max_polylines_count (const int)",
           "description": "The number of last polyline drawings displayed. Optional. The default is 50."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input)(?=\\s*\\()",
     "codeblock": [
        "input(defval, title, tooltip, inline, group, display) → input color|string|int|float|bool"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function automatically detects the type of the argument used for 'defval' and uses the corresponding input widget.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input",
     "param": [
        {
           "field": "defval (const int|float|bool|string|color or source-type built-ins)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.bool)(?=\\s*\\()",
     "codeblock": [
        "input.bool(defval, title, tooltip, inline, group, confirm, display) → input bool"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a checkmark to the script's inputs.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.bool",
     "param": [
        {
           "field": "defval (const bool)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.none."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.color)(?=\\s*\\()",
     "codeblock": [
        "input.color(defval, title, tooltip, inline, group, confirm, display) → input color"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a color picker that allows the user to select a color and transparency, either from a palette or a hex value.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.color",
     "param": [
        {
           "field": "defval (const color)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.none."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.enum)(?=\\s*\\()",
     "codeblock": [
        "input.enum(defval, title, options, tooltip, inline, group, confirm, display) → simple enum"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a dropdown with options based on the [enum](https://www.tradingview.com/pine-script-reference/v5/#kw_enum) fields passed to its `defval` and `options` parameters. <p/>The text for each option in the resulting dropdown corresponds to the titles of the included fields. If a field's title is not specified in the enum declaration, its title is the string representation of its name.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.enum",
     "param": [
        {
           "field": "defval (simple enum)",
           "description": "Determines the default value of the input, which users can change in the script's \"Settings/Inputs\" tab. When the `options` parameter has a specified tuple of enum fields, the tuple must include the `defval`."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "options (tuple of enum fields: [enumName.field1, enumName.field2, ...])",
           "description": "A list of options to choose from. Optional. By default, the titles of all of the enum's fields are available in the dropdown. Passing a tuple as the `options` argument limits the list to only the included fields."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.float)(?=\\s*\\()",
     "codeblock": [
        "input.float(defval, title, minval, maxval, step, tooltip, inline, group, confirm, display) → input float",
        "input.float(defval, title, options, tooltip, inline, group, confirm, display) → input float"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a field for a float input to the script's inputs.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.float",
     "param": [
        {
           "field": "defval (const int|float)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "minval (const int|float)",
           "description": "Minimal possible value of the input variable. Optional."
        },
        {
           "field": "maxval (const int|float)",
           "description": "Maximum possible value of the input variable. Optional."
        },
        {
           "field": "step (const int|float)",
           "description": "Step value used for incrementing/decrementing the input. Optional. The default is 1."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        },
        {
           "field": "options (tuple of const int|float values: [val1, val2, ...])",
           "description": "A list of options to choose from a dropdown menu, separated by commas and enclosed in square brackets: [val1, val2, ...]. When using this parameter, the `minval`, `maxval` and `step` parameters cannot be used."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.int)(?=\\s*\\()",
     "codeblock": [
        "input.int(defval, title, minval, maxval, step, tooltip, inline, group, confirm, display) → input int",
        "input.int(defval, title, options, tooltip, inline, group, confirm, display) → input int"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a field for an integer input to the script's inputs.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.int",
     "param": [
        {
           "field": "defval (const int)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "minval (const int|float)",
           "description": "Minimal possible value of the input variable. Optional."
        },
        {
           "field": "maxval (const int|float)",
           "description": "Maximum possible value of the input variable. Optional."
        },
        {
           "field": "step (const int|float)",
           "description": "Step value used for incrementing/decrementing the input. Optional. The default is 1."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        },
        {
           "field": "options (tuple of const int values: [val1, val2, ...])",
           "description": "A list of options to choose from a dropdown menu, separated by commas and enclosed in square brackets: [val1, val2, ...]. When using this parameter, the `minval`, `maxval` and `step` parameters cannot be used."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.price)(?=\\s*\\()",
     "codeblock": [
        "input.price(defval, title, tooltip, inline, group, confirm, display) → input float"
     ],
     "markdown": "Adds a price input to the Inputs tab of your script's Settings. Using `confirm = true` activates the interactive input mode where a price is selected by clicking on the chart.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.price",
     "param": [
        {
           "field": "defval (const int|float)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, the interactive input mode is enabled and the selection is done by clicking on the chart when the indicator is added to the chart, or by selecting the indicator and moving the selection after that. Optional. The default is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.session)(?=\\s*\\()",
     "codeblock": [
        "input.session(defval, title, options, tooltip, inline, group, confirm, display) → input string"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds two dropdowns that allow the user to specify the beginning and the end of a session using the session selector and returns the result as a string.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.session",
     "param": [
        {
           "field": "defval (const string)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab. When a list of values is used with the `options` parameter, the value must be one of them."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "options (tuple of const string values: [val1, val2, ...])",
           "description": "A list of options to choose from."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.source)(?=\\s*\\()",
     "codeblock": [
        "input.source(defval, title, tooltip, inline, group, display, confirm) → series float"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a dropdown that allows the user to select a source for the calculation, e.g. close, hl2, etc. The user can also select an output from another indicator on their chart as the source.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.source",
     "param": [
        {
           "field": "defval (source-type built-ins)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.string)(?=\\s*\\()",
     "codeblock": [
        "input.string(defval, title, options, tooltip, inline, group, confirm, display) → input string"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a field for a string input to the script's inputs.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.string",
     "param": [
        {
           "field": "defval (const string)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab. When a list of values is used with the `options` parameter, the value must be one of them."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "options (tuple of const string values: [val1, val2, ...])",
           "description": "A list of options to choose from."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.symbol)(?=\\s*\\()",
     "codeblock": [
        "input.symbol(defval, title, tooltip, inline, group, confirm, display) → input string"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a field that allows the user to select a specific symbol using the symbol search and returns that symbol, paired with its exchange prefix, as a string.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.symbol",
     "param": [
        {
           "field": "defval (const string)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.text_area)(?=\\s*\\()",
     "codeblock": [
        "input.text_area(defval, title, tooltip, group, confirm, display) → input string"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a field for a multiline text input.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.text_area",
     "param": [
        {
           "field": "defval (const string)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.none."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.time)(?=\\s*\\()",
     "codeblock": [
        "input.time(defval, title, tooltip, inline, group, confirm, display) → input int"
     ],
     "markdown": "Adds a time input to the Inputs tab of your script's Settings. This function adds two input widgets on the same line: one for the date and one for the time. The function returns a date/time value in UNIX format. Using `confirm = true` activates the interactive input mode where a point in time is selected by clicking on the chart.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.time",
     "param": [
        {
           "field": "defval (const int)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab. The value can be a `timestamp` function, but only if it uses a date argument in const string format."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, the interactive input mode is enabled and the selection is done by clicking on the chart when the indicator is added to the chart, or by selecting the indicator and moving the selection after that. Optional. The default is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.none."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(input\\.timeframe)(?=\\s*\\()",
     "codeblock": [
        "input.timeframe(defval, title, options, tooltip, inline, group, confirm, display) → input string"
     ],
     "markdown": "Adds an input to the Inputs tab of your script's Settings, which allows you to provide configuration options to script users. This function adds a dropdown that allows the user to select a specific timeframe via the timeframe selector and returns it as a string. The selector includes the custom timeframes a user may have added using the chart's Timeframe dropdown.",
     "returns": "Value of input variable.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_input.timeframe",
     "param": [
        {
           "field": "defval (const string)",
           "description": "Determines the default value of the input variable proposed in the script's ‘Settings/Inputs’ tab. When a list of values is used with the `options` parameter, the value must be one of them."
        },
        {
           "field": "title (const string)",
           "description": "Title of the input. If not specified, the variable name is used as the input's title. If the title is specified, but it is empty, the name will be an empty string."
        },
        {
           "field": "options (tuple of const string values: [val1, val2, ...])",
           "description": "A list of options to choose from."
        },
        {
           "field": "tooltip (const string)",
           "description": "The string that will be shown to the user when hovering over the tooltip icon."
        },
        {
           "field": "inline (const string)",
           "description": "Combines all the input calls using the same argument in one line. The string used as an argument is not displayed. It is only used to identify inputs belonging to the same line."
        },
        {
           "field": "group (const string)",
           "description": "Creates a header above all inputs using the same group argument string. The string is also used as the header's text."
        },
        {
           "field": "confirm (const bool)",
           "description": "If true, then user will be asked to confirm input value before indicator is added to chart. Default value is false."
        },
        {
           "field": "display (const plot_display)",
           "description": "Controls where the script will display the input's information, aside from within the script's settings. This option allows one to remove a specific input from the script's status line or the Data Window to ensure only the most necessary inputs are displayed there. Optional. The default is display.all."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(int)(?=\\s*\\()",
     "codeblock": [
        "int(x) → int"
     ],
     "markdown": "Casts na or truncates float value to int.",
     "returns": "The value of the argument after casting to int.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_int",
     "param": [
        {
           "field": "x (int|float)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label)(?=\\s*\\()",
     "codeblock": [
        "label(x) → series label"
     ],
     "markdown": "Casts na to label.",
     "returns": "The value of the argument after casting to label.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label",
     "param": [
        {
           "field": "x (series label)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.copy)(?=\\s*\\()",
     "codeblock": [
        "label.copy(id) → series label"
     ],
     "markdown": "Clones the label object.",
     "returns": "A copy of a label object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.copy",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.delete)(?=\\s*\\()",
     "codeblock": [
        "label.delete(id) → void"
     ],
     "markdown": "Deletes the specified label object. If it has already been deleted, does nothing.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.delete",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object to delete."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.get_text)(?=\\s*\\()",
     "codeblock": [
        "label.get_text(id) → series string"
     ],
     "markdown": "Returns the text of this label object.",
     "returns": "String object containing the text of this label.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.get_text",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.get_x)(?=\\s*\\()",
     "codeblock": [
        "label.get_x(id) → series int"
     ],
     "markdown": "Returns UNIX time or bar index (depending on the last xloc value set) of this label's position.",
     "returns": "UNIX timestamp (in milliseconds) or bar index.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.get_x",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.get_y)(?=\\s*\\()",
     "codeblock": [
        "label.get_y(id) → series float"
     ],
     "markdown": "Returns price of this label's position.",
     "returns": "Floating point value representing price.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.get_y",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.new)(?=\\s*\\()",
     "codeblock": [
        "label.new(x, y, text, xloc, yloc, color, style, textcolor, size, textalign, tooltip, text_font_family) → series label",
        "label.new(point, text, xloc, yloc, color, style, textcolor, size, textalign, tooltip, text_font_family) → series label"
     ],
     "markdown": "Creates new label object.",
     "returns": "The ID of a label object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.new",
     "param": [
        {
           "field": "x (series int)",
           "description": "Bar index (if xloc = xloc.bar_index) or bar UNIX time (if xloc = xloc.bar_time) of the label position."
        },
        {
           "field": "y (series int|float)",
           "description": "Price of the label position. It is taken into account only if yloc=yloc.price."
        },
        {
           "field": "text (series string)",
           "description": "Label text. Default is empty string."
        },
        {
           "field": "xloc (series string)",
           "description": "See description of x argument. Default is xloc.bar_index."
        },
        {
           "field": "yloc (series string)",
           "description": "If yloc=yloc.price, y argument specifies the price of the label position. If yloc=yloc.abovebar, label is located above bar. If yloc=yloc.belowbar, label is located below bar. Default is yloc.price."
        },
        {
           "field": "color (series color)",
           "description": "Color of the label border and arrow."
        },
        {
           "field": "style (series string)",
           "description": "Label style. Default is label.style_label_down."
        },
        {
           "field": "textcolor (series color)",
           "description": "Text color."
        },
        {
           "field": "size (series string)",
           "description": "Label size. Default value is size.normal."
        },
        {
           "field": "textalign (series string)",
           "description": "Label text alignment. Default value is text.align_center."
        },
        {
           "field": "tooltip (series string)",
           "description": "Hover to see tooltip label."
        },
        {
           "field": "text_font_family (series string)",
           "description": "The font family of the text. Optional. The default value is font.family_default."
        },
        {
           "field": "point (chart.point)",
           "description": "A chart.point object that specifies the label's location."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_color)(?=\\s*\\()",
     "codeblock": [
        "label.set_color(id, color) → void"
     ],
     "markdown": "Sets label border and arrow color.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_color",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "color (series color)",
           "description": "New label border and arrow color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_point)(?=\\s*\\()",
     "codeblock": [
        "label.set_point(id, point) → void"
     ],
     "markdown": "Sets the location of the `id` label to `point`.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_point",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "point (chart.point)",
           "description": "A chart.point object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_size)(?=\\s*\\()",
     "codeblock": [
        "label.set_size(id, size) → void"
     ],
     "markdown": "Sets arrow and text size of the specified label object.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_size",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "size (series string)",
           "description": "Default value is size.auto."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_style)(?=\\s*\\()",
     "codeblock": [
        "label.set_style(id, style) → void"
     ],
     "markdown": "Sets label style.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_style",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "style (series string)",
           "description": "New label style."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_text)(?=\\s*\\()",
     "codeblock": [
        "label.set_text(id, text) → void"
     ],
     "markdown": "Sets label text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_text",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "text (series string)",
           "description": "New label text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_text_font_family)(?=\\s*\\()",
     "codeblock": [
        "label.set_text_font_family(id, text_font_family) → void"
     ],
     "markdown": "Sets the font family of the text inside the label.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_text_font_family",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "text_font_family (series string)",
           "description": "The font family of the text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_textalign)(?=\\s*\\()",
     "codeblock": [
        "label.set_textalign(id, textalign) → void"
     ],
     "markdown": "Sets the alignment for the label text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_textalign",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "textalign (series string)",
           "description": "Label text alignment."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_textcolor)(?=\\s*\\()",
     "codeblock": [
        "label.set_textcolor(id, textcolor) → void"
     ],
     "markdown": "Sets color of the label text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_textcolor",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "textcolor (series color)",
           "description": "New text color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_tooltip)(?=\\s*\\()",
     "codeblock": [
        "label.set_tooltip(id, tooltip) → void"
     ],
     "markdown": "Sets the tooltip text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_tooltip",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "tooltip (series string)",
           "description": "Tooltip text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_x)(?=\\s*\\()",
     "codeblock": [
        "label.set_x(id, x) → void"
     ],
     "markdown": "Sets bar index or bar time (depending on the xloc) of the label position.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_x",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "x (series int)",
           "description": "New bar index or bar time of the label position."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_xloc)(?=\\s*\\()",
     "codeblock": [
        "label.set_xloc(id, x, xloc) → void"
     ],
     "markdown": "Sets x-location and new bar index/time value.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_xloc",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "x (series int)",
           "description": "New bar index or bar time of the label position."
        },
        {
           "field": "xloc (series string)",
           "description": "New x-location value."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_xy)(?=\\s*\\()",
     "codeblock": [
        "label.set_xy(id, x, y) → void"
     ],
     "markdown": "Sets bar index/time and price of the label position.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_xy",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "x (series int)",
           "description": "New bar index or bar time of the label position."
        },
        {
           "field": "y (series int|float)",
           "description": "New price of the label position."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_y)(?=\\s*\\()",
     "codeblock": [
        "label.set_y(id, y) → void"
     ],
     "markdown": "Sets price of the label position.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_y",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "y (series int|float)",
           "description": "New price of the label position."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(label\\.set_yloc)(?=\\s*\\()",
     "codeblock": [
        "label.set_yloc(id, yloc) → void"
     ],
     "markdown": "Sets new y-location calculation algorithm.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_label.set_yloc",
     "param": [
        {
           "field": "id (series label)",
           "description": "Label object."
        },
        {
           "field": "yloc (series string)",
           "description": "New y-location value."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(library)(?=\\s*\\()",
     "codeblock": [
        "library(title, overlay) → void"
     ],
     "markdown": "Declaration statement identifying a script as a library.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_library",
     "param": [
        {
           "field": "title (const string)",
           "description": "The title of the library and its identifier. It cannot contain spaces, special characters or begin with a digit. It is used as the publication's default title, and to uniquely identify the library in the import statement, when another script uses it. It is also used as the script's name on the chart."
        },
        {
           "field": "overlay (const bool)",
           "description": "If true, the library will be added over the chart. If false, it will be added in a separate pane. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line)(?=\\s*\\()",
     "codeblock": [
        "line(x) → series line"
     ],
     "markdown": "Casts na to line.",
     "returns": "The value of the argument after casting to line.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line",
     "param": [
        {
           "field": "x (series line)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.copy)(?=\\s*\\()",
     "codeblock": [
        "line.copy(id) → series line"
     ],
     "markdown": "Clones the line object.",
     "returns": "The ID of a line object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.copy",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.delete)(?=\\s*\\()",
     "codeblock": [
        "line.delete(id) → void"
     ],
     "markdown": "Deletes the specified line object. If it has already been deleted, does nothing.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.delete",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object to delete."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.get_price)(?=\\s*\\()",
     "codeblock": [
        "line.get_price(id, x) → series float"
     ],
     "markdown": "Returns the price level of a line at a given bar index.",
     "returns": "Price value of line `id` at bar index `x`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.get_price",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "x (series int)",
           "description": "Bar index for which price is required."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.get_x1)(?=\\s*\\()",
     "codeblock": [
        "line.get_x1(id) → series int"
     ],
     "markdown": "Returns UNIX time or bar index (depending on the last xloc value set) of the 1st point of the line.",
     "returns": "UNIX timestamp (in milliseconds) or bar index.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.get_x1",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.get_x2)(?=\\s*\\()",
     "codeblock": [
        "line.get_x2(id) → series int"
     ],
     "markdown": "Returns UNIX time or bar index (depending on the last xloc value set) of the 2nd point of the line.",
     "returns": "UNIX timestamp (in milliseconds) or bar index.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.get_x2",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.get_y1)(?=\\s*\\()",
     "codeblock": [
        "line.get_y1(id) → series float"
     ],
     "markdown": "Returns price of the 1st point of the line.",
     "returns": "Price value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.get_y1",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.get_y2)(?=\\s*\\()",
     "codeblock": [
        "line.get_y2(id) → series float"
     ],
     "markdown": "Returns price of the 2nd point of the line.",
     "returns": "Price value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.get_y2",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.new)(?=\\s*\\()",
     "codeblock": [
        "line.new(x1, y1, x2, y2, xloc, extend, color, style, width) → series line",
        "line.new(first_point, second_point, xloc, extend, color, style, width) → series line"
     ],
     "markdown": "Creates new line object.",
     "returns": "The ID of a line object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.new",
     "param": [
        {
           "field": "x1 (series int)",
           "description": "Bar index (if xloc = xloc.bar_index) or bar UNIX time (if xloc = xloc.bar_time) of the 1st point of the line."
        },
        {
           "field": "y1 (series int|float)",
           "description": "Price of the 1st point of the line."
        },
        {
           "field": "x2 (series int)",
           "description": "Bar index (if xloc = xloc.bar_index) or bar UNIX time (if xloc = xloc.bar_time) of the 2nd point of the line."
        },
        {
           "field": "y2 (series int|float)",
           "description": "Price of the 2nd point of the line."
        },
        {
           "field": "xloc (series string)",
           "description": "See description of x1 argument. Default is xloc.bar_index."
        },
        {
           "field": "extend (series string)",
           "description": "Extending type of line object. Optional. Default value is extend.none."
        },
        {
           "field": "color (series color)",
           "description": "Line color."
        },
        {
           "field": "style (series string)",
           "description": "Line style."
        },
        {
           "field": "width (series int)",
           "description": "Line width in pixels."
        },
        {
           "field": "first_point (chart.point)",
           "description": "A chart.point object that specifies the line's starting coordinate."
        },
        {
           "field": "second_point (chart.point)",
           "description": "A chart.point object that specifies the line's ending coordinate."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_color)(?=\\s*\\()",
     "codeblock": [
        "line.set_color(id, color) → void"
     ],
     "markdown": "Sets the line color.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_color",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "color (series color)",
           "description": "New line color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_extend)(?=\\s*\\()",
     "codeblock": [
        "line.set_extend(id, extend) → void"
     ],
     "markdown": "Sets extending type of this line object. If extend=extend.none, draws segment starting at point (x1, y1) and ending at point (x2, y2). If extend is equal to extend.right or extend.left, draws a ray starting at point (x1, y1) or (x2, y2), respectively. If extend=extend.both, draws a straight line that goes through these points.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_extend",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "extend (series string)",
           "description": "New extending type."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_first_point)(?=\\s*\\()",
     "codeblock": [
        "line.set_first_point(id, point) → void"
     ],
     "markdown": "Sets the 1st point of the `id` line to `point`.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_first_point",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "point (chart.point)",
           "description": "A chart.point object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_second_point)(?=\\s*\\()",
     "codeblock": [
        "line.set_second_point(id, point) → void"
     ],
     "markdown": "Sets the 2nd point of the `id` line to `point`.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_second_point",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "point (chart.point)",
           "description": "A chart.point object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_style)(?=\\s*\\()",
     "codeblock": [
        "line.set_style(id, style) → void"
     ],
     "markdown": "Sets the line style.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_style",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "style (series string)",
           "description": "New line style."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_width)(?=\\s*\\()",
     "codeblock": [
        "line.set_width(id, width) → void"
     ],
     "markdown": "Sets the line width.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_width",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "width (series int)",
           "description": "New line width in pixels."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_x1)(?=\\s*\\()",
     "codeblock": [
        "line.set_x1(id, x) → void"
     ],
     "markdown": "Sets bar index or bar time (depending on the xloc) of the 1st point.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_x1",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "x (series int)",
           "description": "Bar index or bar time."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_x2)(?=\\s*\\()",
     "codeblock": [
        "line.set_x2(id, x) → void"
     ],
     "markdown": "Sets bar index or bar time (depending on the xloc) of the 2nd point.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_x2",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "x (series int)",
           "description": "Bar index or bar time."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_xloc)(?=\\s*\\()",
     "codeblock": [
        "line.set_xloc(id, x1, x2, xloc) → void"
     ],
     "markdown": "Sets x-location and new bar index/time values.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_xloc",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "x1 (series int)",
           "description": "Bar index or bar time of the 1st point."
        },
        {
           "field": "x2 (series int)",
           "description": "Bar index or bar time of the 2nd point."
        },
        {
           "field": "xloc (series string)",
           "description": "New x-location value."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_xy1)(?=\\s*\\()",
     "codeblock": [
        "line.set_xy1(id, x, y) → void"
     ],
     "markdown": "Sets bar index/time and price of the 1st point.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_xy1",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "x (series int)",
           "description": "Bar index or bar time."
        },
        {
           "field": "y (series int|float)",
           "description": "Price."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_xy2)(?=\\s*\\()",
     "codeblock": [
        "line.set_xy2(id, x, y) → void"
     ],
     "markdown": "Sets bar index/time and price of the 2nd point.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_xy2",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "x (series int)",
           "description": "Bar index or bar time."
        },
        {
           "field": "y (series int|float)",
           "description": "Price."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_y1)(?=\\s*\\()",
     "codeblock": [
        "line.set_y1(id, y) → void"
     ],
     "markdown": "Sets price of the 1st point.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_y1",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "y (series int|float)",
           "description": "Price."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(line\\.set_y2)(?=\\s*\\()",
     "codeblock": [
        "line.set_y2(id, y) → void"
     ],
     "markdown": "Sets price of the 2nd point.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_line.set_y2",
     "param": [
        {
           "field": "id (series line)",
           "description": "Line object."
        },
        {
           "field": "y (series int|float)",
           "description": "Price."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(linefill)(?=\\s*\\()",
     "codeblock": [
        "linefill(x) → series linefill"
     ],
     "markdown": "Casts na to linefill.",
     "returns": "The value of the argument after casting to linefill.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_linefill",
     "param": [
        {
           "field": "x (series linefill)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(linefill\\.delete)(?=\\s*\\()",
     "codeblock": [
        "linefill.delete(id) → void"
     ],
     "markdown": "Deletes the specified linefill object. If it has already been deleted, does nothing.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_linefill.delete",
     "param": [
        {
           "field": "id (series linefill)",
           "description": "A linefill object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(linefill\\.get_line1)(?=\\s*\\()",
     "codeblock": [
        "linefill.get_line1(id) → series line"
     ],
     "markdown": "Returns the ID of the 1st line used in the `id` linefill.",
     "returns": "The ID of the 1st line",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_linefill.get_line1",
     "param": [
        {
           "field": "id (series linefill)",
           "description": "A linefill object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(linefill\\.get_line2)(?=\\s*\\()",
     "codeblock": [
        "linefill.get_line2(id) → series line"
     ],
     "markdown": "Returns the ID of the 2nd line used in the `id` linefill.",
     "returns": "The ID of the 2nd line",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_linefill.get_line2",
     "param": [
        {
           "field": "id (series linefill)",
           "description": "A linefill object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(linefill\\.new)(?=\\s*\\()",
     "codeblock": [
        "linefill.new(line1, line2, color) → series linefill"
     ],
     "markdown": "Creates a new linefill object and displays it on the chart, filling the space between `line1` and `line2` with the color specified in `color`.",
     "returns": "The ID of a linefill object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_linefill.new",
     "param": [
        {
           "field": "line1 (series line)",
           "description": "1st line object."
        },
        {
           "field": "line2 (series line)",
           "description": "2nd line object."
        },
        {
           "field": "color (series color)",
           "description": "The color used to fill the space between the lines."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(linefill\\.set_color)(?=\\s*\\()",
     "codeblock": [
        "linefill.set_color(id, color) → void"
     ],
     "markdown": "Sets the color of the linefill object passed to it.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_linefill.set_color",
     "param": [
        {
           "field": "id (series linefill)",
           "description": "A linefill object."
        },
        {
           "field": "color (series color)",
           "description": "The color of the linefill object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(log\\.error)(?=\\s*\\()",
     "codeblock": [
        "log.error(message) → void",
        "log.error(formatString, arg0, arg1, ...) → void"
     ],
     "markdown": "Converts the formatting string and value(s) into a formatted string, and sends the result to the 'Pine Logs' menu tagged with the 'error' debug level. <p/>The formatting string can contain literal text and one placeholder in curly braces `{}` for each value to be formatted. Each placeholder consists of the index of the required argument (beginning at 0) that will replace it, and an optional format specifier. The index represents the position of that argument in the function's argument list.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_log.error",
     "param": [
        {
           "field": "message (series string)",
           "description": "Log message."
        },
        {
           "field": "formatString (series string)",
           "description": "Format string."
        },
        {
           "field": "arg0, arg1, ... (any primitive types)",
           "description": "Values to format."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(log\\.info)(?=\\s*\\()",
     "codeblock": [
        "log.info(message) → void",
        "log.info(formatString, arg0, arg1, ...) → void"
     ],
     "markdown": "Converts the formatting string and value(s) into a formatted string, and sends the result to the 'Pine Logs' menu tagged with the 'info' debug level. <p/>The formatting string can contain literal text and one placeholder in curly braces `{}` for each value to be formatted. Each placeholder consists of the index of the required argument (beginning at 0) that will replace it, and an optional format specifier. The index represents the position of that argument in the function's argument list.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_log.info",
     "param": [
        {
           "field": "message (series string)",
           "description": "Log message."
        },
        {
           "field": "formatString (series string)",
           "description": "Format string."
        },
        {
           "field": "arg0, arg1, ... (any primitive types)",
           "description": "Values to format."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(log\\.warning)(?=\\s*\\()",
     "codeblock": [
        "log.warning(message) → void",
        "log.warning(formatString, arg0, arg1, ...) → void"
     ],
     "markdown": "Converts the formatting string and value(s) into a formatted string, and sends the result to the 'Pine Logs' menu tagged with the 'warning' debug level. <p/>The formatting string can contain literal text and one placeholder in curly braces `{}` for each value to be formatted. Each placeholder consists of the index of the required argument (beginning at 0) that will replace it, and an optional format specifier. The index represents the position of that argument in the function's argument list.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_log.warning",
     "param": [
        {
           "field": "message (series string)",
           "description": "Log message."
        },
        {
           "field": "formatString (series string)",
           "description": "Format string."
        },
        {
           "field": "arg0, arg1, ... (any primitive types)",
           "description": "Values to format."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.clear)(?=\\s*\\()",
     "codeblock": [
        "map.clear(id) → void"
     ],
     "markdown": "Clears the map, removing all key-value pairs from it.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.clear",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.contains)(?=\\s*\\()",
     "codeblock": [
        "map.contains(id, key) → series bool"
     ],
     "markdown": "Returns true if the `key` was found in the `id` map, false otherwise.",
     "returns": "boolean",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.contains",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object."
        },
        {
           "field": "key (series <type of the map's elements>)",
           "description": "The key to search in the map."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.copy)(?=\\s*\\()",
     "codeblock": [
        "map.copy(id) → map<keyType, valueType>"
     ],
     "markdown": "Creates a copy of an existing map.",
     "returns": "A copy of the `id` map.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.copy",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object to copy."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.get)(?=\\s*\\()",
     "codeblock": [
        "map.get(id, key) → <value_type>"
     ],
     "markdown": "Returns the value associated with the specified `key` in the `id` map.",
     "returns": "The value associated with the specified `key` in the `id` map.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.get",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object."
        },
        {
           "field": "key (series <type of the map's elements>)",
           "description": "The key of the value to retrieve."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.keys)(?=\\s*\\()",
     "codeblock": [
        "map.keys(id) → type[]"
     ],
     "markdown": "Returns an array of all the keys in the `id` map. The resulting array is a copy and any changes to it are not reflected in the original map.",
     "returns": "An array of all the keys in the `id` map.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.keys",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.new)(?=\\s*<\\s*\\b[a-zA-Z_][\\w\\.]*\\b\\s*\\,\\s*\\b[a-zA-Z_][\\w\\.]*\\b\\s*>\\s*\\()",
     "codeblock": [
        "map.new<keyType, valueType>() → map<keyType, valueType>"
     ],
     "markdown": "Creates a new map object: a collection that consists of key-value pairs, where all keys are of the `keyType`, and all values are of the `valueType`. <p/>`keyType` can only be a primitive type, i.e., one of the following: int, float, bool, string, color. <p/>`valueType` can be of any type except `array<>`, `matrix<>`, and `map<>`. User-defined types are allowed, even if they have `array<>`, `matrix<>`, or `map<>` as one of their fields.",
     "returns": "The ID of a map object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.new%3Ctype,type%3E",
     "param": []
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.put)(?=\\s*\\()",
     "codeblock": [
        "map.put(id, key, value) → <value_type>"
     ],
     "markdown": "Puts a new key-value pair into the `id` map.",
     "returns": "The previous value associated with `key` if the key was already present in the map, or na if the key is new.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.put",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object."
        },
        {
           "field": "key (series <type of the map's elements>)",
           "description": "The key to put into the map."
        },
        {
           "field": "value (series <type of the map's elements>)",
           "description": "The key value to put into the map."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.put_all)(?=\\s*\\()",
     "codeblock": [
        "map.put_all(id, id2) → void"
     ],
     "markdown": "Puts all key-value pairs from the `id2` map into the `id` map.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.put_all",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object to append to."
        },
        {
           "field": "id2 (any map type)",
           "description": "A map object to be appended."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.remove)(?=\\s*\\()",
     "codeblock": [
        "map.remove(id, key) → <value_type>"
     ],
     "markdown": "Removes a key-value pair from the `id` map.",
     "returns": "The previous value associated with `key` if the key was present in the map, or na if there was no such key.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.remove",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object."
        },
        {
           "field": "key (series <type of the map's elements>)",
           "description": "The key of the pair to remove from the map."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.size)(?=\\s*\\()",
     "codeblock": [
        "map.size(id) → series int"
     ],
     "markdown": "Returns the number of key-value pairs in the `id` map.",
     "returns": "The number of key-value pairs in the `id` map.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.size",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(map\\.values)(?=\\s*\\()",
     "codeblock": [
        "map.values(id) → type[]"
     ],
     "markdown": "Returns an array of all the values in the `id` map. The resulting array is a copy and any changes to it are not reflected in the original map.",
     "returns": "An array of all the values in the `id` map.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_map.values",
     "param": [
        {
           "field": "id (any map type)",
           "description": "A map object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.abs)(?=\\s*\\()",
     "codeblock": [
        "math.abs(number) → float|int"
     ],
     "markdown": "Absolute value of `number` is `number` if `number` >= 0, or -`number` otherwise.",
     "returns": "The absolute value of `number`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.abs",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The number to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.acos)(?=\\s*\\()",
     "codeblock": [
        "math.acos(angle) → float"
     ],
     "markdown": "Returns the arccosine (in radians) of number such that cos(acos(y)) = y for y in range [-1, 1].",
     "returns": "The arc cosine of a value; the returned angle is in the range [0, Pi], or na if y is outside of range [-1, 1].",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.acos",
     "param": [
        {
           "field": "angle (int|float)",
           "description": "The value, in radians, to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.asin)(?=\\s*\\()",
     "codeblock": [
        "math.asin(angle) → float"
     ],
     "markdown": "Returns the arcsine (in radians) of number such that sin(asin(y)) = y for y in range [-1, 1].",
     "returns": "The arcsine of a value; the returned angle is in the range [-Pi/2, Pi/2], or na if y is outside of range [-1, 1].",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.asin",
     "param": [
        {
           "field": "angle (int|float)",
           "description": "The value, in radians, to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.atan)(?=\\s*\\()",
     "codeblock": [
        "math.atan(angle) → float"
     ],
     "markdown": "Returns the arctangent (in radians) of number such that tan(atan(y)) = y for any y.",
     "returns": "The arc tangent of a value; the returned angle is in the range [-Pi/2, Pi/2].",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.atan",
     "param": [
        {
           "field": "angle (int|float)",
           "description": "The value, in radians, to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.avg)(?=\\s*\\()",
     "codeblock": [
        "math.avg(number0, number1, ...) → float"
     ],
     "markdown": "Calculates average of all given series (elementwise).",
     "returns": "Average.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.avg",
     "param": [
        {
           "field": "number0, number1, ... (int|float)",
           "description": "A sequence of numbers to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.ceil)(?=\\s*\\()",
     "codeblock": [
        "math.ceil(number) → int"
     ],
     "markdown": "Returns the smallest (closest to negative infinity) integer that is greater than or equal to the argument.",
     "returns": "The smallest integer greater than or equal to the given number.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.ceil",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The number to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.cos)(?=\\s*\\()",
     "codeblock": [
        "math.cos(angle) → float"
     ],
     "markdown": "Returns the trigonometric cosine of an angle.",
     "returns": "The trigonometric cosine of an angle.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.cos",
     "param": [
        {
           "field": "angle (int|float)",
           "description": "Angle, in radians."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.exp)(?=\\s*\\()",
     "codeblock": [
        "math.exp(number) → float"
     ],
     "markdown": "The exp function of `number` is e raised to the power of `number`, where e is Euler's number.",
     "returns": "A value representing e raised to the power of `number`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.exp",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The number to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.floor)(?=\\s*\\()",
     "codeblock": [
        "math.floor(number) → int"
     ],
     "markdown": "Returns the largest integer less than or equal to the given number.",
     "returns": "The largest integer less than or equal to the given number.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.floor",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The number to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.log)(?=\\s*\\()",
     "codeblock": [
        "math.log(number) → float"
     ],
     "markdown": "Natural logarithm of any `number` > 0 is the unique y such that e^y = `number`.",
     "returns": "The natural logarithm of `number`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.log",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The number to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.log10)(?=\\s*\\()",
     "codeblock": [
        "math.log10(number) → float"
     ],
     "markdown": "The common (or base 10) logarithm of `number` is the power to which 10 must be raised to obtain the `number`. 10^y = `number`.",
     "returns": "The base 10 logarithm of `number`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.log10",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The number to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.max)(?=\\s*\\()",
     "codeblock": [
        "math.max(number0, number1, ...) → float|int"
     ],
     "markdown": "Returns the greatest of multiple values.",
     "returns": "The greatest of multiple given values.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.max",
     "param": [
        {
           "field": "number0, number1, ... (int|float)",
           "description": "A sequence of numbers to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.min)(?=\\s*\\()",
     "codeblock": [
        "math.min(number0, number1, ...) → float|int"
     ],
     "markdown": "Returns the smallest of multiple values.",
     "returns": "The smallest of multiple given values.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.min",
     "param": [
        {
           "field": "number0, number1, ... (int|float)",
           "description": "A sequence of numbers to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.pow)(?=\\s*\\()",
     "codeblock": [
        "math.pow(base, exponent) → float"
     ],
     "markdown": "Mathematical power function.",
     "returns": "`base` raised to the power of `exponent`. If `base` is a series, it is calculated elementwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.pow",
     "param": [
        {
           "field": "base (int|float)",
           "description": "Specify the base to use."
        },
        {
           "field": "exponent (int|float)",
           "description": "Specifies the exponent."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.random)(?=\\s*\\()",
     "codeblock": [
        "math.random(min, max, seed) → series float"
     ],
     "markdown": "Returns a pseudo-random value. The function will generate a different sequence of values for each script execution. Using the same value for the optional seed argument will produce a repeatable sequence.",
     "returns": "A random value.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.random",
     "param": [
        {
           "field": "min (series int|float)",
           "description": "The lower bound of the range of random values. The value is not included in the range. The default is 0."
        },
        {
           "field": "max (series int|float)",
           "description": "The upper bound of the range of random values. The value is not included in the range. The default is 1."
        },
        {
           "field": "seed (simple int)",
           "description": "Optional argument. When the same seed is used, allows successive calls to the function to produce a repeatable set of values."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.round)(?=\\s*\\()",
     "codeblock": [
        "math.round(number, precision) → float|int"
     ],
     "markdown": "Returns the value of `number` rounded to the nearest integer, with ties rounding up. If the `precision` parameter is used, returns a float value rounded to that amount of decimal places.",
     "returns": "The value of `number` rounded to the nearest integer, or according to precision.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.round",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The value to be rounded."
        },
        {
           "field": "precision (simple int)",
           "description": "Optional argument. Decimal places to which `number` will be rounded. When no argument is supplied, rounding is to the nearest integer."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.round_to_mintick)(?=\\s*\\()",
     "codeblock": [
        "math.round_to_mintick(number) → float"
     ],
     "markdown": "Returns the value rounded to the symbol's mintick, i.e. the nearest value that can be divided by syminfo.mintick, without the remainder, with ties rounding up.",
     "returns": "The `number` rounded to tick precision.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.round_to_mintick",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The value to be rounded."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.sign)(?=\\s*\\()",
     "codeblock": [
        "math.sign(number) → float"
     ],
     "markdown": "Sign (signum) of `number` is zero if `number` is zero, 1.0 if `number` is greater than zero, -1.0 if `number` is less than zero.",
     "returns": "The sign of the argument.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.sign",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The number to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.sin)(?=\\s*\\()",
     "codeblock": [
        "math.sin(angle) → float"
     ],
     "markdown": "Returns the trigonometric sine of an angle.",
     "returns": "The trigonometric sine of an angle.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.sin",
     "param": [
        {
           "field": "angle (int|float)",
           "description": "Angle, in radians."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.sqrt)(?=\\s*\\()",
     "codeblock": [
        "math.sqrt(number) → float"
     ],
     "markdown": "Square root of any `number` >= 0 is the unique y >= 0 such that y^2 = `number`.",
     "returns": "The square root of `number`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.sqrt",
     "param": [
        {
           "field": "number (int|float)",
           "description": "The number to use in the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.sum)(?=\\s*\\()",
     "codeblock": [
        "math.sum(source, length) → series float"
     ],
     "markdown": "Returns the sliding sum of last y values of x.",
     "returns": "Sum of `source` for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.sum",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.tan)(?=\\s*\\()",
     "codeblock": [
        "math.tan(angle) → float"
     ],
     "markdown": "Returns the trigonometric tangent of an angle.",
     "returns": "The trigonometric tangent of an angle.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.tan",
     "param": [
        {
           "field": "angle (int|float)",
           "description": "Angle, in radians."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.todegrees)(?=\\s*\\()",
     "codeblock": [
        "math.todegrees(radians) → series float"
     ],
     "markdown": "Returns an approximately equivalent angle in degrees from an angle measured in radians.",
     "returns": "The angle value in degrees.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.todegrees",
     "param": [
        {
           "field": "radians (series int|float)",
           "description": "Angle in radians."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(math\\.toradians)(?=\\s*\\()",
     "codeblock": [
        "math.toradians(degrees) → series float"
     ],
     "markdown": "Returns an approximately equivalent angle in radians from an angle measured in degrees.",
     "returns": "The angle value in radians.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_math.toradians",
     "param": [
        {
           "field": "degrees (series int|float)",
           "description": "Angle in degrees."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.add_col)(?=\\s*\\()",
     "codeblock": [
        "matrix.add_col(id, column, array_id) → void"
     ],
     "markdown": "Adds a column at the `column` index of the `id` matrix. The column can consist of `na` values, or an array can be used to provide values.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.add_col",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the column after which the new column will be inserted. Optional. The default value is matrix.columns."
        },
        {
           "field": "array_id (any array type)",
           "description": "An array to be inserted. Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.add_row)(?=\\s*\\()",
     "codeblock": [
        "matrix.add_row(id, row, array_id) → void"
     ],
     "markdown": "Adds a row at the `row` index of the `id` matrix. The row can consist of `na` values, or an array can be used to provide values.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.add_row",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "row (series int)",
           "description": "The index of the row after which the new row will be inserted. Optional. The default value is matrix.rows."
        },
        {
           "field": "array_id (any array type)",
           "description": "An array to be inserted. Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.avg)(?=\\s*\\()",
     "codeblock": [
        "matrix.avg(id) → series float|int"
     ],
     "markdown": "Calculates the average of all elements in the matrix.",
     "returns": "The average value from the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.avg",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.col)(?=\\s*\\()",
     "codeblock": [
        "matrix.col(id, column) → type[]"
     ],
     "markdown": "Creates a one-dimensional array from the elements of a matrix column.",
     "returns": "An array ID containing the `column` values of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.col",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "column (series int)",
           "description": "Index of the required column."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.columns)(?=\\s*\\()",
     "codeblock": [
        "matrix.columns(id) → series int"
     ],
     "markdown": "Returns the number of columns in the matrix.",
     "returns": "The number of columns in the matrix `id`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.columns",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.concat)(?=\\s*\\()",
     "codeblock": [
        "matrix.concat(id1, id2) → matrix<type>"
     ],
     "markdown": "Appends the `id2` matrix to the `id1` matrix.",
     "returns": "Returns the `id1` matrix concatenated with the `id2` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.concat",
     "param": [
        {
           "field": "id1 (any matrix type)",
           "description": "Matrix object to concatenate into."
        },
        {
           "field": "id2 (any matrix type)",
           "description": "Matrix object whose elements will be appended to `id1`."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.copy)(?=\\s*\\()",
     "codeblock": [
        "matrix.copy(id) → matrix<type>"
     ],
     "markdown": "Creates a new matrix which is a copy of the original.",
     "returns": "A new matrix object of the copied `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.copy",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object to copy."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.det)(?=\\s*\\()",
     "codeblock": [
        "matrix.det(id) → series float|int"
     ],
     "markdown": "Returns the determinant of a square matrix.",
     "returns": "The determinant value of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.det",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.diff)(?=\\s*\\()",
     "codeblock": [
        "matrix.diff(id1, id2) → matrix<float>|matrix<int>"
     ],
     "markdown": "Returns a new matrix resulting from the subtraction between matrices `id1` and `id2`, or of matrix `id1` and an `id2` scalar (a numerical value).",
     "returns": "A new matrix object containing the difference between `id2` and `id1`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.diff",
     "param": [
        {
           "field": "id1 (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "Matrix to subtract from."
        },
        {
           "field": "id2 (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "Matrix object or a scalar value to be subtracted."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.eigenvalues)(?=\\s*\\()",
     "codeblock": [
        "matrix.eigenvalues(id) → float[]|int[]"
     ],
     "markdown": "Returns an array containing the eigenvalues of a square matrix.",
     "returns": "An array containing the eigenvalues of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.eigenvalues",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.eigenvectors)(?=\\s*\\()",
     "codeblock": [
        "matrix.eigenvectors(id) → matrix<float>|matrix<int>"
     ],
     "markdown": "Returns a matrix of eigenvectors, in which each column is an eigenvector of the `id` matrix.",
     "returns": "A new matrix containing the eigenvectors of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.eigenvectors",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.elements_count)(?=\\s*\\()",
     "codeblock": [
        "matrix.elements_count(id) → series int"
     ],
     "markdown": "Returns the total number of all matrix elements.",
     "returns": "The total number of all matrix elements.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.elements_count",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.fill)(?=\\s*\\()",
     "codeblock": [
        "matrix.fill(id, value, from_row, to_row, from_column, to_column) → void"
     ],
     "markdown": "Fills a rectangular area of the `id` matrix defined by the indices `from_column` to `to_column` (not including it) and `from_row` to `to_row`(not including it) with the `value`.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.fill",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "value (series <type of the matrix's elements>)",
           "description": "The value to fill with."
        },
        {
           "field": "from_row (series int)",
           "description": "Row index from which the fill will begin (inclusive). Optional. The default value is 0."
        },
        {
           "field": "to_row (series int)",
           "description": "Row index where the fill will end (not inclusive). Optional. The default value is matrix.rows."
        },
        {
           "field": "from_column (series int)",
           "description": "Column index from which the fill will begin (inclusive). Optional. The default value is 0."
        },
        {
           "field": "to_column (series int)",
           "description": "Column index where the fill will end (non inclusive). Optional. The default value is matrix.columns."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.get)(?=\\s*\\()",
     "codeblock": [
        "matrix.get(id, row, column) → <matrix_type>"
     ],
     "markdown": "Returns the element with the specified index of the matrix.",
     "returns": "The value of the element at the `row` and `column` index of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.get",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "row (series int)",
           "description": "Index of the required row."
        },
        {
           "field": "column (series int)",
           "description": "Index of the required column."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.inv)(?=\\s*\\()",
     "codeblock": [
        "matrix.inv(id) → matrix<float>|matrix<int>"
     ],
     "markdown": "Returns the inverse of a square matrix.",
     "returns": "A new matrix, which is the inverse of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.inv",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_antidiagonal)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_antidiagonal(id) → series bool"
     ],
     "markdown": "Determines if the matrix is anti-diagonal (all elements outside the secondary diagonal are zero).",
     "returns": "True if the `id` matrix is anti-diagonal, false otherwise. False with non-square matrices.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_antidiagonal",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_antisymmetric)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_antisymmetric(id) → series bool"
     ],
     "markdown": "Determines if a matrix is antisymmetric (its transpose equals its negative).",
     "returns": "True if the `id` matrix is antisymmetric, false otherwise. False with non-square matrices.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_antisymmetric",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_binary)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_binary(id) → series bool"
     ],
     "markdown": "Determines if the matrix is binary (when all elements of the matrix are 0 or 1).",
     "returns": "True if the `id` matrix is binary, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_binary",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_diagonal)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_diagonal(id) → series bool"
     ],
     "markdown": "Determines if the matrix is diagonal (all elements outside the main diagonal are zero).",
     "returns": "True if the `id` matrix is diagonal, false otherwise. False with non-square matrices.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_diagonal",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_identity)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_identity(id) → series bool"
     ],
     "markdown": "Determines if a matrix is an identity matrix (elements with ones on the main diagonal and zeros elsewhere).",
     "returns": "True if `id` is an identity matrix, false otherwise. False with non-square matrices.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_identity",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_square)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_square(id) → series bool"
     ],
     "markdown": "Determines if the matrix is square (it has the same number of rows and columns).",
     "returns": "True if the `id` matrix is square, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_square",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_stochastic)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_stochastic(id) → series bool"
     ],
     "markdown": "Determines if the matrix is stochastic.",
     "returns": "True if the `id` matrix is stochastic, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_stochastic",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_symmetric)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_symmetric(id) → series bool"
     ],
     "markdown": "Determines if a square matrix is symmetric (elements are symmetric with respect to the main diagonal).",
     "returns": "True if the `id` matrix is symmetric, false otherwise. False with non-square matrices.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_symmetric",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_triangular)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_triangular(id) → series bool"
     ],
     "markdown": "Determines if the matrix is triangular (if all elements above or below the main diagonal are zero).",
     "returns": "True if the `id` matrix is triangular, false otherwise. False with non-square matrices.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_triangular",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to test."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.is_zero)(?=\\s*\\()",
     "codeblock": [
        "matrix.is_zero(id) → series bool"
     ],
     "markdown": "Determines if all elements of the matrix are zero.",
     "returns": "True if all elements of the `id` matrix are zero, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.is_zero",
     "param": [
        {
           "field": "id (matrix\\<float\\>)",
           "description": "Matrix object to check."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.kron)(?=\\s*\\()",
     "codeblock": [
        "matrix.kron(id1, id2) → matrix<float>|matrix<int>"
     ],
     "markdown": "Returns the Kronecker product for the `id1` and `id2` matrices.",
     "returns": "A new matrix containing the Kronecker product of `id1` and `id2`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.kron",
     "param": [
        {
           "field": "id1 (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "1st matrix object."
        },
        {
           "field": "id2 (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "2nd matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.max)(?=\\s*\\()",
     "codeblock": [
        "matrix.max(id) → series float|int"
     ],
     "markdown": "Returns the largest value from the matrix elements.",
     "returns": "The maximum value from the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.max",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.median)(?=\\s*\\()",
     "codeblock": [
        "matrix.median(id) → series float|int"
     ],
     "markdown": "Calculates the median (\"the middle\" value) of matrix elements.",
     "returns": "The median of matrix elements.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.median",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.min)(?=\\s*\\()",
     "codeblock": [
        "matrix.min(id) → series float|int"
     ],
     "markdown": "Returns the smallest value from the matrix elements.",
     "returns": "The smallest value from the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.min",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.mode)(?=\\s*\\()",
     "codeblock": [
        "matrix.mode(id) → series float|int"
     ],
     "markdown": "Calculates the mode of the matrix, which is the most frequently occurring value from the matrix elements. When there are multiple values occurring equally frequently, the function returns the smallest of those values.",
     "returns": "The most frequently occurring value from the `id` matrix. If none exists, returns the smallest value instead.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.mode",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.mult)(?=\\s*\\()",
     "codeblock": [
        "matrix.mult(id1, id2) → matrix<float>|matrix<int>|float[]|int[]"
     ],
     "markdown": "Returns a new matrix resulting from the product between the matrices `id1` and `id2`, or between an `id1` matrix and an `id2` scalar (a numerical value), or between an `id1` matrix and an `id2` vector (an array of values).",
     "returns": "A new matrix object containing the product of `id2` and `id1`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.mult",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "1st matrix object."
        },
        {
           "field": "id2 (matrix\\<int\\>|matrix\\<float\\>|int[]|float[])",
           "description": "2nd matrix object, value or array."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.new)(?=\\s*<\\s*\\b[a-zA-Z0-9_\\.]+\\b\\s*>\\s*\\()",
     "codeblock": [
        "matrix.new<type>(rows, columns, initial_value) → matrix<type>"
     ],
     "markdown": "Creates a new matrix object. A matrix is a two-dimensional data structure containing rows and columns. All elements in the matrix must be of the type specified in the type template (\"\\<type\\>\").",
     "returns": "The ID of the new matrix object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.new%3Ctype%3E",
     "param": [
        {
           "field": "rows (series int)",
           "description": "Initial row count of the matrix. Optional. The default value is 0."
        },
        {
           "field": "columns (series int)",
           "description": "Initial column count of the matrix. Optional. The default value is 0."
        },
        {
           "field": "initial_value (\\<matrix_type\\>)",
           "description": "Initial value of all matrix elements. Optional. The default is `na`."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.pinv)(?=\\s*\\()",
     "codeblock": [
        "matrix.pinv(id) → matrix<float>|matrix<int>"
     ],
     "markdown": "Returns the pseudoinverse of a matrix.",
     "returns": "A new matrix containing the pseudoinverse of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.pinv",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.pow)(?=\\s*\\()",
     "codeblock": [
        "matrix.pow(id, power) → matrix<float>|matrix<int>"
     ],
     "markdown": "Calculates the product of the matrix by itself `power` times.",
     "returns": "The product of the `id` matrix by itself `power` times.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.pow",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        },
        {
           "field": "power (series int)",
           "description": "The number of times the matrix will be multiplied by itself."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.rank)(?=\\s*\\()",
     "codeblock": [
        "matrix.rank(id) → series int"
     ],
     "markdown": "Calculates the rank of the matrix.",
     "returns": "The rank of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.rank",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.remove_col)(?=\\s*\\()",
     "codeblock": [
        "matrix.remove_col(id, column) → type[]"
     ],
     "markdown": "Removes the column at `column` index of the `id` matrix and returns an array containing the removed column's values.",
     "returns": "An array containing the elements of the column removed from the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.remove_col",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the column to be removed. Optional. The default value is matrix.columns."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.remove_row)(?=\\s*\\()",
     "codeblock": [
        "matrix.remove_row(id, row) → type[]"
     ],
     "markdown": "Removes the row at `row` index of the `id` matrix and returns an array containing the removed row's values.",
     "returns": "An array containing the elements of the row removed from the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.remove_row",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "row (series int)",
           "description": "row (series int) The index of the row to be deleted. Optional. The default value is matrix.rows."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.reshape)(?=\\s*\\()",
     "codeblock": [
        "matrix.reshape(id, rows, columns) → void"
     ],
     "markdown": "Rebuilds the `id` matrix to `rows` x `cols` dimensions.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.reshape",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "rows (series int)",
           "description": "The number of rows of the reshaped matrix."
        },
        {
           "field": "columns (series int)",
           "description": "The number of columns of the reshaped matrix."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.reverse)(?=\\s*\\()",
     "codeblock": [
        "matrix.reverse(id) → void"
     ],
     "markdown": "Reverses the order of rows and columns in the matrix `id`. The first row and first column become the last, and the last become the first.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.reverse",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.row)(?=\\s*\\()",
     "codeblock": [
        "matrix.row(id, row) → type[]"
     ],
     "markdown": "Creates a one-dimensional array from the elements of a matrix row.",
     "returns": "An array ID containing the `row` values of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.row",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "row (series int)",
           "description": "Index of the required row."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.rows)(?=\\s*\\()",
     "codeblock": [
        "matrix.rows(id) → series int"
     ],
     "markdown": "Returns the number of rows in the matrix.",
     "returns": "The number of rows in the matrix `id`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.rows",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.set)(?=\\s*\\()",
     "codeblock": [
        "matrix.set(id, row, column, value) → void"
     ],
     "markdown": "Assigns `value` to the element at the `row` and `column` of the `id` matrix.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.set",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "row (series int)",
           "description": "The row index of the element to be modified."
        },
        {
           "field": "column (series int)",
           "description": "The column index of the element to be modified."
        },
        {
           "field": "value (series <type of the matrix's elements>)",
           "description": "The new value to be set."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.sort)(?=\\s*\\()",
     "codeblock": [
        "matrix.sort(id, column, order) → void"
     ],
     "markdown": "Rearranges the rows in the `id` matrix following the sorted order of the values in the `column`.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.sort",
     "param": [
        {
           "field": "id (matrix\\<int\\>)",
           "description": "A matrix object to be sorted."
        },
        {
           "field": "column (series int)",
           "description": "Index of the column whose sorted values determine the new order of rows. Optional. The default value is 0."
        },
        {
           "field": "order (simple sort_order)",
           "description": "The sort order. Default is order.ascending."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.submatrix)(?=\\s*\\()",
     "codeblock": [
        "matrix.submatrix(id, from_row, to_row, from_column, to_column) → matrix<type>"
     ],
     "markdown": "Extracts a submatrix of the `id` matrix within the specified indices.",
     "returns": "A new matrix object containing the submatrix of the `id` matrix defined by the `from_row`, `to_row`, `from_column` and `to_column` indices.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.submatrix",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "from_row (series int)",
           "description": "Index of the row from which the extraction will begin (inclusive). Optional. The default value is 0."
        },
        {
           "field": "to_row (series int)",
           "description": "Index of the row where the extraction will end (non inclusive). Optional. The default value is matrix.rows."
        },
        {
           "field": "from_column (series int)",
           "description": "Index of the column from which the extraction will begin (inclusive). Optional. The default value is 0."
        },
        {
           "field": "to_column (series int)",
           "description": "Index of the column where the extraction will end (non inclusive). Optional. The default value is matrix.columns."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.sum)(?=\\s*\\()",
     "codeblock": [
        "matrix.sum(id1, id2) → matrix<float>|matrix<int>"
     ],
     "markdown": "Returns a new matrix resulting from the sum of two matrices `id1` and `id2`, or of an `id1` matrix and an `id2` scalar (a numerical value).",
     "returns": "A new matrix object containing the sum of `id2` and `id1`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.sum",
     "param": [
        {
           "field": "id1 (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "1st matrix object."
        },
        {
           "field": "id2 (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "2nd matrix object, or scalar value."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.swap_columns)(?=\\s*\\()",
     "codeblock": [
        "matrix.swap_columns(id, column1, column2) → void"
     ],
     "markdown": "Swaps the columns at the index `column1` and `column2` in the `id` matrix.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.swap_columns",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "column1 (series int)",
           "description": "Index of the first column to be swapped."
        },
        {
           "field": "column2 (series int)",
           "description": "Index of the second column to be swapped."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.swap_rows)(?=\\s*\\()",
     "codeblock": [
        "matrix.swap_rows(id, row1, row2) → void"
     ],
     "markdown": "Swaps the rows at the index `row1` and `row2` in the `id` matrix.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.swap_rows",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        },
        {
           "field": "row1 (series int)",
           "description": "Index of the first row to be swapped."
        },
        {
           "field": "row2 (series int)",
           "description": "Index of the second row to be swapped."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.trace)(?=\\s*\\()",
     "codeblock": [
        "matrix.trace(id) → series float|int"
     ],
     "markdown": "Calculates the trace of a matrix (the sum of the main diagonal's elements).",
     "returns": "The trace of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.trace",
     "param": [
        {
           "field": "id (matrix\\<int\\>|matrix\\<float\\>)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(matrix\\.transpose)(?=\\s*\\()",
     "codeblock": [
        "matrix.transpose(id) → matrix<type>"
     ],
     "markdown": "Creates a new, transposed version of the `id`. This interchanges the row and column index of each element.",
     "returns": "A new matrix containing the transposed version of the `id` matrix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_matrix.swap_columns",
     "param": [
        {
           "field": "id (any matrix type)",
           "description": "A matrix object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(max_bars_back)(?=\\s*\\()",
     "codeblock": [
        "max_bars_back(var, num) → void"
     ],
     "markdown": "Sets the maximum number of bars that is available for historical reference of a given built-in or user variable.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_max_bars_back",
     "param": [
        {
           "field": "var (any series type)",
           "description": "Series variable identifier for which history buffer should be resized."
        },
        {
           "field": "num (const int)",
           "description": "History buffer size which is the number of bars that could be referenced for variable 'var'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(minute)(?=\\s*\\()",
     "codeblock": [
        "minute(time, timezone) → series int"
     ],
     "markdown": "Returns minute (in exchange timezone) for provided UNIX time.",
     "returns": "Minute (in exchange timezone) for provided UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_minute",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time in milliseconds."
        },
        {
           "field": "timezone (series string)",
           "description": "Allows adjusting the returned value to a time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(month)(?=\\s*\\()",
     "codeblock": [
        "month(time, timezone) → series int"
     ],
     "markdown": "Returns month (in exchange timezone) for provided UNIX time.",
     "returns": "Month (in exchange timezone) for provided UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_month",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time in milliseconds."
        },
        {
           "field": "timezone (series string)",
           "description": "Allows adjusting the returned value to a time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(na)(?=\\s*\\()",
     "codeblock": [
        "na(x) → bool"
     ],
     "markdown": "Tests if `x` is na.",
     "returns": "Returns true if `x` is na, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_na",
     "param": [
        {
           "field": "x (any type)",
           "description": "Value to be tested."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(nz)(?=\\s*\\()",
     "codeblock": [
        "nz(source, replacement) → bool|color|float|int"
     ],
     "markdown": "Replaces NaN values with zeros (or given value) in a series.",
     "returns": "The value of `source` if it is not `na`. If the value of `source` is `na`, returns zero, or the `replacement` argument when one is used.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_nz",
     "param": [
        {
           "field": "source (bool|color|float|int)",
           "description": "Series of values to process."
        },
        {
           "field": "replacement (bool|color|float|int)",
           "description": "Value that will replace all 'na' values in the `source` series."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(plot)(?=\\s*\\()",
     "codeblock": [
        "plot(series, title, color, linewidth, style, trackprice, histbase, offset, join, editable, show_last, display, format, precision, force_overlay) → plot"
     ],
     "markdown": "Plots a series of data on the chart.",
     "returns": "A plot object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_plot",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of data to be plotted. Required argument."
        },
        {
           "field": "title (const string)",
           "description": "Title of the plot."
        },
        {
           "field": "color (series color)",
           "description": "Color of the plot."
        },
        {
           "field": "linewidth (input int)",
           "description": "Width of the plotted line. Default value is 1. Not applicable to every style."
        },
        {
           "field": "style (input plot_style)",
           "description": "Type of plot. Default value is plot.style_line."
        },
        {
           "field": "trackprice (input bool)",
           "description": "If true then a horizontal price line will be shown at the level of the last indicator value. Default is false."
        },
        {
           "field": "histbase (input int|float)",
           "description": "The price value used as the reference level when rendering plot with plot.style_histogram, plot.style_columns or plot.style_area style. Default is 0.0."
        },
        {
           "field": "offset (series int)",
           "description": "Shifts the plot to the left or to the right on the given number of bars. Default is 0."
        },
        {
           "field": "join (input bool)",
           "description": "If true then plot points will be joined with line, applicable only to plot.style_cross and plot.style_circles styles. Default is false."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then plot style will be editable in Format dialog. Default is true."
        },
        {
           "field": "show_last (input int)",
           "description": "If set, defines the number of bars (from the last bar back to the past) to plot on chart."
        },
        {
           "field": "display (input plot_display)",
           "description": "Controls where the plot's information is displayed. Optional. The default is display.all."
        },
        {
           "field": "format (input string)",
           "description": "Determines format of plot's values. Supersedes the `format` parameter of the indicator or strategy functions. Optional. The default is the `format` value used by the indicator or strategy function."
        },
        {
           "field": "precision (input int)",
           "description": "Number of digits after the decimal point the plot's values show on the chart pane's y-axis, the script's status line, and the Data Window. Accepts an integer in range 0 to 16. Supersedes the `precision` parameter of the indicator or strategy functions. Optional. The default is the `precision` value used by the indicator or strategy function."
        },
        {
           "field": "force_overlay (const bool)",
           "description": "If true, the plotted results will display on the main chart pane, even when the script occupies a separate pane. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(plotarrow)(?=\\s*\\()",
     "codeblock": [
        "plotarrow(series, title, colorup, colordown, offset, minheight, maxheight, editable, show_last, display, format, precision, force_overlay) → void"
     ],
     "markdown": "Plots up and down arrows on the chart. Up arrow is drawn at every indicator positive value, down arrow is drawn at every negative value. If indicator returns na then no arrow is drawn. Arrows has different height, the more absolute indicator value the longer arrow is drawn.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_plotarrow",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of data to be plotted as arrows. Required argument."
        },
        {
           "field": "title (const string)",
           "description": "Title of the plot."
        },
        {
           "field": "colorup (series color)",
           "description": "Color of the up arrows. Optional."
        },
        {
           "field": "colordown (series color)",
           "description": "Color of the down arrows. Optional."
        },
        {
           "field": "offset (series int)",
           "description": "Shifts arrows to the left or to the right on the given number of bars. Default is 0."
        },
        {
           "field": "minheight (input int)",
           "description": "Minimal possible arrow height in pixels. Default is 5."
        },
        {
           "field": "maxheight (input int)",
           "description": "Maximum possible arrow height in pixels. Default is 100."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then plotarrow style will be editable in Format dialog. Default is true."
        },
        {
           "field": "show_last (input int)",
           "description": "If set, defines the number of arrows (from the last bar back to the past) to plot on chart."
        },
        {
           "field": "display (input plot_display)",
           "description": "Controls where the plot's information is displayed. Optional. The default is display.all."
        },
        {
           "field": "format (input string)",
           "description": "Determines format of plot's values. Supersedes the `format` parameter of the indicator or strategy functions. Optional. The default is the `format` value used by the indicator or strategy function."
        },
        {
           "field": "precision (input int)",
           "description": "Number of digits after the decimal point the plot's values show on the chart pane's y-axis, the script's status line, and the Data Window. Accepts an integer in range 0 to 16. Supersedes the `precision` parameter of the indicator or strategy functions. Optional. The default is the `precision` value used by the indicator or strategy function."
        },
        {
           "field": "force_overlay (const bool)",
           "description": "If true, the plotted results will display on the main chart pane, even when the script occupies a separate pane. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(plotbar)(?=\\s*\\()",
     "codeblock": [
        "plotbar(open, high, low, close, title, color, editable, show_last, display, format, precision, force_overlay) → void"
     ],
     "markdown": "Plots ohlc bars on the chart.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_plotbar",
     "param": [
        {
           "field": "open (series int|float)",
           "description": "Open series of data to be used as open values of bars. Required argument."
        },
        {
           "field": "high (series int|float)",
           "description": "High series of data to be used as high values of bars. Required argument."
        },
        {
           "field": "low (series int|float)",
           "description": "Low series of data to be used as low values of bars. Required argument."
        },
        {
           "field": "close (series int|float)",
           "description": "Close series of data to be used as close values of bars. Required argument."
        },
        {
           "field": "title (const string)",
           "description": "Title of the plotbar. Optional."
        },
        {
           "field": "color (series color)",
           "description": "Color of the ohlc bars. Optional."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then plotbar style will be editable in Format dialog. Default is true."
        },
        {
           "field": "show_last (input int)",
           "description": "If set, defines the number of bars (from the last bar back to the past) to plot on chart."
        },
        {
           "field": "display (input plot_display)",
           "description": "Controls where the plot's information is displayed. Optional. The default is display.all."
        },
        {
           "field": "format (input string)",
           "description": "Determines format of plot's values. Supersedes the `format` parameter of the indicator or strategy functions. Optional. The default is the `format` value used by the indicator or strategy function."
        },
        {
           "field": "precision (input int)",
           "description": "Number of digits after the decimal point the plot's values show on the chart pane's y-axis, the script's status line, and the Data Window. Accepts an integer in range 0 to 16. Supersedes the `precision` parameter of the indicator or strategy functions. Optional. The default is the `precision` value used by the indicator or strategy function."
        },
        {
           "field": "force_overlay (const bool)",
           "description": "If true, the plotted results will display on the main chart pane, even when the script occupies a separate pane. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(plotcandle)(?=\\s*\\()",
     "codeblock": [
        "plotcandle(open, high, low, close, title, color, wickcolor, editable, show_last, bordercolor, display, format, precision, force_overlay) → void"
     ],
     "markdown": "Plots candles on the chart.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_plotcandle",
     "param": [
        {
           "field": "open (series int|float)",
           "description": "Open series of data to be used as open values of candles. Required argument."
        },
        {
           "field": "high (series int|float)",
           "description": "High series of data to be used as high values of candles. Required argument."
        },
        {
           "field": "low (series int|float)",
           "description": "Low series of data to be used as low values of candles. Required argument."
        },
        {
           "field": "close (series int|float)",
           "description": "Close series of data to be used as close values of candles. Required argument."
        },
        {
           "field": "title (const string)",
           "description": "Title of the plotcandles. Optional."
        },
        {
           "field": "color (series color)",
           "description": "Color of the candles. Optional."
        },
        {
           "field": "wickcolor (series color)",
           "description": "The color of the wick of candles. Optional."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then plotcandle style will be editable in Format dialog. Default is true."
        },
        {
           "field": "show_last (input int)",
           "description": "If set, defines the number of candles (from the last bar back to the past) to plot on chart."
        },
        {
           "field": "bordercolor (series color)",
           "description": "The border color of candles. Optional."
        },
        {
           "field": "display (input plot_display)",
           "description": "Controls where the plot's information is displayed. Optional. The default is display.all."
        },
        {
           "field": "format (input string)",
           "description": "Determines format of plot's values. Supersedes the `format` parameter of the indicator or strategy functions. Optional. The default is the `format` value used by the indicator or strategy function."
        },
        {
           "field": "precision (input int)",
           "description": "Number of digits after the decimal point the plot's values show on the chart pane's y-axis, the script's status line, and the Data Window. Accepts an integer in range 0 to 16. Supersedes the `precision` parameter of the indicator or strategy functions. Optional. The default is the `precision` value used by the indicator or strategy function."
        },
        {
           "field": "force_overlay (const bool)",
           "description": "If true, the plotted results will display on the main chart pane, even when the script occupies a separate pane. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(plotchar)(?=\\s*\\()",
     "codeblock": [
        "plotchar(series, title, char, location, color, offset, text, textcolor, editable, size, show_last, display, format, precision, force_overlay) → void"
     ],
     "markdown": "Plots visual shapes using any given one Unicode character on the chart.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_plotchar",
     "param": [
        {
           "field": "series (series int|float|bool)",
           "description": "Series of data to be plotted as shapes. Series is treated as a series of boolean values for all location values except location.absolute. Required argument."
        },
        {
           "field": "title (const string)",
           "description": "Title of the plot."
        },
        {
           "field": "char (input string)",
           "description": "Character to use as a visual shape."
        },
        {
           "field": "location (input string)",
           "description": "Location of shapes on the chart. Default value is location.abovebar."
        },
        {
           "field": "color (series color)",
           "description": "Color of the shapes. Optional."
        },
        {
           "field": "offset (series int)",
           "description": "Shifts shapes to the left or to the right on the given number of bars. Default is 0."
        },
        {
           "field": "text (const string)",
           "description": "Text to display with the shape."
        },
        {
           "field": "textcolor (series color)",
           "description": "Color of the text. Optional."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then plotchar style will be editable in Format dialog. Default is true."
        },
        {
           "field": "size (const string)",
           "description": "Size of characters on the chart. Default is size.auto."
        },
        {
           "field": "show_last (input int)",
           "description": "If set, defines the number of chars (from the last bar back to the past) to plot on chart."
        },
        {
           "field": "display (input plot_display)",
           "description": "Controls where the plot's information is displayed. Optional. The default is display.all."
        },
        {
           "field": "format (input string)",
           "description": "Determines format of plot's values. Supersedes the `format` parameter of the indicator or strategy functions. Optional. The default is the `format` value used by the indicator or strategy function."
        },
        {
           "field": "precision (input int)",
           "description": "Number of digits after the decimal point the plot's values show on the chart pane's y-axis, the script's status line, and the Data Window. Accepts an integer in range 0 to 16. Supersedes the `precision` parameter of the indicator or strategy functions. Optional. The default is the `precision` value used by the indicator or strategy function."
        },
        {
           "field": "force_overlay (const bool)",
           "description": "If true, the plotted results will display on the main chart pane, even when the script occupies a separate pane. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(plotshape)(?=\\s*\\()",
     "codeblock": [
        "plotshape(series, title, style, location, color, offset, text, textcolor, editable, size, show_last, display, format, precision, force_overlay) → void"
     ],
     "markdown": "Plots visual shapes on the chart.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_plotshape",
     "param": [
        {
           "field": "series (series int|float|bool)",
           "description": "Series of data to be plotted as shapes. Series is treated as a series of boolean values for all location values except location.absolute. Required argument."
        },
        {
           "field": "title (const string)",
           "description": "Title of the plot."
        },
        {
           "field": "style (input string)",
           "description": "Type of plot. Default value is shape.xcross."
        },
        {
           "field": "location (input string)",
           "description": "Location of shapes on the chart. Default value is location.abovebar."
        },
        {
           "field": "color (series color)",
           "description": "Color of the shapes. Optional."
        },
        {
           "field": "offset (series int)",
           "description": "Shifts shapes to the left or to the right on the given number of bars. Default is 0."
        },
        {
           "field": "text (const string)",
           "description": "Text to display with the shape."
        },
        {
           "field": "textcolor (series color)",
           "description": "Color of the text. Optional."
        },
        {
           "field": "editable (const bool)",
           "description": "If true then plotshape style will be editable in Format dialog. Default is true."
        },
        {
           "field": "size (const string)",
           "description": "Size of shapes on the chart. Default is size.auto."
        },
        {
           "field": "show_last (input int)",
           "description": "If set, defines the number of shapes (from the last bar back to the past) to plot on chart."
        },
        {
           "field": "display (input plot_display)",
           "description": "Controls where the plot's information is displayed. Optional. The default is display.all."
        },
        {
           "field": "format (input string)",
           "description": "Determines format of plot's values. Supersedes the `format` parameter of the indicator or strategy functions. Optional. The default is the `format` value used by the indicator or strategy function."
        },
        {
           "field": "precision (input int)",
           "description": "Number of digits after the decimal point the plot's values show on the chart pane's y-axis, the script's status line, and the Data Window. Accepts an integer in range 0 to 16. Supersedes the `precision` parameter of the indicator or strategy functions. Optional. The default is the `precision` value used by the indicator or strategy function."
        },
        {
           "field": "force_overlay (const bool)",
           "description": "If true, the plotted results will display on the main chart pane, even when the script occupies a separate pane. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(polyline\\.delete)(?=\\s*\\()",
     "codeblock": [
        "polyline.delete(id) → void"
     ],
     "markdown": "Deletes the specified polyline object. It has no effect if the `id` doesn't exist.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_polyline.delete",
     "param": [
        {
           "field": "id (series polyline)",
           "description": "The polyline ID to delete."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(polyline\\.new)(?=\\s*\\()",
     "codeblock": [
        "polyline.new(points, curved, closed, xloc, line_color, fill_color, line_style, line_width) → series polyline"
     ],
     "markdown": "Creates a new polyline instance and displays it on the chart, sequentially connecting all of the points in the `points` array with line segments. The segments in the drawing can be straight or curved depending on the `curved` parameter.",
     "returns": "The ID of a new polyline object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_polyline.new",
     "param": [
        {
           "field": "points (chart.point[])",
           "description": "An array of chart.point objects for the drawing to sequentially connect."
        },
        {
           "field": "curved (series bool)",
           "description": "If true, the drawing will connect all points from the `points` array using curved line segments. Optional. The default is false."
        },
        {
           "field": "closed (series bool)",
           "description": "If true, the drawing will also connect the first point to the last point from the `points` array, resulting in a closed polyline. Optional. The default is false."
        },
        {
           "field": "xloc (series string)",
           "description": "Determines the field of the chart.point objects in the `points` array that the polyline will use for its x-coordinates. Optional. The default is xloc.bar_index."
        },
        {
           "field": "line_color (series color)",
           "description": "The color of the line segments. Optional. The default is color.blue."
        },
        {
           "field": "fill_color (series color)",
           "description": "The fill color of the polyline. Optional. The default is na."
        },
        {
           "field": "line_style (series string)",
           "description": "The style of the polyline. Optional. The default is line.style_solid."
        },
        {
           "field": "line_width (series int)",
           "description": "The width of the line segments, expressed in pixels. Optional. The default is 1."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.currency_rate)(?=\\s*\\()",
     "codeblock": [
        "request.currency_rate(from, to, ignore_invalid_currency) → series float"
     ],
     "markdown": "Provides a daily rate that can be used to convert a value expressed in the `from` currency to another in the `to` currency.",
     "returns": "Daily currency rate.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.currency_rate",
     "param": [
        {
           "field": "from (simple string)",
           "description": "The currency in which the value to be converted is expressed."
        },
        {
           "field": "to (simple string)",
           "description": "The currency in which the value is to be converted."
        },
        {
           "field": "ignore_invalid_currency (simple bool)",
           "description": "Determines the behavior of the function if a conversion rate between the two currencies cannot be calculated: if false, the script will halt and return a runtime error; if true, the function will return na and execution will continue. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.dividends)(?=\\s*\\()",
     "codeblock": [
        "request.dividends(ticker, field, gaps, lookahead, ignore_invalid_symbol, currency) → series float"
     ],
     "markdown": "Requests dividends data for the specified symbol.",
     "returns": "Requested series, or 'na' if there is no dividends data for the specified symbol.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.dividends",
     "param": [
        {
           "field": "ticker (simple string)",
           "description": "Symbol. Note that the symbol should be passed with a prefix."
        },
        {
           "field": "field (simple string)",
           "description": "Input string. Default value is dividends.gross."
        },
        {
           "field": "gaps (simple barmerge_gaps)",
           "description": "Merge strategy for the requested data. Default value is barmerge.gaps_off."
        },
        {
           "field": "lookahead (simple barmerge_lookahead)",
           "description": "Merge strategy for the requested data position. Default value is barmerge.lookahead_off."
        },
        {
           "field": "ignore_invalid_symbol (input bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and return a runtime error; if true, the function will return na and execution will continue. Optional. The default value is false."
        },
        {
           "field": "currency (simple string)",
           "description": "Currency into which the symbol's currency-related dividends values are to be converted. The conversion rates used are based on the FX_IDC pairs' daily rates of the previous day. Optional. The default is syminfo.currency."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.earnings)(?=\\s*\\()",
     "codeblock": [
        "request.earnings(ticker, field, gaps, lookahead, ignore_invalid_symbol, currency) → series float"
     ],
     "markdown": "Requests earnings data for the specified symbol.",
     "returns": "Requested series, or 'na' if there is no earnings data for the specified symbol.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.earnings",
     "param": [
        {
           "field": "ticker (simple string)",
           "description": "Symbol. Note that the symbol should be passed with a prefix."
        },
        {
           "field": "field (simple string)",
           "description": "Input string. Default value is earnings.actual."
        },
        {
           "field": "gaps (simple barmerge_gaps)",
           "description": "Merge strategy for the requested data. Default value is barmerge.gaps_off."
        },
        {
           "field": "lookahead (simple barmerge_lookahead)",
           "description": "Merge strategy for the requested data position. Default value is barmerge.lookahead_off."
        },
        {
           "field": "ignore_invalid_symbol (input bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and return a runtime error; if true, the function will return na and execution will continue. Optional. The default value is false."
        },
        {
           "field": "currency (simple string)",
           "description": "Currency into which the symbol's currency-related earnings values are to be converted. The conversion rates used are based on the FX_IDC pairs' daily rates of the previous day. Optional. The default is syminfo.currency."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.economic)(?=\\s*\\()",
     "codeblock": [
        "request.economic(country_code, field, gaps, ignore_invalid_symbol) → series float"
     ],
     "markdown": "Requests economic data for a symbol. Economic data includes information such as the state of a country's economy (GDP, inflation rate, etc.) or of a particular industry (steel production, ICU beds, etc.).",
     "returns": "Requested series.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.economic",
     "param": [
        {
           "field": "country_code (simple string)",
           "description": "The code of the country (e.g. \"US\") or the region (e.g. \"EU\") for which the economic data is requested. The [Help Center article](https://www.tradingview.com/?solution=43000665359) lists the countries and their codes."
        },
        {
           "field": "field (simple string)",
           "description": "The code of the requested economic metric (e.g., \"GDP\"). The [Help Center article](https://www.tradingview.com/?solution=43000665359) lists the metrics and their codes."
        },
        {
           "field": "gaps (simple barmerge_gaps)",
           "description": "Specifies how the returned values are merged on chart bars. Optional. The default is barmerge.gaps_off."
        },
        {
           "field": "ignore_invalid_symbol (input bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and return a runtime error; if true, the function will return na and execution will continue. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.financial)(?=\\s*\\()",
     "codeblock": [
        "request.financial(symbol, financial_id, period, gaps, ignore_invalid_symbol, currency) → series float"
     ],
     "markdown": "Requests financial series for symbol.",
     "returns": "Requested series.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.financial",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "Symbol. Note that the symbol should be passed with a prefix."
        },
        {
           "field": "financial_id (simple string)",
           "description": "Financial identifier. The [Help Center article](https://www.tradingview.com/?solution=43000564727) lists the available Financial Ids."
        },
        {
           "field": "period (simple string)",
           "description": "Reporting period."
        },
        {
           "field": "gaps (simple barmerge_gaps)",
           "description": "Merge strategy for the requested data. Default value is barmerge.gaps_off."
        },
        {
           "field": "ignore_invalid_symbol (input bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and return a runtime error; if true, the function will return na and execution will continue. Optional. The default value is false."
        },
        {
           "field": "currency (simple string)",
           "description": "Currency into which the symbol's financial metrics are to be converted. The conversion rates used are based on the FX_IDC pairs' daily rates of the previous day. Optional. The default is syminfo.currency."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.quandl)(?=\\s*\\()",
     "codeblock": [
        "request.quandl(ticker, gaps, index, ignore_invalid_symbol) → series float"
     ],
     "markdown": "Requests Nasdaq Data Link (formerly Quandl) data for a symbol.",
     "returns": "Requested series.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.quandl",
     "param": [
        {
           "field": "ticker (simple string)",
           "description": "Symbol. Note that the name of a time series and Quandl data feed should be divided by a forward slash."
        },
        {
           "field": "gaps (simple barmerge_gaps)",
           "description": "Merge strategy for the requested data. Default value is barmerge.gaps_off."
        },
        {
           "field": "index (simple int)",
           "description": "A Quandl time-series column index."
        },
        {
           "field": "ignore_invalid_symbol (input bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and return a runtime error; if true, the function will return na and execution will continue. Optional. The default value is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.security)(?=\\s*\\()",
     "codeblock": [
        "request.security(symbol, timeframe, expression, gaps, lookahead, ignore_invalid_symbol, currency, calc_bars_count) → series <type>"
     ],
     "markdown": "Requests data from another symbol and/or timeframe.",
     "returns": "A result determined by `expression`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.security",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "Symbol to request the data from."
        },
        {
           "field": "timeframe (simple string)",
           "description": "Timeframe of the requested data."
        },
        {
           "field": "expression (any)",
           "description": "An expression to be calculated and returned from the request.security call's context."
        },
        {
           "field": "gaps (simple barmerge_gaps)",
           "description": "Specifies how the returned values are merged on chart bars. Optional. The default is barmerge.gaps_off."
        },
        {
           "field": "lookahead (simple barmerge_lookahead)",
           "description": "On historical bars only, returns data from the timeframe before it elapses. Has no effect on realtime values. Optional. The default is barmerge.lookahead_off."
        },
        {
           "field": "ignore_invalid_symbol (input bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and throw a runtime error; if true, the function will return na and execution will continue. Optional. The default is false."
        },
        {
           "field": "currency (simple string)",
           "description": "Currency into which values expressed in currency units are to be converted. The conversion rates used are based on the FX_IDC pairs' daily rates of the previous day. Optional. The default is syminfo.currency."
        },
        {
           "field": "calc_bars_count (simple int)",
           "description": "If specified, the function will only request this number of values from the end of the symbol's history and calculate `expression` as if these values are the only available data, which might improve calculation speed in some cases. Optional. The default is na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.security_lower_tf)(?=\\s*\\()",
     "codeblock": [
        "request.security_lower_tf(symbol, timeframe, expression, ignore_invalid_symbol, currency, ignore_invalid_timeframe, calc_bars_count) → array<type>"
     ],
     "markdown": "Requests data from a specified symbol from a lower timeframe than the chart's. The function returns an array containing one element for each closed lower timeframe intrabar inside the current chart's bar.",
     "returns": "An array of a type determined by `expression`, or a tuple of these.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.security_lower_tf",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "Symbol to request the data from."
        },
        {
           "field": "timeframe (simple string)",
           "description": "Timeframe of the requested data."
        },
        {
           "field": "expression (any)",
           "description": "An expression to be calculated and returned from the function call's context."
        },
        {
           "field": "ignore_invalid_symbol (const bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and throw a runtime error; if true, the function will return na and execution will continue. Optional. The default is false."
        },
        {
           "field": "currency (simple string)",
           "description": "Currency into which values expressed in currency units are to be converted. Optional. The default is syminfo.currency."
        },
        {
           "field": "ignore_invalid_timeframe (const bool)",
           "description": "Determines the behavior of the function when the chart's timeframe is smaller than the `timeframe` used in the function call. If false, the script will halt and throw a runtime error. If true, the function will return na and execution will continue. Optional. The default is false."
        },
        {
           "field": "calc_bars_count (simple int)",
           "description": "If specified, the function will only request this number of values from the end of the symbol's history and calculate `expression` as if these values are the only available data, which might improve calculation speed in some cases. Optional. The default is na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.seed)(?=\\s*\\()",
     "codeblock": [
        "request.seed(source, symbol, expression, ignore_invalid_symbol, calc_bars_count) → series <type>"
     ],
     "markdown": "Requests data from a user-maintained GitHub repository and returns it as a series.",
     "returns": "Requested series or tuple of series, which may include array/matrix Ids.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.seed",
     "param": [
        {
           "field": "source (simple string)",
           "description": "Name of the GitHub repository."
        },
        {
           "field": "symbol (simple string)",
           "description": "Name of the file in the GitHub repository containing the data. The \".csv\" file extension must not be included."
        },
        {
           "field": "expression (\\<arg_expr_type\\>)",
           "description": "An expression to be calculated and returned from the requested symbol's context."
        },
        {
           "field": "ignore_invalid_symbol (input bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and throw a runtime error; if true, the function will return na and execution will continue. Optional. The default is false."
        },
        {
           "field": "calc_bars_count (simple int)",
           "description": "If specified, the function will only request this number of values from the end of the symbol's history and calculate `expression` as if these values are the only available data, which might improve calculation speed in some cases. Optional. The default is na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(request\\.splits)(?=\\s*\\()",
     "codeblock": [
        "request.splits(ticker, field, gaps, lookahead, ignore_invalid_symbol) → series float"
     ],
     "markdown": "Requests splits data for the specified symbol.",
     "returns": "Requested series, or 'na' if there is no splits data for the specified symbol.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_request.splits",
     "param": [
        {
           "field": "ticker (simple string)",
           "description": "Symbol. Note that the symbol should be passed with a prefix."
        },
        {
           "field": "field (simple string)",
           "description": "Input string."
        },
        {
           "field": "gaps (simple barmerge_gaps)",
           "description": "Merge strategy for the requested data. Default value is barmerge.gaps_off."
        },
        {
           "field": "lookahead (simple barmerge_lookahead)",
           "description": "Merge strategy for the requested data position. Default value is barmerge.lookahead_off."
        },
        {
           "field": "ignore_invalid_symbol (input bool)",
           "description": "Determines the behavior of the function if the specified symbol is not found: if false, the script will halt and return a runtime error; if true, the function will return na and execution will continue. Optional. The default value is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(runtime\\.error)(?=\\s*\\()",
     "codeblock": [
        "runtime.error(message) → void"
     ],
     "markdown": "When called, causes a runtime error with the error message specified in the `message` argument.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_runtime.error",
     "param": [
        {
           "field": "message (series string)",
           "description": "Error message."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(second)(?=\\s*\\()",
     "codeblock": [
        "second(time, timezone) → series int"
     ],
     "markdown": "Returns second (in exchange timezone) for provided UNIX time.",
     "returns": "Second (in exchange timezone) for provided UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_second",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time in milliseconds."
        },
        {
           "field": "timezone (series string)",
           "description": "Allows adjusting the returned value to a time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.contains)(?=\\s*\\()",
     "codeblock": [
        "str.contains(source, str) → bool"
     ],
     "markdown": "Returns true if the `source` string contains the `str` substring, false otherwise.",
     "returns": "True if the `str` was found in the `source` string, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.contains",
     "param": [
        {
           "field": "source (string)",
           "description": "Source string."
        },
        {
           "field": "str (string)",
           "description": "The substring to search for."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.endswith)(?=\\s*\\()",
     "codeblock": [
        "str.endswith(source, str) → bool"
     ],
     "markdown": "Returns true if the `source` string ends with the substring specified in `str`, false otherwise.",
     "returns": "True if the `source` string ends with the substring specified in `str`, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.endswith",
     "param": [
        {
           "field": "source (string)",
           "description": "Source string."
        },
        {
           "field": "str (string)",
           "description": "The substring to search for."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.format)(?=\\s*\\()",
     "codeblock": [
        "str.format(formatString, arg0, arg1, ...) → string"
     ],
     "markdown": "Converts the formatting string and value(s) into a formatted string. The formatting string can contain literal text and one placeholder in curly braces `{}` for each value to be formatted. Each placeholder consists of the index of the required argument (beginning at 0) that will replace it, and an optional format specifier. The index represents the position of that argument in the str.format argument list.",
     "returns": "The formatted string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.format",
     "param": [
        {
           "field": "formatString (string)",
           "description": "Format string."
        },
        {
           "field": "arg0, arg1, ... (int|float|bool|string)",
           "description": "Values to format."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.format_time)(?=\\s*\\()",
     "codeblock": [
        "str.format_time(time, format, timezone) → series string"
     ],
     "markdown": "Converts the `time` timestamp into a string formatted according to `format` and `timezone`.",
     "returns": "The formatted string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.format_time",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time, in milliseconds."
        },
        {
           "field": "format (series string)",
           "description": "A format string specifying the date/time representation of the `time` in the returned string. Optional. The default is \"yyyy-MM-dd'T'HH:mm:ssZ\""
        },
        {
           "field": "timezone (series string)",
           "description": "Allows adjusting the returned value to a time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.length)(?=\\s*\\()",
     "codeblock": [
        "str.length(string) → int"
     ],
     "markdown": "Returns an integer corresponding to the amount of chars in that string.",
     "returns": "The number of chars in source string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.length",
     "param": [
        {
           "field": "string (string)",
           "description": "Source string."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.lower)(?=\\s*\\()",
     "codeblock": [
        "str.lower(source) → string"
     ],
     "markdown": "Returns a new string with all letters converted to lowercase.",
     "returns": "A new string with all letters converted to lowercase.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.lower",
     "param": [
        {
           "field": "source (string)",
           "description": "String to be converted."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.match)(?=\\s*\\()",
     "codeblock": [
        "str.match(source, regex) → string"
     ],
     "markdown": "Returns the new substring of the `source` string if it matches a `regex` regular expression, an empty string otherwise.",
     "returns": "The new substring of the `source` string if it matches a `regex` regular expression, an empty string otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.match",
     "param": [
        {
           "field": "source (string)",
           "description": "Source string."
        },
        {
           "field": "regex (string)",
           "description": "The regular expression to which this string is to be matched."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.pos)(?=\\s*\\()",
     "codeblock": [
        "str.pos(source, str) → int"
     ],
     "markdown": "Returns the position of the first occurrence of the `str` string in the `source` string, 'na' otherwise.",
     "returns": "Position of the `str` string in the `source` string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.pos",
     "param": [
        {
           "field": "source (string)",
           "description": "Source string."
        },
        {
           "field": "str (string)",
           "description": "The substring to search for."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.repeat)(?=\\s*\\()",
     "codeblock": [
        "str.repeat(source, repeat, separator) → string"
     ],
     "markdown": "Constructs a new string containing the `source` string repeated `repeat` times with the `separator` injected between each repeated instance.",
     "returns": "Processed string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.repeat",
     "param": [
        {
           "field": "source (string)",
           "description": "String to repeat."
        },
        {
           "field": "repeat (int)",
           "description": "Number of times to repeat the `source` string. Must be greater than or equal to 0."
        },
        {
           "field": "separator (string)",
           "description": "String to inject between repeated values. Optional. The default is empty string."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.replace)(?=\\s*\\()",
     "codeblock": [
        "str.replace(source, target, replacement, occurrence) → string"
     ],
     "markdown": "Returns a new string with the Nth occurrence of the `target` string replaced by the `replacement` string, where N is specified in `occurrence`.",
     "returns": "Processed string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.replace",
     "param": [
        {
           "field": "source (string)",
           "description": "Source string."
        },
        {
           "field": "target (string)",
           "description": "String to be replaced."
        },
        {
           "field": "replacement (string)",
           "description": "String to be inserted instead of the target string."
        },
        {
           "field": "occurrence (int)",
           "description": "N-th occurrence of the target string to replace. Indexing starts at 0 for the first match. Optional. Default value is 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.replace_all)(?=\\s*\\()",
     "codeblock": [
        "str.replace_all(source, target, replacement) → string"
     ],
     "markdown": "Replaces each occurrence of the target string in the source string with the replacement string.",
     "returns": "Processed string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.replace_all",
     "param": [
        {
           "field": "source (string)",
           "description": "Source string."
        },
        {
           "field": "target (string)",
           "description": "String to be replaced."
        },
        {
           "field": "replacement (string)",
           "description": "String to be substituted for each occurrence of target string."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.split)(?=\\s*\\()",
     "codeblock": [
        "str.split(string, separator) → string[]"
     ],
     "markdown": "Divides a string into an array of substrings and returns its array id.",
     "returns": "The id of an array of strings.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.split",
     "param": [
        {
           "field": "string (series string)",
           "description": "Source string."
        },
        {
           "field": "separator (series string)",
           "description": "The string separating each substring."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.startswith)(?=\\s*\\()",
     "codeblock": [
        "str.startswith(source, str) → bool"
     ],
     "markdown": "Returns true if the `source` string starts with the substring specified in `str`, false otherwise.",
     "returns": "True if the `source` string starts with the substring specified in `str`, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.startswith",
     "param": [
        {
           "field": "source (string)",
           "description": "Source string."
        },
        {
           "field": "str (string)",
           "description": "The substring to search for."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.substring)(?=\\s*\\()",
     "codeblock": [
        "str.substring(source, begin_pos, end_pos) → string"
     ],
     "markdown": "Returns a new string that is a substring of the `source` string. The substring begins with the character at the index specified by `begin_pos` and extends to 'end_pos - 1' of the `source` string.",
     "returns": "The substring extracted from the source string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.substring",
     "param": [
        {
           "field": "source (string)",
           "description": "Source string from which to extract the substring."
        },
        {
           "field": "begin_pos (int)",
           "description": "The beginning position of the extracted substring. It is inclusive (the extracted substring includes the character at that position)."
        },
        {
           "field": "end_pos (int)",
           "description": "The ending position. It is exclusive (the extracted string does NOT include that position's character). Optional. The default is the length of the `source` string."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.tonumber)(?=\\s*\\()",
     "codeblock": [
        "str.tonumber(string) → float"
     ],
     "markdown": "Converts a value represented in `string` to its \"float\" equivalent.",
     "returns": "A \"float\" equivalent of the value in `string`. If the value is not a properly formed integer or floating point value, the function returns na.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.tonumber",
     "param": [
        {
           "field": "string (string)",
           "description": "String containing the representation of an integer or floating point value."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.tostring)(?=\\s*\\()",
     "codeblock": [
        "str.tostring(value, format) → string"
     ],
     "markdown": "Returns the string representation of the `value` argument.<p/>If the `value` argument is a string, it is returned as is.<p/>When the `value` is na, the function returns the string \"NaN\".",
     "returns": "String representation of the `value` argument.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.tostring",
     "param": [
        {
           "field": "value (int|float)",
           "description": "Value or array ID whose elements are converted to a string."
        },
        {
           "field": "format (string)",
           "description": "Format string. Optional. The default value is '#.##########'."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.trim)(?=\\s*\\()",
     "codeblock": [
        "str.trim(source) → string"
     ],
     "markdown": "Constructs a new string with all consecutive whitespaces and other control characters removed from the left and right of the `source`. Returns an empty string (\"\") if the result is empty after the trim or if the `source` is na.",
     "returns": "Processed string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.trim",
     "param": [
        {
           "field": "source (string)",
           "description": "String to trim."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(str\\.upper)(?=\\s*\\()",
     "codeblock": [
        "str.upper(source) → string"
     ],
     "markdown": "Returns a new string with all letters converted to uppercase.",
     "returns": "A new string with all letters converted to uppercase.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_str.upper",
     "param": [
        {
           "field": "source (string)",
           "description": "String to be converted."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy)(?=\\s*\\()",
     "codeblock": [
        "strategy(title, shorttitle, overlay, format, precision, scale, pyramiding, calc_on_order_fills, calc_on_every_tick, max_bars_back, backtest_fill_limits_assumption, default_qty_type, default_qty_value, initial_capital, currency, slippage, commission_type, commission_value, process_orders_on_close, close_entries_rule, margin_long, margin_short, explicit_plot_zorder, max_lines_count, max_labels_count, max_boxes_count, calc_bars_count, risk_free_rate, use_bar_magnifier, fill_orders_on_standard_ohlc, max_polylines_count) → void"
     ],
     "markdown": "This declaration statement designates the script as a strategy and sets a number of strategy-related properties.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy",
     "param": [
        {
           "field": "title (const string)",
           "description": "The title of the script."
        },
        {
           "field": "shorttitle (const string)",
           "description": "The script's display name on charts. If specified, it will replace the `title` argument in most chart-related windows. Optional."
        },
        {
           "field": "overlay (const bool)",
           "description": "If true, the strategy will be displayed over the chart. If false, it will be added in a separate pane. Optional. The default is false."
        },
        {
           "field": "format (const string)",
           "description": "Specifies the formatting of the script's displayed values. Optional. The default is format.inherit."
        },
        {
           "field": "precision (const int)",
           "description": "Specifies the number of digits after the floating point of the script's displayed values. Must be a non-negative integer no greater than 16. Optional. The default is inherited from the precision of the chart's symbol."
        },
        {
           "field": "scale (const scale_type)",
           "description": "The price scale used. Optional. By default, the script uses the same scale as the chart."
        },
        {
           "field": "pyramiding (const int)",
           "description": "The maximum number of entries allowed in the same direction. Optional. The default is 0."
        },
        {
           "field": "calc_on_order_fills (const bool)",
           "description": "Specifies whether the strategy should be recalculated after an order is filled. Optional. The default is false."
        },
        {
           "field": "calc_on_every_tick (const bool)",
           "description": "Specifies whether the strategy should be recalculated on each realtime tick. Optional. The default is false."
        },
        {
           "field": "max_bars_back (const int)",
           "description": "The length of the historical buffer the script keeps for every variable and function, which determines how many past values can be referenced using the `[]` history-referencing operator. Optional. The default is 0."
        },
        {
           "field": "backtest_fill_limits_assumption (const int)",
           "description": "Limit order execution threshold in ticks. Optional. The default is 0."
        },
        {
           "field": "default_qty_type (const string)",
           "description": "Specifies the units used for `default_qty_value`. Optional. The default is strategy.fixed."
        },
        {
           "field": "default_qty_value (const int|float)",
           "description": "The default quantity to trade. Optional. The default is 1."
        },
        {
           "field": "initial_capital (const int|float)",
           "description": "The amount of funds initially available for the strategy to trade, in units of `currency`. Optional. The default is 1000000."
        },
        {
           "field": "currency (const string)",
           "description": "Currency used by the strategy in currency-related calculations. Optional. The default is currency.NONE, in which case the chart's currency is used."
        },
        {
           "field": "slippage (const int)",
           "description": "Slippage expressed in ticks. Optional. The default is 0."
        },
        {
           "field": "commission_type (const string)",
           "description": "Determines what the number passed to the `commission_value`. Optional. The default is strategy.commission.percent."
        },
        {
           "field": "commission_value (const int|float)",
           "description": "Commission applied to the strategy's orders in units determined by the argument passed to the `commission_type` parameter. Optional. The default is 0."
        },
        {
           "field": "process_orders_on_close (const bool)",
           "description": "When set to true, generates an additional attempt to execute orders after a bar closes and strategy calculations are completed. Optional. The default is false."
        },
        {
           "field": "close_entries_rule (const string)",
           "description": "Determines the order in which trades are closed. Optional. The default is \"FIFO\"."
        },
        {
           "field": "margin_long (const int|float)",
           "description": "Margin long is the percentage of the purchase price of a security that must be covered by cash or collateral for long positions. Must be a non-negative number. Optional. The default is 0, in which case the strategy does not enforce any limits on position size."
        },
        {
           "field": "margin_short (const int|float)",
           "description": "Margin short is the percentage of the purchase price of a security that must be covered by cash or collateral for short positions. Must be a non-negative number. Optional. The default is 0, in which case the strategy does not enforce any limits on position size."
        },
        {
           "field": "explicit_plot_zorder (const bool)",
           "description": "Specifies the order in which the script's plots, fills, and hlines are rendered. Optional. The default is false."
        },
        {
           "field": "max_lines_count (const int)",
           "description": "The number of last line drawings displayed. Optional. The default is 50."
        },
        {
           "field": "max_labels_count (const int)",
           "description": "The number of last label drawings displayed. Optional. The default is 50."
        },
        {
           "field": "max_boxes_count (const int)",
           "description": "The number of last box drawings displayed. Optional. The default is 50."
        },
        {
           "field": "calc_bars_count (const int)",
           "description": "Limits the initial calculation of a script to the last number of bars specified. When specified, a \"Calculated bars\" field will be included in the \"Calculation\" section of the script's \"Settings/Inputs\" tab. Optional. The default is 0, in which case the script executes on all available bars."
        },
        {
           "field": "risk_free_rate (const int|float)",
           "description": "The risk-free rate of return is the annual percentage change in the value of an investment with minimal or zero risk. Optional. The default is 2."
        },
        {
           "field": "use_bar_magnifier (const bool)",
           "description": "When true, the Broker Emulator uses lower timeframe data during history backtesting to achieve more realistic results. Optional. The default is false."
        },
        {
           "field": "fill_orders_on_standard_ohlc (const bool)",
           "description": "When true, forces strategies running on Heikin Ashi charts to fill orders using actual OHLC prices, for more realistic results. Optional. The default is false."
        },
        {
           "field": "max_polylines_count (const int)",
           "description": "The number of last polyline drawings displayed. Optional. The default is 50."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.cancel)(?=\\s*\\()",
     "codeblock": [
        "strategy.cancel(id) → void"
     ],
     "markdown": "Cancels or deactivates pending orders by referencing their names.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.cancel",
     "param": [
        {
           "field": "id (series string)",
           "description": "The order identifier."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.cancel_all)(?=\\s*\\()",
     "codeblock": [
        "strategy.cancel_all() → void"
     ],
     "markdown": "Cancels or deactivates all pending orders.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.cancel_all",
     "param": []
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.close)(?=\\s*\\()",
     "codeblock": [
        "strategy.close(id, comment, qty, qty_percent, alert_message, immediately, disable_alert) → void"
     ],
     "markdown": "Exits from the entry with the specified ID. If there were multiple entry orders with the same ID, all of them are exited at once. If there are no open entries with the specified ID by the moment the command is triggered, the command will not come into effect. The command uses market order. Every entry is closed by a separate market order.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.close",
     "param": [
        {
           "field": "id (series string)",
           "description": "The order identifier."
        },
        {
           "field": "comment (series string)",
           "description": "Additional notes on the order. Optional."
        },
        {
           "field": "qty (series int|float)",
           "description": "Number of contracts/shares/lots/units to exit a trade with. Optional. The default value is 'NaN'."
        },
        {
           "field": "qty_percent (series int|float)",
           "description": "Defines the percentage (0-100) of the position to close. Its priority is lower than that of the `qty` parameter. Optional. The default is 100."
        },
        {
           "field": "alert_message (series string)",
           "description": "Replaces the `{{strategy.order.alert_message}}` placeholder when it is used in the \"Create Alert\" dialog box's \"Message\" field. Optional."
        },
        {
           "field": "immediately (series bool)",
           "description": "If true, the closing order will be executed on the tick where it has been placed, ignoring the strategy parameters that restrict the order execution to the open of the next bar. Optional. The default is false."
        },
        {
           "field": "disable_alert (series bool)",
           "description": "If true when the function creates an order, the strategy alert will not fire upon the execution of that order. The parameter accepts a 'series bool' argument, allowing users to control which orders will trigger alerts when they fill. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.close_all)(?=\\s*\\()",
     "codeblock": [
        "strategy.close_all(comment, alert_message, immediately, disable_alert) → void"
     ],
     "markdown": "Exits the current market position, making it flat.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.close_all",
     "param": [
        {
           "field": "comment (series string)",
           "description": "Additional notes on the order. Optional."
        },
        {
           "field": "alert_message (series string)",
           "description": "Replaces the `{{strategy.order.alert_message}}` placeholder when it is used in the \"Create Alert\" dialog box's \"Message\" field. Optional."
        },
        {
           "field": "immediately (series bool)",
           "description": "If true, the closing order will be executed on the tick where it has been placed, ignoring the strategy parameters that restrict the order execution to the open of the next bar. Optional. The default is false."
        },
        {
           "field": "disable_alert (series bool)",
           "description": "If true when the function creates an order, the strategy alert will not fire upon the execution of that order. The parameter accepts a 'series bool' argument, allowing users to control which orders will trigger alerts when they fill. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.commission)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.commission(trade_num) → series float"
     ],
     "markdown": "Returns the sum of entry and exit fees paid in the closed trade, expressed in strategy.account_currency.",
     "returns": "The sum of entry and exit fees paid in the closed trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.commission",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.entry_bar_index)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.entry_bar_index(trade_num) → series int"
     ],
     "markdown": "Returns the bar_index of the closed trade's entry.",
     "returns": "The bar_index of the closed trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.entry_bar_index",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.entry_comment)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.entry_comment(trade_num) → series string"
     ],
     "markdown": "Returns the comment message of the closed trade's entry, or na if there is no entry with this `trade_num`.",
     "returns": "The comment message of the closed trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.entry_comment",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.entry_id)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.entry_id(trade_num) → series string"
     ],
     "markdown": "Returns the id of the closed trade's entry.",
     "returns": "The id of the closed trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.entry_id",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.entry_price)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.entry_price(trade_num) → series float"
     ],
     "markdown": "Returns the price of the closed trade's entry.",
     "returns": "The price of the closed trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.entry_price",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.entry_time)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.entry_time(trade_num) → series int"
     ],
     "markdown": "Returns the UNIX time of the closed trade's entry.",
     "returns": "The UNIX time of the closed trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.entry_time",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.exit_bar_index)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.exit_bar_index(trade_num) → series int"
     ],
     "markdown": "Returns the bar_index of the closed trade's exit.",
     "returns": "The bar_index of the closed trade's exit.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.exit_bar_index",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.exit_comment)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.exit_comment(trade_num) → series string"
     ],
     "markdown": "Returns the comment message of the closed trade's exit, or na if there is no entry with this `trade_num`.",
     "returns": "The comment message of the closed trade's exit.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.exit_comment",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.exit_id)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.exit_id(trade_num) → series string"
     ],
     "markdown": "Returns the id of the closed trade's exit.",
     "returns": "The id of the closed trade's exit.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.exit_id",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.exit_price)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.exit_price(trade_num) → series float"
     ],
     "markdown": "Returns the price of the closed trade's exit.",
     "returns": "The price of the closed trade's exit.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.exit_price",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.exit_time)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.exit_time(trade_num) → series int"
     ],
     "markdown": "Returns the UNIX time of the closed trade's exit.",
     "returns": "The UNIX time of the closed trade's exit.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.exit_time",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.max_drawdown_percent)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.max_drawdown_percent(trade_num) → series float"
     ],
     "markdown": "Returns the maximum drawdown of the closed trade, i.e., the maximum possible loss during the trade, expressed as a percentage and calculated by formula: `Lowest Value During Trade / (Entry Price x Quantity) * 100`.",
     "returns": "The maximum drawdown of the closed trade in percentage.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.max_drawdown_percent",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.max_runup_percent)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.max_runup_percent(trade_num) → series float"
     ],
     "markdown": "Returns the maximum run-up of the closed trade, i.e., the maximum possible profit during the trade, expressed as a percentage and calculated by formula: `Highest Value During Trade / (Entry Price x Quantity) * 100`.",
     "returns": "The maximum run-up of the closed trade in percentage.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.max_runup_percent",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.profit_percent)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.profit_percent(trade_num) → series float"
     ],
     "markdown": "Returns the profit/loss value of the closed trade, expressed as a percentage. Losses are expressed as negative values.",
     "returns": "The profit/loss value of the closed trade in percentage.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.profit_percent",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.max_drawdown)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.max_drawdown(trade_num) → series float"
     ],
     "markdown": "Returns the maximum drawdown of the closed trade, i.e., the maximum possible loss during the trade, expressed in strategy.account_currency.",
     "returns": "The maximum drawdown of the closed trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.max_drawdown",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.max_runup)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.max_runup(trade_num) → series float"
     ],
     "markdown": "Returns the maximum run up of the closed trade, i.e., the maximum possible profit during the trade, expressed in strategy.account_currency.",
     "returns": "The maximum run up of the closed trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.max_runup",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.profit)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.profit(trade_num) → series float"
     ],
     "markdown": "Returns the profit or loss of the closed trade. Losses are expressed as negative values.",
     "returns": "The profit or loss of the closed trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.profit",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades\\.size)(?=\\s*\\()",
     "codeblock": [
        "strategy.closedtrades.size(trade_num) → series float"
     ],
     "markdown": "Returns the direction and the number of contracts traded in the closed trade. If the value is > 0, the market position was long. If the value is < 0, the market position was short.",
     "returns": "The direction and the number of contracts traded in the closed trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.closedtrades.size",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the closed trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.convert_to_account)(?=\\s*\\()",
     "codeblock": [
        "strategy.convert_to_account(value) → series float"
     ],
     "markdown": "Converts the value from the currency that the symbol on the chart is traded in (syminfo.currency) to the currency used by the strategy (strategy.account_currency).",
     "returns": "Converted value in the currency used by the strategy.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.convert_to_account",
     "param": [
        {
           "field": "value (series int|float)",
           "description": "The value to be converted."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.convert_to_symbol)(?=\\s*\\()",
     "codeblock": [
        "strategy.convert_to_symbol(value) → series float"
     ],
     "markdown": "Converts the value from the currency used by the strategy (strategy.account_currency) to the currency that the symbol on the chart is traded in (syminfo.currency).",
     "returns": "Converted value in the currency that the symbol on the chart is traded in.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.convert_to_symbol",
     "param": [
        {
           "field": "value (series int|float)",
           "description": "The value to be converted."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.default_entry_qty)(?=\\s*\\()",
     "codeblock": [
        "strategy.default_entry_qty(fill_price) → series float"
     ],
     "markdown": "Calculates the default quantity, in units, of an entry order from strategy.entry or strategy.order if it were to fill at the specified `fill_price` value.",
     "returns": "Tthe default quantity of an entry order.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.default_entry_qty",
     "param": [
        {
           "field": "fill_price (series int|float)",
           "description": "The fill price for which to calculate the default order quantity."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.entry)(?=\\s*\\()",
     "codeblock": [
        "strategy.entry(id, direction, qty, limit, stop, oca_name, oca_type, comment, alert_message, disable_alert) → void"
     ],
     "markdown": "It is a command to enter market position. If an order with the same ID is already pending, it is possible to modify the order. If there is no order with the specified ID, a new order is placed.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.entry",
     "param": [
        {
           "field": "id (series string)",
           "description": "The order identifier. It is possible to cancel or modify an order by referencing its identifier."
        },
        {
           "field": "direction (series strategy_direction)",
           "description": "Market position direction."
        },
        {
           "field": "qty (series int|float)",
           "description": "Number of contracts/shares/lots/units to trade. Optional. The default value is 'NaN'."
        },
        {
           "field": "limit (series int|float)",
           "description": "Limit price of the order. If it is specified, the order type is either 'limit', or 'stop-limit'. 'NaN' should be specified for any other order type. Optional."
        },
        {
           "field": "stop (series int|float)",
           "description": "Stop price of the order. If it is specified, the order type is either 'stop', or 'stop-limit'. 'NaN' should be specified for any other order type. Optional."
        },
        {
           "field": "oca_name (series string)",
           "description": "Name of the OCA group the order belongs to. If the order should not belong to any particular OCA group, there should be an empty string. Optional."
        },
        {
           "field": "oca_type (input string)",
           "description": "Type of the OCA group. Optional."
        },
        {
           "field": "comment (series string)",
           "description": "Additional notes on the order. Optional."
        },
        {
           "field": "alert_message (series string)",
           "description": "Replaces the `{{strategy.order.alert_message}}` placeholder when it is used in the \"Create Alert\" dialog box's \"Message\" field. Optional."
        },
        {
           "field": "disable_alert (series bool)",
           "description": "If true when the function creates an order, the strategy alert will not fire upon the execution of that order. The parameter accepts a 'series bool' argument, allowing users to control which orders will trigger alerts when they fill. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.exit)(?=\\s*\\()",
     "codeblock": [
        "strategy.exit(id, from_entry, qty, qty_percent, profit, limit, loss, stop, trail_price, trail_points, trail_offset, oca_name, comment, comment_profit, comment_loss, comment_trailing, alert_message, alert_profit, alert_loss, alert_trailing, disable_alert) → void"
     ],
     "markdown": "It is a command to exit either a specific entry, or whole market position. If an order with the same ID is already pending, it is possible to modify the order. If an entry order was not filled, but an exit order is generated, the exit order will wait till entry order is filled and then the exit order is placed.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.exit",
     "param": [
        {
           "field": "id (series string)",
           "description": "The order identifier. It is possible to cancel or modify an order by referencing its identifier."
        },
        {
           "field": "from_entry (series string)",
           "description": "The identifier of a specific entry order to exit from it. To exit all entries an empty string should be used. Optional. The default values is empty string."
        },
        {
           "field": "qty (series int|float)",
           "description": "Number of contracts/shares/lots/units to exit a trade with. Optional. The default value is 'NaN'."
        },
        {
           "field": "qty_percent (series int|float)",
           "description": "Defines the percentage of (0-100) the position to close. Its priority is lower than that of the 'qty' parameter. Optional. The default is 100."
        },
        {
           "field": "profit (series int|float)",
           "description": "Profit target (specified in ticks). If it is specified, a limit order is placed to exit market position when the specified amount of profit (in ticks) is reached. Optional. The default value is 'NaN'."
        },
        {
           "field": "limit (series int|float)",
           "description": "Profit target (requires a specific price). If it is specified, a limit order is placed to exit market position at the specified price (or better). Priority of the parameter 'limit' is higher than priority of the parameter 'profit' ('limit' is used instead of 'profit', if its value is not 'NaN'). Optional. The default value is 'NaN'."
        },
        {
           "field": "loss (series int|float)",
           "description": "Stop loss (specified in ticks). If it is specified, a stop order is placed to exit market position when the specified amount of loss (in ticks) is reached. Optional. The default value is 'NaN'."
        },
        {
           "field": "stop (series int|float)",
           "description": "Stop loss (requires a specific price). If it is specified, a stop order is placed to exit market position at the specified price (or worse). Priority of the parameter 'stop' is higher than priority of the parameter 'loss' ('stop' is used instead of 'loss', if its value is not 'NaN'). Optional. The default value is 'NaN'."
        },
        {
           "field": "trail_price (series int|float)",
           "description": "Trailing stop activation level (requires a specific price). If it is specified, a trailing stop order will be placed when the specified price level is reached. The offset (in ticks) to determine initial price of the trailing stop order is specified in the `trail_offset` parameter. Optional. The default value is 'NaN'."
        },
        {
           "field": "trail_points (series int|float)",
           "description": "Trailing stop activation level (profit specified in ticks). If it is specified, a trailing stop order will be placed when the calculated price level (specified amount of profit) is reached. The offset (in ticks) to determine initial price of the trailing stop order is specified in the `trail_offset` parameter. Optional. The default value is 'NaN'."
        },
        {
           "field": "trail_offset (series int|float)",
           "description": "Trailing stop price (specified in ticks). The offset in ticks to determine initial price of the trailing stop order. Optional. The default value is 'NaN'."
        },
        {
           "field": "oca_name (series string)",
           "description": "Name of the OCA group the profit target, the stop loss / the trailing stop orders belong to. If the name is not specified, it will be generated automatically. Optional."
        },
        {
           "field": "comment (series string)",
           "description": "Additional notes on the order. If specified, displays near the order marker on the chart. Optional. The default is na."
        },
        {
           "field": "comment_profit (series string)",
           "description": "Additional notes on the order if the exit was triggered by crossing `profit` or `limit` specifically. If specified, supercedes the `comment` parameter and displays near the order marker on the chart. Optional. The default is na."
        },
        {
           "field": "comment_loss (series string)",
           "description": "Additional notes on the order if the exit was triggered by crossing `stop` or `loss` specifically. If specified, supercedes the `comment` parameter and displays near the order marker on the chart. Optional. The default is na."
        },
        {
           "field": "comment_trailing (series string)",
           "description": "Additional notes on the order if the exit was triggered by crossing `trail_offset` specifically. If specified, supercedes the `comment` parameter and displays near the order marker on the chart. Optional. The default is na."
        },
        {
           "field": "alert_message (series string)",
           "description": "Text that will replace the `{{strategy.order.alert_message}}` placeholder when one is used in the \"Message\" field of the \"Create Alert\" dialog. Optional. The default is na."
        },
        {
           "field": "alert_profit (series string)",
           "description": "Text that will replace the `{{strategy.order.alert_message}}` placeholder when one is used in the \"Message\" field of the \"Create Alert\" dialog. Only replaces the text if the exit was triggered by crossing `profit` or `limit` specifically. Optional. The default is na."
        },
        {
           "field": "alert_loss (series string)",
           "description": "Text that will replace the `{{strategy.order.alert_message}}` placeholder when one is used in the \"Message\" field of the \"Create Alert\" dialog. Only replaces the text if the exit was triggered by crossing `stop` or `loss` specifically. Optional. The default is na."
        },
        {
           "field": "alert_trailing (series string)",
           "description": "Text that will replace the `{{strategy.order.alert_message}}` placeholder when one is used in the \"Message\" field of the \"Create Alert\" dialog. Only replaces the text if the exit was triggered by crossing `trail_offset` specifically. Optional. The default is na."
        },
        {
           "field": "disable_alert (series bool)",
           "description": "If true when the function creates an order, the strategy alert will not fire upon the execution of that order. The parameter accepts a 'series bool' argument, allowing users to control which orders will trigger alerts when they fill. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.commission)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.commission(trade_num) → series float"
     ],
     "markdown": "Returns the sum of entry and exit fees paid in the open trade, expressed in strategy.account_currency.",
     "returns": "The sum of entry and exit fees paid in the open trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.commission",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.entry_bar_index)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.entry_bar_index(trade_num) → series int"
     ],
     "markdown": "Returns the bar_index of the open trade's entry.",
     "returns": "The bar_index of the open trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.entry_bar_index",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.entry_comment)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.entry_comment(trade_num) → series string"
     ],
     "markdown": "Returns the comment message of the open trade's entry, or na if there is no entry with this `trade_num`.",
     "returns": "The comment message of the open trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.entry_comment",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.entry_id)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.entry_id(trade_num) → series string"
     ],
     "markdown": "Returns the id of the open trade's entry.",
     "returns": "The id of the open trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.entry_id",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.entry_price)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.entry_price(trade_num) → series float"
     ],
     "markdown": "Returns the price of the open trade's entry.",
     "returns": "The price of the open trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.entry_price",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.entry_time)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.entry_time(trade_num) → series int"
     ],
     "markdown": "Returns the UNIX time of the open trade's entry.",
     "returns": "The UNIX time of the open trade's entry.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.entry_time",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.max_drawdown_percent)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.max_drawdown_percent(trade_num) → series float"
     ],
     "markdown": "Returns the maximum drawdown of the open trade, i.e., the maximum possible loss during the trade, expressed as a percentage and calculated by formula: `Lowest Value During Trade / (Entry Price x Quantity) * 100`.",
     "returns": "The maximum drawdown of the open trade in percentage.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.max_drawdown_percent",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.max_runup_percent)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.max_runup_percent(trade_num) → series float"
     ],
     "markdown": "Returns the maximum run-up of the open trade, i.e., the maximum possible profit during the trade, expressed as a percentage and calculated by formula: `Highest Value During Trade / (Entry Price x Quantity) * 100`.",
     "returns": "The maximum run-up of the open trade in percentage.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.max_runup_percent",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.profit_percent)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.profit_percent(trade_num) → series float"
     ],
     "markdown": "Returns the profit/loss of the open trade, expressed as a percentage. Losses are expressed as negative values.",
     "returns": "The profit/loss value of the open trade in percentage.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.profit_percent",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.max_drawdown)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.max_drawdown(trade_num) → series float"
     ],
     "markdown": "Returns the maximum drawdown of the open trade, i.e., the maximum possible loss during the trade, expressed in strategy.account_currency.",
     "returns": "The maximum drawdown of the open trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.max_drawdown",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.max_runup)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.max_runup(trade_num) → series float"
     ],
     "markdown": "Returns the maximum run up of the open trade, i.e., the maximum possible profit during the trade, expressed in strategy.account_currency.",
     "returns": "The maximum run up of the open trade",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.max_runup",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.profit)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.profit(trade_num) → series float"
     ],
     "markdown": "Returns the profit or loss of the open trade, expressed in strategy.account_currency. Losses are expressed as negative values.",
     "returns": "The profit or loss of the open trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.profit",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades\\.size)(?=\\s*\\()",
     "codeblock": [
        "strategy.opentrades.size(trade_num) → series float"
     ],
     "markdown": "Returns the direction and the number of contracts traded in the open trade. If the value is > 0, the market position was long. If the value is < 0, the market position was short.",
     "returns": "The direction and the number of contracts traded in the open trade.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.opentrades.size",
     "param": [
        {
           "field": "trade_num (series int)",
           "description": "The trade number of the open trade. The number of the first trade is zero."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.order)(?=\\s*\\()",
     "codeblock": [
        "strategy.order(id, direction, qty, limit, stop, oca_name, oca_type, comment, alert_message, disable_alert) → void"
     ],
     "markdown": "It is a command to place order. If an order with the same ID is already pending, it is possible to modify the order. If there is no order with the specified ID, a new order is placed.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.order",
     "param": [
        {
           "field": "id (series string)",
           "description": "The order identifier. It is possible to cancel or modify an order by referencing its identifier."
        },
        {
           "field": "direction (series strategy_direction)",
           "description": "Order direction."
        },
        {
           "field": "qty (series int|float)",
           "description": "Number of contracts/shares/lots/units to trade. Optional. The default value is 'NaN'."
        },
        {
           "field": "limit (series int|float)",
           "description": "Limit price of the order. If it is specified, the order type is either 'limit', or 'stop-limit'. 'NaN' should be specified for any other order type. Optional."
        },
        {
           "field": "stop (series int|float)",
           "description": "Stop price of the order. If it is specified, the order type is either 'stop', or 'stop-limit'. 'NaN' should be specified for any other order type. Optional."
        },
        {
           "field": "oca_name (series string)",
           "description": "Name of the OCA group the order belongs to. If the order should not belong to any particular OCA group, there should be an empty string. Optional."
        },
        {
           "field": "oca_type (input string)",
           "description": "Type of the OCA group. Optional."
        },
        {
           "field": "comment (series string)",
           "description": "Additional notes on the order. Optional."
        },
        {
           "field": "alert_message (series string)",
           "description": "Replaces the `{{strategy.order.alert_message}}` placeholder when it is used in the \"Create Alert\" dialog box's \"Message\" field. Optional."
        },
        {
           "field": "disable_alert (series bool)",
           "description": "If true when the function creates an order, the strategy alert will not fire upon the execution of that order. The parameter accepts a 'series bool' argument, allowing users to control which orders will trigger alerts when they fill. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.risk\\.allow_entry_in)(?=\\s*\\()",
     "codeblock": [
        "strategy.risk.allow_entry_in(value) → void"
     ],
     "markdown": "Used to specify in which market direction the strategy.entry function is allowed to open positions.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.risk.allow_entry_in",
     "param": [
        {
           "field": "value (simple string)",
           "description": "The allowed direction."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.risk\\.max_cons_loss_days)(?=\\s*\\()",
     "codeblock": [
        "strategy.risk.max_cons_loss_days(count, alert_message) → void"
     ],
     "markdown": "The purpose of this rule is to cancel all pending orders, close all open positions and stop placing orders after a specified number of consecutive days with losses. The rule affects the whole strategy.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.risk.max_cons_loss_days",
     "param": [
        {
           "field": "count (simple int)",
           "description": "The allowed number of consecutive days with losses."
        },
        {
           "field": "alert_message (simple string)",
           "description": "Replaces the {{strategy.order.alert_message}} placeholder when it is used in the \"Create Alert\" dialog box's \"Message\" field. Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.risk\\.max_drawdown)(?=\\s*\\()",
     "codeblock": [
        "strategy.risk.max_drawdown(value, type, alert_message) → void"
     ],
     "markdown": "The purpose of this rule is to determine maximum drawdown. The rule affects the whole strategy. Once the maximum drawdown value is reached, all pending orders are cancelled, all open positions are closed and no new orders can be placed.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.risk.max_drawdown",
     "param": [
        {
           "field": "value (simple int|float)",
           "description": "The maximum drawdown value. It is specified either in money (base currency), or in percentage of maximum equity. For % of equity the range of allowed values is from 0 to 100."
        },
        {
           "field": "type (simple string)",
           "description": "The type of the value."
        },
        {
           "field": "alert_message (simple string)",
           "description": "Replaces the {{strategy.order.alert_message}} placeholder when it is used in the \"Create Alert\" dialog box's \"Message\" field. Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.risk\\.max_intraday_filled_orders)(?=\\s*\\()",
     "codeblock": [
        "strategy.risk.max_intraday_filled_orders(count, alert_message) → void"
     ],
     "markdown": "The purpose of this rule is to determine maximum number of filled orders per 1 day (per 1 bar, if chart resolution is higher than 1 day). The rule affects the whole strategy. Once the maximum number of filled orders is reached, all pending orders are cancelled, all open positions are closed and no new orders can be placed till the end of the current trading session.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.risk.max_intraday_filled_orders",
     "param": [
        {
           "field": "count (simple int)",
           "description": "The maximum number of filled orders per 1 day."
        },
        {
           "field": "alert_message (simple string)",
           "description": "Replaces the {{strategy.order.alert_message}} placeholder when it is used in the \"Create Alert\" dialog box's \"Message\" field. Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.risk\\.max_intraday_loss)(?=\\s*\\()",
     "codeblock": [
        "strategy.risk.max_intraday_loss(value, type, alert_message) → void"
     ],
     "markdown": "The maximum loss value allowed during a day. It is specified either in money (base currency), or in percentage of maximum intraday equity (0 -100).",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.risk.max_intraday_loss",
     "param": [
        {
           "field": "value (simple int|float)",
           "description": "The maximum loss value. It is specified either in money (base currency), or in percentage of maximum intraday equity. For % of equity the range of allowed values is from 0 to 100."
        },
        {
           "field": "type (simple string)",
           "description": "The type of the value."
        },
        {
           "field": "alert_message (simple string)",
           "description": "Replaces the {{strategy.order.alert_message}} placeholder when it is used in the \"Create Alert\" dialog box's \"Message\" field. Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(strategy\\.risk\\.max_position_size)(?=\\s*\\()",
     "codeblock": [
        "strategy.risk.max_position_size(contracts) → void"
     ],
     "markdown": "The purpose of this rule is to determine maximum size of a market position. The rule affects the following function: strategy.entry. The 'entry' quantity can be reduced (if needed) to such number of contracts/shares/lots/units, so the total position size doesn't exceed the value specified in 'strategy.risk.max_position_size'. If minimum possible quantity still violates the rule, the order will not be placed.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_strategy.risk.max_position_size",
     "param": [
        {
           "field": "contracts (simple int|float)",
           "description": "Maximum number of contracts/shares/lots/units in a position."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(string)(?=\\s*\\()",
     "codeblock": [
        "string(x) → string"
     ],
     "markdown": "Casts na to string.",
     "returns": "The value of the argument after casting to string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_string",
     "param": [
        {
           "field": "x (string)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.prefix)(?=\\s*\\()",
     "codeblock": [
        "syminfo.prefix(symbol) → string"
     ],
     "markdown": "Returns exchange prefix of the `symbol`, e.g. \"NASDAQ\".",
     "returns": "Exchange prefix of the `symbol`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_syminfo.prefix",
     "param": [
        {
           "field": "symbol (string)",
           "description": "Symbol. Note that the symbol should be passed with a prefix."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.ticker)(?=\\s*\\()",
     "codeblock": [
        "syminfo.ticker(symbol) → string"
     ],
     "markdown": "Returns `symbol` name without exchange prefix, e.g. \"AAPL\".",
     "returns": "`symbol` name without exchange prefix.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_syminfo.ticker",
     "param": [
        {
           "field": "symbol (string)",
           "description": "Symbol. Note that the symbol should be passed with a prefix."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.alma)(?=\\s*\\()",
     "codeblock": [
        "ta.alma(series, length, offset, sigma, floor) → float"
     ],
     "markdown": "Arnaud Legoux Moving Average. It uses Gaussian distribution as weights for moving average.",
     "returns": "Arnaud Legoux Moving Average.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.alma",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        },
        {
           "field": "offset (simple int|float)",
           "description": "Controls tradeoff between smoothness (closer to 1) and responsiveness (closer to 0)."
        },
        {
           "field": "sigma (simple int|float)",
           "description": "Changes the smoothness of ALMA. The larger sigma the smoother ALMA."
        },
        {
           "field": "floor (simple bool)",
           "description": "Specifies whether the offset calculation is floored before ALMA is calculated. Optional. Default value is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.atr)(?=\\s*\\()",
     "codeblock": [
        "ta.atr(length) → series float"
     ],
     "markdown": "Function atr (average true range) returns the RMA of true range. True range is max(high - low, abs(high - close[1]), abs(low – close[1])).",
     "returns": "Average true range.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.atr",
     "param": [
        {
           "field": "length (simple int)",
           "description": "Length (number of bars back)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.barssince)(?=\\s*\\()",
     "codeblock": [
        "ta.barssince(condition) → series int"
     ],
     "markdown": "Counts the number of bars since the last time the condition was true.",
     "returns": "Number of bars since condition was true.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.barssince",
     "param": [
        {
           "field": "condition (series bool)",
           "description": "The condition to check for."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.bb)(?=\\s*\\()",
     "codeblock": [
        "ta.bb(series, length, mult) → [series float, series float, series float]"
     ],
     "markdown": "Bollinger Bands. A Bollinger Band is a technical analysis tool defined by a set of lines plotted two standard deviations (positively and negatively) away from a simple moving average (SMA) of the security's price, but can be adjusted to user preferences.",
     "returns": "Bollinger Bands.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.bb",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        },
        {
           "field": "mult (simple int|float)",
           "description": "Standard deviation factor."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.bbw)(?=\\s*\\()",
     "codeblock": [
        "ta.bbw(series, length, mult) → series float"
     ],
     "markdown": "Bollinger Bands Width. The Bollinger Band Width is the difference between the upper and the lower Bollinger Bands divided by the middle band.",
     "returns": "Bollinger Bands Width.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.bbw",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        },
        {
           "field": "mult (simple int|float)",
           "description": "Standard deviation factor."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.cci)(?=\\s*\\()",
     "codeblock": [
        "ta.cci(source, length) → series float"
     ],
     "markdown": "The CCI (commodity channel index) is calculated as the difference between the typical price of a commodity and its simple moving average, divided by the mean absolute deviation of the typical price. The index is scaled by an inverse factor of 0.015 to provide more readable numbers.",
     "returns": "Commodity channel index of source for length bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.cci",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.change)(?=\\s*\\()",
     "codeblock": [
        "ta.change(source, length) → series int|float|bool"
     ],
     "markdown": "Compares the current `source` value to its value `length` bars ago and returns the difference.",
     "returns": "The difference between the values when they are numerical. When a 'bool' source is used, returns `true` when the current source is different from the previous source.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.change",
     "param": [
        {
           "field": "source (series int|float|bool)",
           "description": "Source series."
        },
        {
           "field": "length (series int)",
           "description": "How far the past `source` value is offset from the current one, in bars. Optional. The default is 1."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.cmo)(?=\\s*\\()",
     "codeblock": [
        "ta.cmo(series, length) → series float"
     ],
     "markdown": "Chande Momentum Oscillator. Calculates the difference between the sum of recent gains and the sum of recent losses and then divides the result by the sum of all price movement over the same period.",
     "returns": "Chande Momentum Oscillator.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.cmo",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.cog)(?=\\s*\\()",
     "codeblock": [
        "ta.cog(source, length) → series float"
     ],
     "markdown": "The cog (center of gravity) is an indicator based on statistics and the Fibonacci golden ratio.",
     "returns": "Center of Gravity.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.cog",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.correlation)(?=\\s*\\()",
     "codeblock": [
        "ta.correlation(source1, source2, length) → series float"
     ],
     "markdown": "Correlation coefficient. Describes the degree to which two series tend to deviate from their ta.sma values.",
     "returns": "Correlation coefficient.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.correlation",
     "param": [
        {
           "field": "source1 (series int|float)",
           "description": "Source series."
        },
        {
           "field": "source2 (series int|float)",
           "description": "Target series."
        },
        {
           "field": "length (series int)",
           "description": "Length (number of bars back)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.cross)(?=\\s*\\()",
     "codeblock": [
        "ta.cross(source1, source2) → series bool"
     ],
     "markdown": "Returns true if two series have crossed each other, otherwise false.",
     "returns": "Boolean",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.cross",
     "param": [
        {
           "field": "source1 (series int|float)",
           "description": "First data series."
        },
        {
           "field": "source2 (series int|float)",
           "description": "Second data series."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.crossover)(?=\\s*\\()",
     "codeblock": [
        "ta.crossover(source1, source2) → series bool"
     ],
     "markdown": "The `source1`-series is defined as having crossed over `source2`-series if, on the current bar, the value of `source1` is greater than the value of `source2`, and on the previous bar, the value of `source1` was less than or equal to the value of `source2`.",
     "returns": "Boolean",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.crossover",
     "param": [
        {
           "field": "source1 (series int|float)",
           "description": "First data series."
        },
        {
           "field": "source2 (series int|float)",
           "description": "Second data series."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.crossunder)(?=\\s*\\()",
     "codeblock": [
        "ta.crossunder(source1, source2) → series bool"
     ],
     "markdown": "The `source1`-series is defined as having crossed under `source2`-series if, on the current bar, the value of `source1` is less than the value of `source2`, and on the previous bar, the value of `source1` was greater than or equal to the value of `source2`.",
     "returns": "Boolean",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.crossunder",
     "param": [
        {
           "field": "source1 (series int|float)",
           "description": "First data series."
        },
        {
           "field": "source2 (series int|float)",
           "description": "Second data series."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.cum)(?=\\s*\\()",
     "codeblock": [
        "ta.cum(source) → series float"
     ],
     "markdown": "Cumulative (total) sum of `source`. In other words it's a sum of all elements of `source`.",
     "returns": "Total sum series.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.cum",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Source used for the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.dev)(?=\\s*\\()",
     "codeblock": [
        "ta.dev(source, length) → series float"
     ],
     "markdown": "Measure of difference between the series and it's ta.sma.",
     "returns": "Deviation of `source` for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.dev",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.dmi)(?=\\s*\\()",
     "codeblock": [
        "ta.dmi(diLength, adxSmoothing) → [series float, series float, series float]"
     ],
     "markdown": "The dmi function returns the directional movement index.",
     "returns": "Tuple of three DMI series: Positive Directional Movement (+DI), Negative Directional Movement (-DI) and Average Directional Movement Index (ADX).",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.dmi",
     "param": [
        {
           "field": "diLength (simple int)",
           "description": "DI Period."
        },
        {
           "field": "adxSmoothing (simple int)",
           "description": "ADX Smoothing Period."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.ema)(?=\\s*\\()",
     "codeblock": [
        "ta.ema(source, length) → series float"
     ],
     "markdown": "The ema function returns the exponentially weighted moving average. In ema weighting factors decrease exponentially. It calculates by using a formula: EMA = alpha * source + (1 - alpha) * EMA[1], where alpha = 2 / (length + 1).",
     "returns": "Exponential moving average of `source` with alpha = 2 / (length + 1).",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.ema",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.falling)(?=\\s*\\()",
     "codeblock": [
        "ta.falling(source, length) → series bool"
     ],
     "markdown": "Test if the `source` series is now falling for `length` bars long.",
     "returns": "true if current `source` value is less than any previous `source` value for `length` bars back, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.falling",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.highest)(?=\\s*\\()",
     "codeblock": [
        "ta.highest(source, length) → series float"
     ],
     "markdown": "Highest value for a given number of bars back.",
     "returns": "Highest value in the series.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.highest",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.highestbars)(?=\\s*\\()",
     "codeblock": [
        "ta.highestbars(source, length) → series int"
     ],
     "markdown": "Highest value offset for a given number of bars back.",
     "returns": "Offset to the highest bar.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.highestbars",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.hma)(?=\\s*\\()",
     "codeblock": [
        "ta.hma(source, length) → series float"
     ],
     "markdown": "The hma function returns the Hull Moving Average.",
     "returns": "Hull moving average of 'source' for 'length' bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.hma",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.kc)(?=\\s*\\()",
     "codeblock": [
        "ta.kc(series, length, mult, useTrueRange) → [series float, series float, series float]"
     ],
     "markdown": "Keltner Channels. Keltner channel is a technical analysis indicator showing a central moving average line plus channel lines at a distance above and below.",
     "returns": "Keltner Channels.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.kc",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        },
        {
           "field": "mult (simple int|float)",
           "description": "Standard deviation factor."
        },
        {
           "field": "useTrueRange (simple bool)",
           "description": "Specifies if True Range is used; default is true. If the value is false, the range will be calculated with the expression (high – low). Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.kcw)(?=\\s*\\()",
     "codeblock": [
        "ta.kcw(series, length, mult, useTrueRange) → series float"
     ],
     "markdown": "Keltner Channels Width. The Keltner Channels Width is the difference between the upper and the lower Keltner Channels divided by the middle channel.",
     "returns": "Keltner Channels Width.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.kcw",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        },
        {
           "field": "mult (simple int|float)",
           "description": "Standard deviation factor."
        },
        {
           "field": "useTrueRange (simple bool)",
           "description": "Specifies if True Range is used; default is true. If the value is false, the range will be calculated with the expression (high – low). Optional."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.linreg)(?=\\s*\\()",
     "codeblock": [
        "ta.linreg(source, length, offset) → series float"
     ],
     "markdown": "Linear regression curve. A line that best fits the prices specified over a user-defined time period. It is calculated using the least squares method. The result of this function is calculated using the formula: linreg = intercept + slope * (length - 1 - offset), where intercept and slope are the values calculated with the least squares method on `source` series.",
     "returns": "Linear regression curve.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.linreg",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Source series."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        },
        {
           "field": "offset (simple int)",
           "description": "Offset."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.lowest)(?=\\s*\\()",
     "codeblock": [
        "ta.lowest(source, length) → series float"
     ],
     "markdown": "Lowest value for a given number of bars back.",
     "returns": "Lowest value in the series.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.lowest",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.lowestbars)(?=\\s*\\()",
     "codeblock": [
        "ta.lowestbars(source, length) → series int"
     ],
     "markdown": "Lowest value offset for a given number of bars back.",
     "returns": "Offset to the lowest bar.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.lowestbars",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.macd)(?=\\s*\\()",
     "codeblock": [
        "ta.macd(source, fastlen, slowlen, siglen) → [series float, series float, series float]"
     ],
     "markdown": "MACD (moving average convergence/divergence). It is supposed to reveal changes in the strength, direction, momentum, and duration of a trend in a stock's price.",
     "returns": "Tuple of three MACD series: MACD line, signal line and histogram line.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.macd",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "fastlen (simple int)",
           "description": "Fast Length parameter."
        },
        {
           "field": "slowlen (simple int)",
           "description": "Slow Length parameter."
        },
        {
           "field": "siglen (simple int)",
           "description": "Signal Length parameter."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.max)(?=\\s*\\()",
     "codeblock": [
        "ta.max(source) → series float"
     ],
     "markdown": "Returns the all-time high value of `source` from the beginning of the chart up to the current bar.",
     "returns": "The all-time high value of `source`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.max",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Source used for the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.median)(?=\\s*\\()",
     "codeblock": [
        "ta.median(source, length) → series int|float"
     ],
     "markdown": "Returns the median of the series.",
     "returns": "The median of the series.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.median",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.mfi)(?=\\s*\\()",
     "codeblock": [
        "ta.mfi(series, length) → series float"
     ],
     "markdown": "Money Flow Index. The Money Flow Index (MFI) is a technical oscillator that uses price and volume for identifying overbought or oversold conditions in an asset.",
     "returns": "Money Flow Index.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.mfi",
     "param": [
        {
           "field": "series (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.min)(?=\\s*\\()",
     "codeblock": [
        "ta.min(source) → series float"
     ],
     "markdown": "Returns the all-time low value of `source` from the beginning of the chart up to the current bar.",
     "returns": "The all-time low value of `source`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.min",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Source used for the calculation."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.mode)(?=\\s*\\()",
     "codeblock": [
        "ta.mode(source, length) → series int|float"
     ],
     "markdown": "Returns the mode of the series. If there are several values with the same frequency, it returns the smallest value.",
     "returns": "The most frequently occurring value from the `source`. If none exists, returns the smallest value instead.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.mode",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.mom)(?=\\s*\\()",
     "codeblock": [
        "ta.mom(source, length) → series float"
     ],
     "markdown": "Momentum of `source` price and `source` price `length` bars ago. This is simply a difference: source – source[length].",
     "returns": "Momentum of `source` price and `source` price `length` bars ago.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.mom",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Offset from the current bar to the previous bar."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.percentile_linear_interpolation)(?=\\s*\\()",
     "codeblock": [
        "ta.percentile_linear_interpolation(source, length, percentage) → series float"
     ],
     "markdown": "Calculates percentile using method of linear interpolation between the two nearest ranks.",
     "returns": "P-th percentile of `source` series for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.percentile_linear_interpolation",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars back (length)."
        },
        {
           "field": "percentage (simple int|float)",
           "description": "Percentage, a number from range 0 to 100."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.percentile_nearest_rank)(?=\\s*\\()",
     "codeblock": [
        "ta.percentile_nearest_rank(source, length, percentage) → series float"
     ],
     "markdown": "Calculates percentile using method of Nearest Rank.",
     "returns": "P-th percentile of `source` series for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.percentile_nearest_rank",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars back (length)."
        },
        {
           "field": "percentage (simple int|float)",
           "description": "Percentage, a number from range 0 to 100."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.percentrank)(?=\\s*\\()",
     "codeblock": [
        "ta.percentrank(source, length) → series float"
     ],
     "markdown": "Percent rank is the percents of how many previous values was less than or equal to the current value of given series.",
     "returns": "Percent rank of `source` for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.percentrank",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.pivot_point_levels)(?=\\s*\\()",
     "codeblock": [
        "ta.pivot_point_levels(type, anchor, developing) → float[]"
     ],
     "markdown": "Calculates the pivot point levels using the specified `type` and `anchor`.",
     "returns": "A float[] array with numerical values representing 11 pivot point levels: [P, R1, S1, R2, S2, R3, S3, R4, S4, R5, S5]. Levels absent from the specified `type` return na values (e.g., \"DM\" only calculates P, R1, and S1).",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.pivot_point_levels",
     "param": [
        {
           "field": "type (series string)",
           "description": "The type of pivot point levels."
        },
        {
           "field": "anchor (series bool)",
           "description": "The condition that triggers the reset of the pivot point calculations. When true, calculations reset; when false, results calculated at the last reset persist."
        },
        {
           "field": "developing (series bool)",
           "description": "If false, the values are those calculated the last time the anchor condition was true. They remain constant until the anchor condition becomes true again. If true, the pivots are developing, i.e., they constantly recalculate on the data developing between the point of the last anchor (or bar zero if the anchor condition was never true) and the current bar. Optional. The default is false."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.pivothigh)(?=\\s*\\()",
     "codeblock": [
        "ta.pivothigh(source, leftbars, rightbars) → series float"
     ],
     "markdown": "Returns price of the pivot high point. It returns 'NaN', if there was no pivot high point.",
     "returns": "Price of the point or 'NaN'.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.pivothigh",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Data series to calculate the value. Optional. Default is 'high'."
        },
        {
           "field": "leftbars (series int|float)",
           "description": "Left strength."
        },
        {
           "field": "rightbars (series int|float)",
           "description": "Right strength."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.pivotlow)(?=\\s*\\()",
     "codeblock": [
        "ta.pivotlow(source, leftbars, rightbars) → series float"
     ],
     "markdown": "Returns price of the pivot low point. It returns 'NaN', if there was no pivot low point.",
     "returns": "Price of the point or 'NaN'.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.pivotlow",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Data series to calculate the value. Optional. Default is 'low'."
        },
        {
           "field": "leftbars (series int|float)",
           "description": "Left strength."
        },
        {
           "field": "rightbars (series int|float)",
           "description": "Right strength."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.range)(?=\\s*\\()",
     "codeblock": [
        "ta.range(source, length) → series float"
     ],
     "markdown": "Returns the difference between the min and max values in a series.",
     "returns": "The difference between the min and max values in the series.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.range",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.rising)(?=\\s*\\()",
     "codeblock": [
        "ta.rising(source, length) → series bool"
     ],
     "markdown": "Test if the `source` series is now rising for `length` bars long.",
     "returns": "true if current `source` is greater than any previous `source` for `length` bars back, false otherwise.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.rising",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.rma)(?=\\s*\\()",
     "codeblock": [
        "ta.rma(source, length) → series float"
     ],
     "markdown": "Moving average used in RSI. It is the exponentially weighted moving average with alpha = 1 / length.",
     "returns": "Exponential moving average of `source` with alpha = 1 / `length`.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.rma",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.roc)(?=\\s*\\()",
     "codeblock": [
        "ta.roc(source, length) → series float"
     ],
     "markdown": "Calculates the percentage of change (rate of change) between the current value of `source` and its value `length` bars ago.<p/>It is calculated by the formula: 100 * change(src, length) / src[length].",
     "returns": "The rate of change of `source` for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.roc",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.rsi)(?=\\s*\\()",
     "codeblock": [
        "ta.rsi(source, length) → series float"
     ],
     "markdown": "Relative strength index. It is calculated using the `ta.rma()` of upward and downward changes of `source` over the last `length` bars.",
     "returns": "Relative strength index.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.rsi",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.sar)(?=\\s*\\()",
     "codeblock": [
        "ta.sar(start, inc, max) → series float"
     ],
     "markdown": "Parabolic SAR (parabolic stop and reverse) is a method devised by J. Welles Wilder, Jr., to find potential reversals in the market price direction of traded goods.",
     "returns": "Parabolic SAR.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.sar",
     "param": [
        {
           "field": "start (simple int|float)",
           "description": "Start."
        },
        {
           "field": "inc (simple int|float)",
           "description": "Increment."
        },
        {
           "field": "max (simple int|float)",
           "description": "Maximum."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.sma)(?=\\s*\\()",
     "codeblock": [
        "ta.sma(source, length) → series float"
     ],
     "markdown": "The sma function returns the moving average, that is the sum of last y values of x, divided by y.",
     "returns": "Simple moving average of `source` for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.sma",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.stdev)(?=\\s*\\()",
     "codeblock": [
        "ta.stdev(source, length, biased) → series float"
     ],
     "markdown": "Returns standard deviation.<p/>If `biased` is true, function will calculate using a biased estimate of the entire population, if false - unbiased estimate of a sample.<p/>`na` values in the `source` series are ignored; the function calculates on the `length` quantity of non-`na` values.",
     "returns": "Standard deviation.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.stdev",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        },
        {
           "field": "biased (series bool)",
           "description": "Determines which estimate should be used. Optional. The default is true."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.stoch)(?=\\s*\\()",
     "codeblock": [
        "ta.stoch(source, high, low, length) → series float"
     ],
     "markdown": "Stochastic. It is calculated by a formula: 100 * (close - lowest(low, length)) / (highest(high, length) - lowest(low, length)).",
     "returns": "Stochastic.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.stoch",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Source series."
        },
        {
           "field": "high (series int|float)",
           "description": "Series of high."
        },
        {
           "field": "low (series int|float)",
           "description": "Series of low."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars back (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.supertrend)(?=\\s*\\()",
     "codeblock": [
        "ta.supertrend(factor, atrPeriod) → [series float, series float]"
     ],
     "markdown": "The Supertrend Indicator. The Supertrend is a trend following indicator.",
     "returns": "Tuple of two supertrend series: supertrend line and direction of trend. Possible values are 1 (down direction) and -1 (up direction).",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.supertrend",
     "param": [
        {
           "field": "factor (series int|float)",
           "description": "The multiplier by which the ATR will get multiplied."
        },
        {
           "field": "atrPeriod (simple int)",
           "description": "Length of ATR."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.swma)(?=\\s*\\()",
     "codeblock": [
        "ta.swma(source) → series float"
     ],
     "markdown": "Symmetrically weighted moving average with fixed length: 4. Weights: [1/6, 2/6, 2/6, 1/6].",
     "returns": "Symmetrically weighted moving average.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.swma",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Source series."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.tr)(?=\\s*\\()",
     "codeblock": [
        "ta.tr(handle_na) → series float"
     ],
     "markdown": "Returns true range. It is math.max(high - low, math.abs(high - close[1]), math.abs(low - close[1])).",
     "returns": "True range.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.tr",
     "param": [
        {
           "field": "handle_na (simple bool)",
           "description": "How NaN values are handled. if true, and previous day's close is NaN then tr would be calculated as current day high-low. Otherwise (if false) tr would return NaN in such cases. Also note, that ta.atr uses ta.tr(true)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.tsi)(?=\\s*\\()",
     "codeblock": [
        "ta.tsi(source, short_length, long_length) → series float"
     ],
     "markdown": "True strength index. It uses moving averages of the underlying momentum of a financial instrument.",
     "returns": "True strength index. A value in range [-1, 1].",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.tsi",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Source series."
        },
        {
           "field": "short_length (simple int)",
           "description": "Short length."
        },
        {
           "field": "long_length (simple int)",
           "description": "Long length."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.valuewhen)(?=\\s*\\()",
     "codeblock": [
        "ta.valuewhen(condition, source, occurrence) → series bool|color|float|int"
     ],
     "markdown": "Returns the value of the `source` series on the bar where the `condition` was true on the nth most recent occurrence.",
     "returns": "The value of the `source` series on the bar where the `condition` was true on the nth most recent occurrence.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.valuewhen",
     "param": [
        {
           "field": "condition (series bool)",
           "description": "The condition to search for."
        },
        {
           "field": "source (series bool|color|int|float)",
           "description": "The value to be returned from the bar where the condition is met."
        },
        {
           "field": "occurrence (simple int)",
           "description": "The occurrence of the condition. The numbering starts from 0 and goes back in time. Must be an integer >= 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.variance)(?=\\s*\\()",
     "codeblock": [
        "ta.variance(source, length, biased) → series float"
     ],
     "markdown": "Variance is the expectation of the squared deviation of a series from its mean (ta.sma), and it informally measures how far a set of numbers are spread out from their mean.<p/>If `biased` is true, function will calculate using a biased estimate of the entire population, if false - unbiased estimate of a sample.<p/>`na` values in the `source` series are ignored; the function calculates on the `length` quantity of non-`na` values.",
     "returns": "Variance of `source` for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.variance",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        },
        {
           "field": "biased (series bool)",
           "description": "Determines which estimate should be used. Optional. The default is true."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.vwap)(?=\\s*\\()",
     "codeblock": [
        "ta.vwap(source, anchor, stdev_mult) → [series float, series float, series float]"
     ],
     "markdown": "Volume weighted average price.",
     "returns": "A VWAP series, or a tuple [vwap, upper_band, lower_band] if `stdev_mult` is specified.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.vwap",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Source used for the VWAP calculation."
        },
        {
           "field": "anchor (series bool)",
           "description": "The condition that triggers the reset of VWAP calculations. When true, calculations reset; when false, calculations proceed using the values accumulated since the previous reset. Optional. The default is equivalent to passing timeframe.change with \"1D\" as its argument."
        },
        {
           "field": "stdev_mult (series int|float)",
           "description": "If specified, the function will calculate the standard deviation bands based on the main VWAP series and return a [vwap, upper_band, lower_band] tuple. The `upper_band`/`lower_band` values are calculated using the VWAP to which the standard deviation multiplied by this argument is added/subtracted. Optional. The default is na, in which case the function returns a single value, not a tuple."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.vwma)(?=\\s*\\()",
     "codeblock": [
        "ta.vwma(source, length) → series float"
     ],
     "markdown": "The vwma function returns volume-weighted moving average of `source` for `length` bars back. It is the same as: sma(source * volume, length) / sma(volume, length).",
     "returns": "Volume-weighted moving average of `source` for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.vwma",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.wma)(?=\\s*\\()",
     "codeblock": [
        "ta.wma(source, length) → series float"
     ],
     "markdown": "The wma function returns weighted moving average of `source` for `length` bars back. In wma weighting factors decrease in arithmetical progression.",
     "returns": "Weighted moving average of `source` for `length` bars back.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.wma",
     "param": [
        {
           "field": "source (series int|float)",
           "description": "Series of values to process."
        },
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ta\\.wpr)(?=\\s*\\()",
     "codeblock": [
        "ta.wpr(length) → series float"
     ],
     "markdown": "Williams %R. The oscillator shows the current closing price in relation to the high and low of the past 'length' bars.",
     "returns": "Williams %R.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ta.wpr",
     "param": [
        {
           "field": "length (series int)",
           "description": "Number of bars (length)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table)(?=\\s*\\()",
     "codeblock": [
        "table(x) → series table"
     ],
     "markdown": "Casts na to table.",
     "returns": "The value of the argument after casting to table.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table",
     "param": [
        {
           "field": "x (series table)",
           "description": "The value to convert to the specified type, usually na."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell)(?=\\s*\\()",
     "codeblock": [
        "table.cell(table_id, column, row, text, width, height, text_color, text_halign, text_valign, text_size, bgcolor, tooltip, text_font_family) → void"
     ],
     "markdown": "Defines a cell in the table and sets its attributes.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "text (series string)",
           "description": "The text to be displayed inside the cell. Optional. The default is empty string."
        },
        {
           "field": "width (series int)",
           "description": "The width of the cell as a % of the indicator's visual space. Passing 0 auto-adjusts the width based on the text inside the cell. Optional. The default is 0."
        },
        {
           "field": "height (series int)",
           "description": "The height of the cell as a % of the indicator's visual space. Passing 0 auto-adjusts the height based on the text inside of the cell. Optional. The default is 0."
        },
        {
           "field": "text_color (series color)",
           "description": "The color of the text. Optional. The default is color.black."
        },
        {
           "field": "text_halign (series string)",
           "description": "The horizontal alignment of the cell's text. Optional. The default value is text.align_center."
        },
        {
           "field": "text_valign (series string)",
           "description": "The vertical alignment of the cell's text. Optional. The default value is text.align_center."
        },
        {
           "field": "text_size (series string)",
           "description": "The size of the text. An optional parameter, the default value is size.normal."
        },
        {
           "field": "bgcolor (series color)",
           "description": "The background color of the text. Optional. The default is no color."
        },
        {
           "field": "tooltip (series string)",
           "description": "The tooltip to be displayed inside the cell. Optional."
        },
        {
           "field": "text_font_family (series string)",
           "description": "The font family of the text. Optional. The default value is font.family_default."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_bgcolor)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_bgcolor(table_id, column, row, bgcolor) → void"
     ],
     "markdown": "Sets the background color of the table cell.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_bgcolor",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "bgcolor (series color)",
           "description": "The background color of the cell."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_height)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_height(table_id, column, row, height) → void"
     ],
     "markdown": "Sets the height of table cell.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_height",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "height (series int)",
           "description": "The height of the cell as a % of the chart window. Passing 0 auto-adjusts the height based on the text inside of the cell."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_text)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_text(table_id, column, row, text) → void"
     ],
     "markdown": "Sets the text in the specified table cell.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_text",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "text (series string)",
           "description": "The text to be displayed inside the cell."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_text_color)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_text_color(table_id, column, row, text_color) → void"
     ],
     "markdown": "Sets the color of the text inside the table cell.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_text_color",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "text_color (series color)",
           "description": "The color of the text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_text_font_family)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_text_font_family(table_id, column, row, text_font_family) → void"
     ],
     "markdown": "Sets the font family of the text inside the table cell.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_text_font_family",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "text_font_family (series string)",
           "description": "The font family of the text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_text_halign)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_text_halign(table_id, column, row, text_halign) → void"
     ],
     "markdown": "Sets the horizontal alignment of the table cell's text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_text_halign",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "text_halign (series string)",
           "description": "The horizontal alignment of a cell's text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_text_size)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_text_size(table_id, column, row, text_size) → void"
     ],
     "markdown": "Sets the size of the table cell's text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_text_size",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "text_size (series string)",
           "description": "The size of the text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_text_valign)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_text_valign(table_id, column, row, text_valign) → void"
     ],
     "markdown": "Sets the vertical alignment of a table cell's text.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_text_valign",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "text_valign (series string)",
           "description": "The vertical alignment of the cell's text."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_tooltip)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_tooltip(table_id, column, row, tooltip) → void"
     ],
     "markdown": "Sets the tooltip in the specified table cell.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_tooltip",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "tooltip (series string)",
           "description": "The tooltip to be displayed inside the cell."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.cell_set_width)(?=\\s*\\()",
     "codeblock": [
        "table.cell_set_width(table_id, column, row, width) → void"
     ],
     "markdown": "Sets the width of the table cell.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.cell_set_width",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "column (series int)",
           "description": "The index of the cell's column. Numbering starts at 0."
        },
        {
           "field": "row (series int)",
           "description": "The index of the cell's row. Numbering starts at 0."
        },
        {
           "field": "width (series int)",
           "description": "The width of the cell as a % of the chart window. Passing 0 auto-adjusts the width based on the text inside of the cell."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.clear)(?=\\s*\\()",
     "codeblock": [
        "table.clear(table_id, start_column, start_row, end_column, end_row) → void"
     ],
     "markdown": "Removes a cell or a sequence of cells from the table. The cells are removed in a rectangle shape where the start_column and start_row specify the top-left corner, and end_column and end_row specify the bottom-right corner.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.clear",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "start_column (series int)",
           "description": "The index of the column of the first cell to delete. Numbering starts at 0."
        },
        {
           "field": "start_row (series int)",
           "description": "The index of the row of the first cell to delete. Numbering starts at 0."
        },
        {
           "field": "end_column (series int)",
           "description": "The index of the column of the last cell to delete. Optional. The default is the argument used for start_column. Numbering starts at 0."
        },
        {
           "field": "end_row (series int)",
           "description": "The index of the row of the last cell to delete. Optional. The default is the argument used for start_row. Numbering starts at 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.delete)(?=\\s*\\()",
     "codeblock": [
        "table.delete(table_id) → void"
     ],
     "markdown": "Deletes a table.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.delete",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.merge_cells)(?=\\s*\\()",
     "codeblock": [
        "table.merge_cells(table_id, start_column, start_row, end_column, end_row) → void"
     ],
     "markdown": "Merges a sequence of cells in the table into one cell. The cells are merged in a rectangle shape where the start_column and start_row specify the top-left corner, and end_column and end_row specify the bottom-right corner.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.merge_cells",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "start_column (series int)",
           "description": "The index of the column of the first cell to merge. Numbering starts at 0."
        },
        {
           "field": "start_row (series int)",
           "description": "The index of the row of the first cell to merge. Numbering starts at 0."
        },
        {
           "field": "end_column (series int)",
           "description": "The index of the column of the last cell to merge. Numbering starts at 0."
        },
        {
           "field": "end_row (series int)",
           "description": "The index of the row of the last cell to merge. Numbering starts at 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.new)(?=\\s*\\()",
     "codeblock": [
        "table.new(position, columns, rows, bgcolor, frame_color, frame_width, border_color, border_width) → series table"
     ],
     "markdown": "Creates a new table.",
     "returns": "The ID of a table object.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.new",
     "param": [
        {
           "field": "position (series string)",
           "description": "Position of the table."
        },
        {
           "field": "columns (series int)",
           "description": "The number of columns in the table."
        },
        {
           "field": "rows (series int)",
           "description": "The number of rows in the table."
        },
        {
           "field": "bgcolor (series color)",
           "description": "The background color of the table. Optional. The default is no color."
        },
        {
           "field": "frame_color (series color)",
           "description": "The color of the outer frame of the table. Optional. The default is no color."
        },
        {
           "field": "frame_width (series int)",
           "description": "The width of the outer frame of the table. Optional. The default is 0."
        },
        {
           "field": "border_color (series color)",
           "description": "The color of the borders of the cells (excluding the outer frame). Optional. The default is no color."
        },
        {
           "field": "border_width (series int)",
           "description": "The width of the borders of the cells (excluding the outer frame). Optional. The default is 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.set_bgcolor)(?=\\s*\\()",
     "codeblock": [
        "table.set_bgcolor(table_id, bgcolor) → void"
     ],
     "markdown": "Sets the background color of a table.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.set_bgcolor",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "bgcolor (series color)",
           "description": "The background color of the table. Optional. The default is no color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.set_border_color)(?=\\s*\\()",
     "codeblock": [
        "table.set_border_color(table_id, border_color) → void"
     ],
     "markdown": "Sets the color of the borders (excluding the outer frame) of the table's cells.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.set_border_color",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "border_color (series color)",
           "description": "The color of the borders. Optional. The default is no color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.set_border_width)(?=\\s*\\()",
     "codeblock": [
        "table.set_border_width(table_id, border_width) → void"
     ],
     "markdown": "Sets the width of the borders (excluding the outer frame) of the table's cells.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.set_border_width",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "border_width (series int)",
           "description": "The width of the borders. Optional. The default is 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.set_frame_color)(?=\\s*\\()",
     "codeblock": [
        "table.set_frame_color(table_id, frame_color) → void"
     ],
     "markdown": "Sets the color of the outer frame of a table.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.set_frame_color",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "frame_color (series color)",
           "description": "The color of the frame of the table. Optional. The default is no color."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.set_frame_width)(?=\\s*\\()",
     "codeblock": [
        "table.set_frame_width(table_id, frame_width) → void"
     ],
     "markdown": "Set the width of the outer frame of a table.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.set_frame_width",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "frame_width (series int)",
           "description": "The width of the outer frame of the table. Optional. The default is 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(table\\.set_position)(?=\\s*\\()",
     "codeblock": [
        "table.set_position(table_id, position) → void"
     ],
     "markdown": "Sets the position of a table.",
     "returns": "void",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_table.set_position",
     "param": [
        {
           "field": "table_id (series table)",
           "description": "A table object."
        },
        {
           "field": "position (series string)",
           "description": "Position of the table."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.heikinashi)(?=\\s*\\()",
     "codeblock": [
        "ticker.heikinashi(symbol) → simple string"
     ],
     "markdown": "Creates a ticker identifier for requesting Heikin Ashi bar values.",
     "returns": "String value of ticker id.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.heikinashi",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "Symbol ticker identifier."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.inherit)(?=\\s*\\()",
     "codeblock": [
        "ticker.inherit(from_tickerid, symbol) → simple string"
     ],
     "markdown": "Constructs a ticker ID for the specified `symbol` with additional parameters inherited from the ticker ID passed into the function call, allowing the script to request a symbol's data using the same modifiers that the `from_tickerid` has, including extended session, dividend adjustment, currency conversion, non-standard chart types, back-adjustment, settlement-as-close, etc.",
     "returns": "String value of ticker id.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.inherit",
     "param": [
        {
           "field": "from_tickerid (simple string)",
           "description": "The ticker ID to inherit modifiers from."
        },
        {
           "field": "symbol (simple string)",
           "description": "The symbol to construct the new ticker ID for."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.kagi)(?=\\s*\\()",
     "codeblock": [
        "ticker.kagi(symbol, reversal) → simple string"
     ],
     "markdown": "Creates a ticker identifier for requesting Kagi values.",
     "returns": "String value of ticker id.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.kagi",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "Symbol ticker identifier."
        },
        {
           "field": "reversal (simple int|float)",
           "description": "Reversal amount (absolute price value)."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.linebreak)(?=\\s*\\()",
     "codeblock": [
        "ticker.linebreak(symbol, number_of_lines) → simple string"
     ],
     "markdown": "Creates a ticker identifier for requesting Line Break values.",
     "returns": "String value of ticker id.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.linebreak",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "Symbol ticker identifier."
        },
        {
           "field": "number_of_lines (simple int)",
           "description": "Number of line."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.modify)(?=\\s*\\()",
     "codeblock": [
        "ticker.modify(tickerid, session, adjustment) → simple string"
     ],
     "markdown": "Creates a ticker identifier for requesting additional data for the script.",
     "returns": "String value of ticker id.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.modify",
     "param": [
        {
           "field": "tickerid (simple string)",
           "description": "Symbol name with exchange prefix, e.g. 'BATS:MSFT', 'NASDAQ:MSFT' or tickerid with session and adjustment from the ticker.new function."
        },
        {
           "field": "session (simple string)",
           "description": "Session type. Optional. The default is syminfo.session."
        },
        {
           "field": "adjustment (simple string)",
           "description": "Adjustment type. Optional. The default adjustment value is different depending on particular instrument."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.new)(?=\\s*\\()",
     "codeblock": [
        "ticker.new(prefix, ticker, session, adjustment) → simple string"
     ],
     "markdown": "Creates a ticker identifier for requesting additional data for the script.",
     "returns": "String value of ticker id.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.new",
     "param": [
        {
           "field": "prefix (simple string)",
           "description": "Exchange prefix. For example: 'BATS', 'NYSE', 'NASDAQ'."
        },
        {
           "field": "ticker (simple string)",
           "description": "Ticker name. For example 'AAPL', 'MSFT', 'EURUSD'."
        },
        {
           "field": "session (simple string)",
           "description": "Session type. Optional. The default is syminfo.session."
        },
        {
           "field": "adjustment (simple string)",
           "description": "Adjustment type. Optional. The default adjustment value is different depending on particular instrument."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.pointfigure)(?=\\s*\\()",
     "codeblock": [
        "ticker.pointfigure(symbol, source, style, param, reversal) → simple string"
     ],
     "markdown": "Creates a ticker identifier for requesting Point & Figure values.",
     "returns": "String value of ticker id.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.pointfigure",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "Symbol ticker identifier."
        },
        {
           "field": "source (simple string)",
           "description": "The source for calculating Point & Figure."
        },
        {
           "field": "style (simple string)",
           "description": "Box Size Assignment Method."
        },
        {
           "field": "param (simple int|float)",
           "description": "ATR Length if `style` is equal to 'ATR', or Box Size if `style` is equal to 'Traditional'."
        },
        {
           "field": "reversal (simple int)",
           "description": "Reversal amount."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.renko)(?=\\s*\\()",
     "codeblock": [
        "ticker.renko(symbol, style, param, request_wicks, source) → simple string"
     ],
     "markdown": "Creates a ticker identifier for requesting Renko values.",
     "returns": "String value of ticker id.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.renko",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "Symbol ticker identifier."
        },
        {
           "field": "style (simple string)",
           "description": "Box Size Assignment Method."
        },
        {
           "field": "param (simple int|float)",
           "description": "ATR Length if `style` is equal to 'ATR', or Box Size if `style` is equal to 'Traditional'."
        },
        {
           "field": "request_wicks (simple bool)",
           "description": "Specifies if wick values are returned for Renko bricks. Optional."
        },
        {
           "field": "source (simple string)",
           "description": "The source used to calculate bricks. Optional. The default is \"Close\"."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(ticker\\.standard)(?=\\s*\\()",
     "codeblock": [
        "ticker.standard(symbol) → simple string"
     ],
     "markdown": "Creates a ticker to request data from a standard chart that is unaffected by modifiers like extended session, dividend adjustment, currency conversion, and the calculations of non-standard chart types: Heikin Ashi, Renko, etc. Among other things, this makes it possible to retrieve standard chart values when the script is running on a non-standard chart.",
     "returns": "A string representing the ticker of a standard chart in the \"prefix:ticker\" format. If the `symbol` argument does not contain the prefix and ticker information, the function returns the supplied argument as is.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_ticker.standard",
     "param": [
        {
           "field": "symbol (simple string)",
           "description": "A ticker ID to be converted into its standard form. Optional. The default is syminfo.tickerid."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(time)(?=\\s*\\()",
     "codeblock": [
        "time(timeframe, session, timezone, bars_back) → series int"
     ],
     "markdown": "Returns the UNIX time of the current bar for the specified timeframe and session or NaN if the time point is out of session.",
     "returns": "UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_time",
     "param": [
        {
           "field": "timeframe (simple string)",
           "description": "Timeframe. An empty string is interpreted as the current timeframe of the chart."
        },
        {
           "field": "session (simple string)",
           "description": "Session specification. An empty string is interpreted as the session of the symbol. Optional. The default is an empty string."
        },
        {
           "field": "timezone (simple string)",
           "description": "Timezone of the `session` argument. Can only be used when a `session` is specified. Optional. The default is syminfo.timezone. Can be specified in GMT notation (e.g. \"GMT-5\") or as an IANA time zone database name (e.g. \"America/New_York\")."
        },
        {
           "field": "bars_back (series int)",
           "description": "If specified, the function will return the calculated timestamp from the bar N bars back relative to the current `timeframe` bar. Passing a negative number from -1 to -500 allows the function to request the expected time of a future bar. Optional. The default is 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(time_close)(?=\\s*\\()",
     "codeblock": [
        "time_close(timeframe, session, timezone, bars_back) → series int"
     ],
     "markdown": "Returns the UNIX time of the current bar's close for the specified timeframe and session, or na if the time point is outside the session. On non-standard price-based chart types (Renko, Line break, Kagi, Point & Figure, and Range), this function returns na on the chart's realtime bars.",
     "returns": "UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_time_close",
     "param": [
        {
           "field": "timeframe (simple string)",
           "description": "Timeframe. An empty string is interpreted as the current timeframe of the chart."
        },
        {
           "field": "session (simple string)",
           "description": "Session specification. An empty string is interpreted as the session of the symbol. Optional. The default is an empty string."
        },
        {
           "field": "timezone (simple string)",
           "description": "Timezone of the `session` argument. Can only be used when a `session` is specified. Optional. The default is syminfo.timezone. Can be specified in GMT notation (e.g. \"GMT-5\") or as an IANA time zone database name (e.g. \"America/New_York\")."
        },
        {
           "field": "bars_back (series int)",
           "description": "If specified, the function will return the calculated timestamp from the bar N bars back relative to the current `timeframe` bar. Passing a negative number from -1 to -500 allows the function to request the expected time of a future bar. Optional. The default is 0."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.change)(?=\\s*\\()",
     "codeblock": [
        "timeframe.change(timeframe) → series bool"
     ],
     "markdown": "Detects changes in the specified `timeframe`. Returns true on the first bar of a new `timeframe`, false otherwise.",
     "returns": "Boolean",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_timeframe.change",
     "param": [
        {
           "field": "timeframe (simple string)",
           "description": "Timeframe string compliant with timeframe string specifications."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.from_seconds)(?=\\s*\\()",
     "codeblock": [
        "timeframe.from_seconds(seconds) → string"
     ],
     "markdown": "Converts a number of seconds into a valid timeframe string.",
     "returns": "A timeframe string compliant with timeframe string specifications.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_timeframe.from_seconds",
     "param": [
        {
           "field": "seconds (int)",
           "description": "The number of seconds in the timeframe."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.in_seconds)(?=\\s*\\()",
     "codeblock": [
        "timeframe.in_seconds(timeframe) → int"
     ],
     "markdown": "Converts a timeframe string into seconds.",
     "returns": "Number of seconds in the timeframe string.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_timeframe.in_seconds",
     "param": [
        {
           "field": "timeframe (simple string)",
           "description": "Timeframe string in timeframe string specifications format. Optional. The default is timeframe.period."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(timestamp)(?=\\s*\\()",
     "codeblock": [
        "timestamp(timezone, year, month, day, hour, minute, second) → int",
        "timestamp(dateString) → int"
     ],
     "markdown": "Returns UNIX time of specified date and time.",
     "returns": "UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_timestamp",
     "param": [
        {
           "field": "timezone (series string)",
           "description": "Allows adjusting the returned value to a time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        },
        {
           "field": "year (series int)",
           "description": "Year."
        },
        {
           "field": "month (series int)",
           "description": "Month."
        },
        {
           "field": "day (series int)",
           "description": "Day."
        },
        {
           "field": "hour (series int)",
           "description": "Hour. Optional. Default is 0."
        },
        {
           "field": "minute (series int)",
           "description": "Minute. Optional. Default is 0."
        },
        {
           "field": "second (series int)",
           "description": "Second. Optional. Default is 0."
        },
        {
           "field": "dateString (const string)",
           "description": "A string containing the date and, optionally, the time and time zone. Its format must comply with either the IETF RFC 2822 or ISO 8601 standards (\"DD MMM YYYY hh:mm:ss ±hhmm\" or \"YYYY-MM-DDThh:mm:ss±hh:mm\", so \"20 Feb 2020\" or \"2020-02-20\"). If no time is supplied, \"00:00\" is used. If no time zone is supplied, GMT+0 will be used."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(weekofyear)(?=\\s*\\()",
     "codeblock": [
        "weekofyear(time, timezone) → series int"
     ],
     "markdown": "Returns week of year (in exchange timezone) for provided UNIX time.",
     "returns": "Week of year (in exchange timezone) for provided UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_weekofyear",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time in milliseconds."
        },
        {
           "field": "timezone (series string)",
           "description": "Allows adjusting the returned value to a time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  },
   {
     "pattern": "(?<![\\.]\\s*)\\b(year)(?=\\s*\\()",
     "codeblock": [
        "year(time, timezone) → series int"
     ],
     "markdown": "Returns year (in exchange timezone) for provided UNIX time.",
     "returns": "Year (in exchange timezone) for provided UNIX time.",
     "manual": "https://www.tradingview.com/pine-script-reference/v5/#fun_year",
     "param": [
        {
           "field": "time (series int)",
           "description": "UNIX time in milliseconds."
        },
        {
           "field": "timezone (series string)",
           "description": "Allows adjusting the returned value to a time zone specified in either UTC/GMT notation (e.g., \"UTC-5\", \"GMT+0530\") or as an IANA time zone database name (e.g., \"America/New_York\"). Optional. The default is syminfo.timezone."
        }
     ]
  }
  ]