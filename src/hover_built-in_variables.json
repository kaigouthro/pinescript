[
  {
    "id": 0,
    "pattern": "(?<![\\.]\\s*)\\b(bar_index)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "bar_index",
    "markdown": "Current bar index. Numbering is zero-based, index of the first bar is 0.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_bar_index"
  },
  {
    "id": 1,
    "pattern": "(?<![\\.]\\s*)\\b(barstate\\.isconfirmed)\\b(?!\\s*[\\.\\(])",
    "codeblock": "barstate.isconfirmed",
    "markdown": "Returns true if the script is calculating the last (closing) update of the current bar. The next script calculation will be on the new bar data.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_barstate.isconfirmed"
  },
  {
    "id": 2,
    "pattern": "(?<![\\.]\\s*)\\b(barstate\\.isfirst)\\b(?!\\s*[\\.\\(])",
    "codeblock": "barstate.isfirst",
    "markdown": "Returns true if current bar is first bar in barset, false otherwise.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_barstate.isfirst"
  },
  {
    "id": 3,
    "pattern": "(?<![\\.]\\s*)\\b(barstate\\.ishistory)\\b(?!\\s*[\\.\\(])",
    "codeblock": "barstate.ishistory",
    "markdown": "Returns true if current bar is a historical bar, false otherwise.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_barstate.ishistory"
  },
  {
    "id": 4,
    "pattern": "(?<![\\.]\\s*)\\b(barstate\\.islast)\\b(?!\\s*[\\.\\(])",
    "codeblock": "barstate.islast",
    "markdown": "Returns true if current bar is the last bar in barset, false otherwise. This condition is true for all real-time bars in barset.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_barstate.islast"
  },
  {
    "id": 5,
    "pattern": "(?<![\\.]\\s*)\\b(barstate\\.islastconfirmedhistory)\\b(?!\\s*[\\.\\(])",
    "codeblock": "barstate.islastconfirmedhistory",
    "markdown": "Returns true if script is executing on the dataset's last bar when market is closed, or script is executing on the bar immediately preceding the real-time bar, if market is open. Returns false otherwise.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_barstate.islastconfirmedhistory"
  },
  {
    "id": 6,
    "pattern": "(?<![\\.]\\s*)\\b(barstate\\.isnew)\\b(?!\\s*[\\.\\(])",
    "codeblock": "barstate.isnew",
    "markdown": "Returns true if script is currently calculating on new bar, false otherwise. This variable is true when calculating on historical bars or on first update of a newly generated real-time bar.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_barstate.isnew"
  },
  {
    "id": 7,
    "pattern": "(?<![\\.]\\s*)\\b(barstate\\.isrealtime)\\b(?!\\s*[\\.\\(])",
    "codeblock": "barstate.isrealtime",
    "markdown": "Returns true if current bar is a real-time bar, false otherwise.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_barstate.isrealtime"
  },
  {
    "id": 8,
    "pattern": "(?<![\\.]\\s*)\\b(box\\.all)\\b(?!\\s*[\\.\\(])",
    "codeblock": "box.all",
    "markdown": "Returns an array filled with all the current boxes drawn by the script.",
    "type": "box[]",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_box.all"
  },
  {
    "id": 9,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.bg_color)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.bg_color",
    "markdown": "Returns the color of the chart's background from the 'Chart settings/Appearance/Background' field. When a gradient is selected, the middle point of the gradient is returned.",
    "type": "input color",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.bg_color"
  },
  {
    "id": 10,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.fg_color)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.fg_color",
    "markdown": "Returns a color providing optimal contrast with chart.bg_color.",
    "type": "input color",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.fg_color"
  },
  {
    "id": 11,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.is_heikinashi)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.is_heikinashi",
    "markdown": "Returns true if the chart type is Heikin Ashi, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.is_heikinashi"
  },
  {
    "id": 12,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.is_kagi)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.is_kagi",
    "markdown": "Returns true if the chart type is Kagi, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.is_kagi"
  },
  {
    "id": 13,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.is_linebreak)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.is_linebreak",
    "markdown": "Returns true if the chart type is Line break, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.is_linebreak"
  },
  {
    "id": 14,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.is_pnf)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.is_pnf",
    "markdown": "Returns true if the chart type is Point & figure, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.is_pnf"
  },
  {
    "id": 15,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.is_range)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.is_range",
    "markdown": "Returns true if the chart type is Range, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.is_range"
  },
  {
    "id": 16,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.is_renko)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.is_renko",
    "markdown": "Returns true if the chart type is Renko, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.is_renko"
  },
  {
    "id": 17,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.is_standard)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.is_standard",
    "markdown": "Returns true if the chart type is bars, candles, hollow candles, line, area or baseline, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.is_standard"
  },
  {
    "id": 18,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.left_visible_bar_time)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.left_visible_bar_time",
    "markdown": "The time of the leftmost bar currently visible on the chart.",
    "type": "input int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.left_visible_bar_time"
  },
  {
    "id": 19,
    "pattern": "(?<![\\.]\\s*)\\b(chart\\.right_visible_bar_time)\\b(?!\\s*[\\.\\(])",
    "codeblock": "chart.right_visible_bar_time",
    "markdown": "The time of the rightmost bar currently visible on the chart.",
    "type": "input int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_chart.right_visible_bar_time"
  },
  {
    "id": 20,
    "pattern": "(?<![\\.]\\s*)\\b(close)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "close",
    "markdown": "Close price of the current bar when it has closed, or last traded price of a yet incomplete, realtime bar.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_close"
  },
  {
    "id": 21,
    "pattern": "(?<![\\.]\\s*)\\b(dayofmonth)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "dayofmonth",
    "markdown": "Date of current bar time in exchange timezone.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_dayofmonth"
  },
  {
    "id": 22,
    "pattern": "(?<![\\.]\\s*)\\b(dayofweek)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "dayofweek",
    "markdown": "Day of week for current bar time in exchange timezone.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_dayofweek"
  },
  {
    "id": 23,
    "pattern": "(?<![\\.]\\s*)\\b(dividends\\.future_amount)\\b(?!\\s*[\\.\\(])",
    "codeblock": "dividends.future_amount",
    "markdown": "Payment amount of upcoming dividend in currency of current instrument.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_dividends.future_amount"
  },
  {
    "id": 24,
    "pattern": "(?<![\\.]\\s*)\\b(dividends\\.future_ex_date)\\b(?!\\s*[\\.\\(])",
    "codeblock": "dividends.future_ex_date",
    "markdown": "Ex-dividend date (Ex-date) of current instrument's next dividend payment.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_dividends.future_ex_date"
  },
  {
    "id": 25,
    "pattern": "(?<![\\.]\\s*)\\b(dividends\\.future_pay_date)\\b(?!\\s*[\\.\\(])",
    "codeblock": "dividends.future_pay_date",
    "markdown": "Payment date (Pay date) of current instrument's next dividend payment.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_dividends.future_pay_date"
  },
  {
    "id": 26,
    "pattern": "(?<![\\.]\\s*)\\b(earnings\\.future_eps)\\b(?!\\s*[\\.\\(])",
    "codeblock": "earnings.future_eps",
    "markdown": "Returns the estimated Earnings per Share of the next earnings report in the currency of the instrument, or na if this data isn't available.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_earnings.future_eps"
  },
  {
    "id": 27,
    "pattern": "(?<![\\.]\\s*)\\b(earnings\\.future_period_end_time)\\b(?!\\s*[\\.\\(])",
    "codeblock": "earnings.future_period_end_time",
    "markdown": "Checks the data for the next earnings report and returns the UNIX timestamp of the day when the financial period covered by those earnings ends, or na if this data isn't available.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_earnings.future_period_end_time"
  },
  {
    "id": 28,
    "pattern": "(?<![\\.]\\s*)\\b(earnings\\.future_revenue)\\b(?!\\s*[\\.\\(])",
    "codeblock": "earnings.future_revenue",
    "markdown": "Returns the estimated Revenue of the next earnings report in the currency of the instrument, or na if this data isn't available.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_earnings.future_revenue"
  },
  {
    "id": 29,
    "pattern": "(?<![\\.]\\s*)\\b(earnings\\.future_time)\\b(?!\\s*[\\.\\(])",
    "codeblock": "earnings.future_time",
    "markdown": "Returns a UNIX timestamp indicating the expected time of the next earnings report, or na if this data isn't available.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_earnings.future_time"
  },
  {
    "id": 30,
    "pattern": "(?<![\\.]\\s*)\\b(high)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "high",
    "markdown": "Current high price.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_high"
  },
  {
    "id": 31,
    "pattern": "(?<![\\.]\\s*)\\b(hl2)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "hl2",
    "markdown": "Is a shortcut for (high + low)/2",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_hl2"
  },
  {
    "id": 32,
    "pattern": "(?<![\\.]\\s*)\\b(hlc3)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "hlc3",
    "markdown": "Is a shortcut for (high + low + close)/3",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_hlc3"
  },
  {
    "id": 33,
    "pattern": "(?<![\\.]\\s*)\\b(hlcc4)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "hlcc4",
    "markdown": "Is a shortcut for (high + low + close + close)/4",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_hlcc4"
  },
  {
    "id": 34,
    "pattern": "(?<![\\.]\\s*)\\b(hour)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "hour",
    "markdown": "Current bar hour in exchange timezone.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_hour"
  },
  {
    "id": 35,
    "pattern": "(?<![\\.]\\s*)\\b(label\\.all)\\b(?!\\s*[\\.\\(])",
    "codeblock": "label.all",
    "markdown": "Returns an array filled with all the current labels drawn by the script.",
    "type": "label[]",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_label.all"
  },
  {
    "id": 36,
    "pattern": "(?<![\\.]\\s*)\\b(last_bar_index)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "last_bar_index",
    "markdown": "Bar index of the last chart bar. Bar indices begin at zero on the first bar.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_last_bar_index"
  },
  {
    "id": 37,
    "pattern": "(?<![\\.]\\s*)\\b(last_bar_time)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "last_bar_time",
    "markdown": "Time in UNIX format of the last chart bar. It is the number of milliseconds that have elapsed since 00:00:00 UTC, 1 January 1970.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_last_bar_time"
  },
  {
    "id": 38,
    "pattern": "(?<![\\.]\\s*)\\b(line\\.all)\\b(?!\\s*[\\.\\(])",
    "codeblock": "line.all",
    "markdown": "Returns an array filled with all the current lines drawn by the script.",
    "type": "line[]",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_line.all"
  },
  {
    "id": 39,
    "pattern": "(?<![\\.]\\s*)\\b(linefill\\.all)\\b(?!\\s*[\\.\\(])",
    "codeblock": "linefill.all",
    "markdown": "Returns an array filled with all the current linefill objects drawn by the script.",
    "type": "linefill[]",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_linefill.all"
  },
  {
    "id": 40,
    "pattern": "(?<![\\.]\\s*)\\b(low)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "low",
    "markdown": "Current low price.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_low"
  },
  {
    "id": 41,
    "pattern": "(?<![\\.]\\s*)\\b(minute)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "minute",
    "markdown": "Current bar minute in exchange timezone.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_minute"
  },
  {
    "id": 42,
    "pattern": "(?<![\\.]\\s*)\\b(month)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "month",
    "markdown": "Current bar month in exchange timezone.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_month"
  },
  {
    "id": 43,
    "pattern": "(?<![\\.]\\s*)\\b(na)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "na",
    "markdown": "A keyword signifying 'not available', indicating that a variable has no assigned value.",
    "type": "simple na",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_na"
  },
  {
    "id": 44,
    "pattern": "(?<![\\.]\\s*)\\b(ohlc4)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "ohlc4",
    "markdown": "Is a shortcut for (open + high + low + close)/4",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ohlc4"
  },
  {
    "id": 45,
    "pattern": "(?<![\\.]\\s*)\\b(open)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "open",
    "markdown": "Current open price.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_open"
  },
  {
    "id": 46,
    "pattern": "(?<![\\.]\\s*)\\b(polyline\\.all)\\b(?!\\s*[\\.\\(])",
    "codeblock": "polyline.all",
    "markdown": "Returns an array containing all current polyline instances drawn by the script.",
    "type": "polyline[]",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_polyline.all"
  },
  {
    "id": 47,
    "pattern": "(?<![\\.]\\s*)\\b(second)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "second",
    "markdown": "Current bar second in exchange timezone.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_second"
  },
  {
    "id": 48,
    "pattern": "(?<![\\.]\\s*)\\b(session\\.isfirstbar)\\b(?!\\s*[\\.\\(])",
    "codeblock": "session.isfirstbar",
    "markdown": "Returns true if the current bar is the first bar of the day's session, `false` otherwise. If extended session information is used, only returns true on the first bar of the pre-market bars.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_session.isfirstbar"
  },
  {
    "id": 49,
    "pattern": "(?<![\\.]\\s*)\\b(session\\.isfirstbar_regular)\\b(?!\\s*[\\.\\(])",
    "codeblock": "session.isfirstbar_regular",
    "markdown": "Returns true on the first regular session bar of the day, `false` otherwise. The result is the same whether extended session information is used or not.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_session.isfirstbar_regular"
  },
  {
    "id": 50,
    "pattern": "(?<![\\.]\\s*)\\b(session\\.islastbar)\\b(?!\\s*[\\.\\(])",
    "codeblock": "session.islastbar",
    "markdown": "Returns true if the current bar is the last bar of the day's session, `false` otherwise. If extended session information is used, only returns true on the last bar of the post-market bars.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_session.islastbar"
  },
  {
    "id": 51,
    "pattern": "(?<![\\.]\\s*)\\b(session\\.islastbar_regular)\\b(?!\\s*[\\.\\(])",
    "codeblock": "session.islastbar_regular",
    "markdown": "Returns true on the last regular session bar of the day, `false` otherwise. The result is the same whether extended session information is used or not.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_session.islastbar_regular"
  },
  {
    "id": 52,
    "pattern": "(?<![\\.]\\s*)\\b(session\\.ismarket)\\b(?!\\s*[\\.\\(])",
    "codeblock": "session.ismarket",
    "markdown": "Returns true if the current bar is a part of the regular trading hours (i.e. market hours), false otherwise.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_session.ismarket"
  },
  {
    "id": 53,
    "pattern": "(?<![\\.]\\s*)\\b(session\\.ispostmarket)\\b(?!\\s*[\\.\\(])",
    "codeblock": "session.ispostmarket",
    "markdown": "Returns true if the current bar is a part of the post-market, false otherwise. On non-intraday charts always returns false.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_session.ispostmarket"
  },
  {
    "id": 54,
    "pattern": "(?<![\\.]\\s*)\\b(session\\.ispremarket)\\b(?!\\s*[\\.\\(])",
    "codeblock": "session.ispremarket",
    "markdown": "Returns true if the current bar is a part of the pre-market, false otherwise. On non-intraday charts always returns false.",
    "type": "series bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_session.ispremarket"
  },
  {
    "id": 55,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.account_currency)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.account_currency",
    "markdown": "Returns the currency used to calculate results, which can be set in the strategy's properties.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.account_currency"
  },
  {
    "id": 56,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.closedtrades)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.closedtrades",
    "markdown": "Number of trades, which were closed for the whole trading interval.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.closedtrades"
  },
  {
    "id": 57,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.equity)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.equity",
    "markdown": "Current equity (strategy.initial_capital + strategy.netprofit + strategy.openprofit).",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.equity"
  },
  {
    "id": 58,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.eventrades)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.eventrades",
    "markdown": "Number of breakeven trades for the whole trading interval.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.eventrades"
  },
  {
    "id": 59,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.grossloss)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.grossloss",
    "markdown": "Total currency value of all completed losing trades.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.grossloss"
  },
  {
    "id": 60,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.grossprofit)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.grossprofit",
    "markdown": "Total currency value of all completed winning trades.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.grossprofit"
  },
  {
    "id": 61,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.initial_capital)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.initial_capital",
    "markdown": "The amount of initial capital set in the strategy properties.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.initial_capital"
  },
  {
    "id": 62,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.long)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.long",
    "markdown": "Long position entry.",
    "type": "const strategy_direction",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.long"
  },
  {
    "id": 63,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.losstrades)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.losstrades",
    "markdown": "Number of unprofitable trades for the whole trading interval.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.losstrades"
  },
  {
    "id": 64,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.margin_liquidation_price)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.margin_liquidation_price",
    "markdown": "When margin is used in a strategy, returns the price point where a simulated margin call will occur and liquidate enough of the position to meet the margin requirements.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.margin_liquidation_price"
  },
  {
    "id": 65,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.max_contracts_held_all)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.max_contracts_held_all",
    "markdown": "Maximum number of contracts/shares/lots/units in one trade for the whole trading interval.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.max_contracts_held_all"
  },
  {
    "id": 66,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.max_contracts_held_long)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.max_contracts_held_long",
    "markdown": "Maximum number of contracts/shares/lots/units in one long trade for the whole trading interval.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.max_contracts_held_long"
  },
  {
    "id": 67,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.max_contracts_held_short)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.max_contracts_held_short",
    "markdown": "Maximum number of contracts/shares/lots/units in one short trade for the whole trading interval.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.max_contracts_held_short"
  },
  {
    "id": 68,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.max_drawdown)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.max_drawdown",
    "markdown": "Maximum equity drawdown value for the whole trading interval.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.max_drawdown"
  },
  {
    "id": 69,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.max_runup)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.max_runup",
    "markdown": "Maximum equity run-up value for the whole trading interval.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.max_runup"
  },
  {
    "id": 70,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.netprofit)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.netprofit",
    "markdown": "Total currency value of all completed trades.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.netprofit"
  },
  {
    "id": 71,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.openprofit)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.openprofit",
    "markdown": "Current unrealized profit or loss for all open positions.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.openprofit"
  },
  {
    "id": 72,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.opentrades)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.opentrades",
    "markdown": "Number of market position entries, which were not closed and remain opened. If there is no open market position, 0 is returned.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.opentrades"
  },
  {
    "id": 73,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.position_avg_price)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.position_avg_price",
    "markdown": "Average entry price of current market position. If the market position is flat, 'NaN' is returned.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.position_avg_price"
  },
  {
    "id": 74,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.position_entry_name)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.position_entry_name",
    "markdown": "Name of the order that initially opened current market position.",
    "type": "series string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.position_entry_name"
  },
  {
    "id": 75,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.position_size)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.position_size",
    "markdown": "Direction and size of the current market position. If the value is > 0, the market position is long. If the value is < 0, the market position is short. The absolute value is the number of contracts/shares/lots/units in trade (position size).",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.position_size"
  },
  {
    "id": 76,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.short)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.short",
    "markdown": "Short position entry.",
    "type": "const strategy_direction",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.short"
  },
  {
    "id": 77,
    "pattern": "(?<![\\.]\\s*)\\b(strategy\\.wintrades)\\b(?!\\s*[\\.\\(])",
    "codeblock": "strategy.wintrades",
    "markdown": "Number of profitable trades for the whole trading interval.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_strategy.wintrades"
  },
  {
    "id": 78,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.basecurrency)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.basecurrency",
    "markdown": "Base currency for the symbol. For the symbol 'BTCUSD' returns 'BTC'.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.basecurrency"
  },
  {
    "id": 79,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.country)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.country",
    "markdown": "Returns the two-letter code of the country where the symbol is traded, in the ISO 3166-1 alpha-2 format, or na if the exchange is not directly tied to a specific country. For example, on 'NASDAQ:AAPL' it will return 'US', on 'LSE:AAPL' it will return 'GB', and on 'BITSTAMP:BTCUSD' it will return na.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.country"
  },
  {
    "id": 80,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.currency)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.currency",
    "markdown": "Currency for the current symbol. Returns currency code: 'USD', 'EUR', etc.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.currency"
  },
  {
    "id": 81,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.description)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.description",
    "markdown": "Description for the current symbol.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.description"
  },
  {
    "id": 82,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.industry)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.industry",
    "markdown": "Returns the industry of the symbol, or na if the symbol has no industry. Example: 'Internet Software/Services', 'Packaged software', 'Integrated Oil', 'Motor Vehicles', etc. These are the same values one can see in the chart's 'Symbol info' window.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.industry"
  },
  {
    "id": 83,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.minmove)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.minmove",
    "markdown": "Returns a whole number used to calculate the smallest increment between a symbol's price movements (syminfo.mintick). It is the numerator in the syminfo.mintick formula.",
    "type": "simple int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.minmove"
  },
  {
    "id": 84,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.mintick)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.mintick",
    "markdown": "Min tick value for the current symbol.",
    "type": "simple float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.mintick"
  },
  {
    "id": 85,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.pointvalue)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.pointvalue",
    "markdown": "Point value for the current symbol.",
    "type": "simple float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.pointvalue"
  },
  {
    "id": 86,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.prefix)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.prefix",
    "markdown": "Prefix of current symbol name (i.e. for 'CME_EOD:TICKER' prefix is 'CME_EOD').",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.prefix"
  },
  {
    "id": 87,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.pricescale)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.pricescale",
    "markdown": "Returns a whole number used to calculate the smallest increment between a symbol's price movements (syminfo.mintick). It is the denominator in the syminfo.mintick formula.",
    "type": "simple int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.pricescale"
  },
  {
    "id": 88,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.root)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.root",
    "markdown": "Root for derivatives like futures contract. For other symbols returns the same value as syminfo.ticker.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.root"
  },
  {
    "id": 89,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.sector)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.sector",
    "markdown": "Returns the sector of the symbol, or na if the symbol has no sector. Example: 'Electronic Technology', 'Technology services', 'Energy Minerals', 'Consumer Durables', etc. These are the same values one can see in the chart's 'Symbol info' window.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.sector"
  },
  {
    "id": 90,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.session)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.session",
    "markdown": "Session type of the chart main series. Possible values are session.regular, session.extended.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.session"
  },
  {
    "id": 91,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.ticker)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.ticker",
    "markdown": "Symbol name without exchange prefix, e.g. 'MSFT'.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.ticker"
  },
  {
    "id": 92,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.tickerid)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.tickerid",
    "markdown": "Returns the full form of the ticker ID representing a symbol, for use as an argument in functions with a `ticker` or `symbol` parameter. It always includes the prefix (exchange) and ticker separated by a colon ('NASDAQ:AAPL'), but it can also include other symbol data such as dividend adjustment, chart type, currency conversion, etc.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.tickerid"
  },
  {
    "id": 93,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.timezone)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.timezone",
    "markdown": "Timezone of the exchange of the chart main series. Possible values see in timestamp.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.timezone"
  },
  {
    "id": 94,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.type)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.type",
    "markdown": "Type of the current symbol. Possible values are stock, futures, index, forex, crypto, fund, dr.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.type"
  },
  {
    "id": 95,
    "pattern": "(?<![\\.]\\s*)\\b(syminfo\\.volumetype)\\b(?!\\s*[\\.\\(])",
    "codeblock": "syminfo.volumetype",
    "markdown": "Volume type of the current symbol. Possible values are: 'base' for base currency, 'quote' for quote currency, 'tick' for the number of transactions, and 'n/a' when there is no volume or its type is not specified.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_syminfo.volumetype"
  },
  {
    "id": 96,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.accdist)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.accdist",
    "markdown": "Accumulation/distribution index.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.accdist"
  },
  {
    "id": 97,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.iii)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.iii",
    "markdown": "Intraday Intensity Index.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.iii"
  },
  {
    "id": 98,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.nvi)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.nvi",
    "markdown": "Negative Volume Index.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.nvi"
  },
  {
    "id": 99,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.obv)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.obv",
    "markdown": "On Balance Volume.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.obv"
  },
  {
    "id": 100,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.pvi)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.pvi",
    "markdown": "Positive Volume Index.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.pvi"
  },
  {
    "id": 101,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.pvt)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.pvt",
    "markdown": "Price-Volume Trend.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.pvt"
  },
  {
    "id": 102,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.tr)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.tr",
    "markdown": "True range. Same as tr(false). It is max(high - low, abs(high - close[1]), abs(low - close[1]))",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.tr"
  },
  {
    "id": 103,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.vwap)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.vwap",
    "markdown": "Volume Weighted Average Price. It uses hlc3 as its source series.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.vwap"
  },
  {
    "id": 104,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.wad)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.wad",
    "markdown": "Williams Accumulation/Distribution.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.wad"
  },
  {
    "id": 105,
    "pattern": "(?<![\\.]\\s*)\\b(ta\\.wvad)\\b(?!\\s*[\\.\\(])",
    "codeblock": "ta.wvad",
    "markdown": "Williams Variable Accumulation/Distribution.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_ta.wvad"
  },
  {
    "id": 106,
    "pattern": "(?<![\\.]\\s*)\\b(table\\.all)\\b(?!\\s*[\\.\\(])",
    "codeblock": "table.all",
    "markdown": "Returns an array filled with all the current tables drawn by the script.",
    "type": "table[]",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_table.all"
  },
  {
    "id": 107,
    "pattern": "(?<![\\.]\\s*)\\b(time)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "time",
    "markdown": "Current bar time in UNIX format. It is the number of milliseconds that have elapsed since 00:00:00 UTC, 1 January 1970.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_time"
  },
  {
    "id": 108,
    "pattern": "(?<![\\.]\\s*)\\b(time_close)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "time_close",
    "markdown": "Current bar close time in UNIX format. It is the number of milliseconds that have elapsed since 00:00:00 UTC, 1 January 1970. On price-based charts this variable value is na.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_time_close"
  },
  {
    "id": 109,
    "pattern": "(?<![\\.]\\s*)\\b(time_tradingday)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "time_tradingday",
    "markdown": "The beginning time of the trading day the current bar belongs to, in UNIX format (the number of milliseconds that have elapsed since 00:00:00 UTC, 1 January 1970).",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_time_tradingday"
  },
  {
    "id": 110,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.isdaily)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.isdaily",
    "markdown": "Returns true if current resolution is a daily resolution, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.isdaily"
  },
  {
    "id": 111,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.isdwm)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.isdwm",
    "markdown": "Returns true if current resolution is a daily or weekly or monthly resolution, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.isdwm"
  },
  {
    "id": 112,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.isintraday)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.isintraday",
    "markdown": "Returns true if current resolution is an intraday (minutes or seconds) resolution, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.isintraday"
  },
  {
    "id": 113,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.isminutes)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.isminutes",
    "markdown": "Returns true if current resolution is a minutes resolution, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.isminutes"
  },
  {
    "id": 114,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.ismonthly)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.ismonthly",
    "markdown": "Returns true if current resolution is a monthly resolution, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.ismonthly"
  },
  {
    "id": 115,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.isseconds)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.isseconds",
    "markdown": "Returns true if current resolution is a seconds resolution, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.isseconds"
  },
  {
    "id": 116,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.isweekly)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.isweekly",
    "markdown": "Returns true if current resolution is a weekly resolution, false otherwise.",
    "type": "simple bool",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.isweekly"
  },
  {
    "id": 117,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.multiplier)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.multiplier",
    "markdown": "Multiplier of resolution, e.g. '60' - 60, 'D' - 1, '5D' - 5, '12M' - 12.",
    "type": "simple int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.multiplier"
  },
  {
    "id": 118,
    "pattern": "(?<![\\.]\\s*)\\b(timeframe\\.period)\\b(?!\\s*[\\.\\(])",
    "codeblock": "timeframe.period",
    "markdown": "A string representation of the chart's timeframe. The returned string's format is `[<quantity>][<units>]`, where `<quantity>` and `<units>` are in some cases absent. `<quantity>` is the number of units, but it is absent if that number is 1. `<unit>` is 'S' for seconds, 'D' for days, 'W' for weeks, 'M' for months, but it is absent for minutes. No `<unit>` exists for hours. The variable will return: '10S' for 10 seconds, '60' for 60 minutes, 'D' for one day, '2W' for two weeks, '3M' for one quarter. Can be used as an argument with any function containing a `timeframe` parameter.",
    "type": "simple string",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timeframe.period"
  },
  {
    "id": 119,
    "pattern": "(?<![\\.]\\s*)\\b(timenow)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "timenow",
    "markdown": "Current time in UNIX format. It is the number of milliseconds that have elapsed since 00:00:00 UTC, 1 January 1970.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_timenow"
  },
  {
    "id": 120,
    "pattern": "(?<![\\.]\\s*)\\b(volume)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "volume",
    "markdown": "Current bar volume.",
    "type": "series float",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_volume"
  },
  {
    "id": 121,
    "pattern": "(?<![\\.]\\s*)\\b(weekofyear)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "weekofyear",
    "markdown": "Week number of current bar time in exchange timezone.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_weekofyear"
  },
  {
    "id": 122,
    "pattern": "(?<![\\.]\\s*)\\b(year)\\b(?=(?!\\s*(?:[\\.\\(\\=]|(?:\\:\\=)))|(?:\\s*\\=\\=))",
    "codeblock": "year",
    "markdown": "Current bar year in exchange timezone.",
    "type": "series int",
    "manual": "https://www.tradingview.com/pine-script-reference/v5/#var_year"
  }
 ]