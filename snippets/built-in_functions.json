{
  "alert ⇨ 𝑓": {
     "prefix": "alert",
     "body": [
        "alert(message = ${1:\"${2:}\"}, freq = ${3| ,alert.freq_all,alert.freq_once_per_bar,alert.freq_once_per_bar_close|})",
        "${0}"
     ],
     "description": "Creates an alert ⇨ 𝑓 | alert(message = string, freq = input string) → void"
  },
  "alertcondition ⇨ 𝑓": {
     "prefix": "alertcondition",
     "body": [
        "alertcondition(condition = $1${2:, title = \"${3}\"}, message = ${4:\"${5}\"}) $0"
     ],
     "description": "Creates an alert condition ⇨ 𝑓 | alertcondition(condition = bool, title = const string, message = const string) → int|float"
  },
  "array.abs ⇨ 𝑓": {
     "prefix": "array.abs",
     "body": [
        "array.abs(id = $1) $0"
     ],
     "description": "Returns an array containing the absolute value of each element in the original array. ⇨ 𝑓 | array.abs(id = int[]|float[]) → int|float"
  },
  "array.avg ⇨ 𝑓": {
     "prefix": "array.avg",
     "body": [
        "array.avg(id = $1) $0"
     ],
     "description": "Mean of an array's elements ⇨ 𝑓 | array.avg(id = int[]|float[]) → int|float"
  },
  "array.binary_search ⇨ 𝑓": {
     "prefix": "array.binary_search",
     "body": [
        "array.binary_search(id = $1, val = $2) $0"
     ],
     "description": "Returns the index of the value else -1. Array must be sorted in ascending order. ⇨ 𝑓 | array.binary_search(id = any array object, val = series int|float) → series int"
  },
  "array.binary_search_leftmost ⇨ 𝑓": {
     "prefix": "array.binary_search_leftmost",
     "body": [
        "array.binary_search_leftmost(id = $1, val = $2) $0"
     ],
     "description": "Returns the index of the value. If value not found, returns the index of the next smallest element to the left of where the value would lie if it was in the array. Array must be sorted in ascending order. ⇨ 𝑓 | array.binary_search_leftmost(id = any array object, val = series int|float) → series int"
  },
  "array.binary_search_rightmost ⇨ 𝑓": {
     "prefix": "array.binary_search_rightmost",
     "body": [
        "array.binary_search_rightmost(id = $1, val = $2) $0"
     ],
     "description": "Returns the index of the value. If value not found, returns the index of the element to the right of where the value would lie if it was in the array. Array must be sorted in ascending order. ⇨ 𝑓 | array.binary_search_rightmost(id = any array object, val = series int|float) → series int"
  },
  "array.clear ⇨ 𝑓": {
     "prefix": "array.clear",
     "body": [
        "array.clear(id = $1) $0"
     ],
     "description": "Removes all elements from an array ⇨ 𝑓 | array.clear(id = any array type) → void"
  },
  "array.concat ⇨ 𝑓": {
     "prefix": "array.concat",
     "body": [
        "array.concat(id1 = $1, id2 = $2) $0"
     ],
     "description": "Merges two arrays ⇨ 𝑓 | array.concat(id1 = any array type, id2 = any array type) → type[]"
  },
  "array.copy ⇨ 𝑓": {
     "prefix": "array.copy",
     "body": [
        "array.copy(id = $1) $0"
     ],
     "description": "Copy of an existing array ⇨ 𝑓 | array.copy(id = any array type) → array"
  },
  "array.covariance ⇨ 𝑓": {
     "prefix": "array.covariance",
     "body": [
        "array.covariance(id1 = $1, id2 = $2) $0"
     ],
     "description": "Covariance of two arrays ⇨ 𝑓 | array.covariance(id1 = int[]|float[], id2 = int[]|float[]) → float"
  },
  "array.every ⇨ 𝑓": {
     "prefix": "array.every",
     "body": [
        "array.every(id = $1) $0"
     ],
     "description": "True if all elements are true else false ⇨ 𝑓 | array.every(id = any array object) → series bool"
  },
  "array.fill ⇨ 𝑓": {
     "prefix": "array.fill",
     "body": [
        "array.fill(id = $1, value = $2, index_from = $3, index_to = $4) $0"
     ],
     "description": "Sets elements of an array to a single value ⇨ 𝑓 | array.fill(id = any array type, value = series <type of the array's elements>, index_from = int, index_to = int) → bool[]"
  },
  "array.first ⇨ 𝑓": {
     "prefix": "array.first",
     "body": [
        "array.first(id = $1) $0"
     ],
     "description": "Returns the array's first element. ⇨ 𝑓 | array.first(id = any array object) → series any type"
  },
  "array.from ⇨ 𝑓": {
     "prefix": "array.from",
     "body": [
        "array.from(arg0 = ${1}${2:, arg1 = ${3}}${4:, arg3 = ${5}}) $0"
     ],
     "description": "Variable number of arguments and returns an array of the corresponding type ⇨ 𝑓 | array.from(arg0 = series of any argument array type, ...) → (int|float|bool|color|string|label|line|box|table)[]"
  },
  "array.get ⇨ 𝑓": {
     "prefix": "array.get",
     "body": [
        "array.get(id = $1, index = $2) $0"
     ],
     "description": "Returns the value of the element at the specified index ⇨ 𝑓 | array.get(id = any array type, index = int) → series <type of the array's elements>"
  },
  "array.includes ⇨ 𝑓": {
     "prefix": "array.includes",
     "body": [
        "array.includes(id = $1, value = $2) $0"
     ],
     "description": "True if the value was found in an array else false ⇨ 𝑓 | array.includes(id = any array type, value = series <type of the array's elements>) → series bool"
  },
  "array.indexof ⇨ 𝑓": {
     "prefix": "array.indexof",
     "body": [
        "array.indexof(id = $1, value = $2) $0"
     ],
     "description": "Index of the first occurrence of the value else -1 ⇨ 𝑓 | array.indexof(id = any array type, value = series <type of the array's elements>) → int"
  },
  "array.insert ⇨ 𝑓": {
     "prefix": "array.insert",
     "body": [
        "array.insert(id = $1, index = $2, value = $3) $0"
     ],
     "description": "Changes the contents by adding new elements in place ⇨ 𝑓 | array.insert(id = any array type, index = int, value = series <type of the array's elements>) → void"
  },
  "array.join ⇨ 𝑓": {
     "prefix": "array.join",
     "body": [
        "array.join(id = $1, separator = ${2:\"${3}\"}) $0"
     ],
     "description": "Concatenating all the elements of an array, separated by `separator ⇨ 𝑓 | array.join(id = int[]|float[]|string[], separator = series string) → series string"
  },
  "array.lastindexof ⇨ 𝑓": {
     "prefix": "array.lastindexof",
     "body": [
        "array.lastindexof(id = $1, value = $2) $0"
     ],
     "description": "Index of the last occurrence of the value else -1 ⇨ 𝑓 | array.lastindexof(id = any array type, value = series <type of the array's elements>) → int"
  },
  "array.max ⇨ 𝑓": {
     "prefix": "array.max",
     "body": [
        "array.max(id = $1) $0"
     ],
     "description": "Largest value from a given array ⇨ 𝑓 | array.max(id = int[]|float[]) → series int|float"
  },
  "array.median ⇨ 𝑓": {
     "prefix": "array.median",
     "body": [
        "array.median(id = $1) $0"
     ],
     "description": "Median of an array's elements ⇨ 𝑓 | array.median(id = int[]|float[]) → series int|float"
  },
  "array.min ⇨ 𝑓": {
     "prefix": "array.min",
     "body": [
        "array.min(id = $1) $0"
     ],
     "description": "Lowest value of an array's elements ⇨ 𝑓 | array.min(id = int[]|float[]) → series int|float"
  },
  "array.mode ⇨ 𝑓": {
     "prefix": "array.mode",
     "body": [
        "array.mode(id = $1) $0"
     ],
     "description": "Mode of an array's elements ⇨ 𝑓 | array.mode(id = int[]|float[]) → series int|float"
  },
  "array.new_bool ⇨ 𝑓": {
     "prefix": "array.new_bool",
     "body": [
        "array.new_bool(size = $1, initial_value = $2) $0"
     ],
     "description": "Creates a new array object of bool ⇨ 𝑓 | array.new_bool(size = bool, initial_value = series bool) → bool[]"
  },
  "array.new_box ⇨ 𝑓": {
     "prefix": "array.new_box",
     "body": [
        "array.new_box(size = $1, initial_value = $2) $0"
     ],
     "description": "Creates a new array object of box ⇨ 𝑓 | array.new_box(size = box, initial_value = series box) → box[]"
  },
  "array.new_color ⇨ 𝑓": {
     "prefix": "array.new_color",
     "body": [
        "array.new_color(size = $1, initial_value = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${3:0})) $0"
     ],
     "description": "Creates a new array object of color ⇨ 𝑓 | array.new_color(size = color, initial_value = series color) → color[]"
  },
  "array.new_float ⇨ 𝑓": {
     "prefix": "array.new_float",
     "body": [
        "array.new_float(size = $1, initial_value = $2) $0"
     ],
     "description": "Creates a new array object of float ⇨ 𝑓 | array.new_float(size = float, initial_value = series float) → float[]"
  },
  "array.new_int ⇨ 𝑓": {
     "prefix": "array.new_int",
     "body": [
        "array.new_int(size = $1, initial_value = $2) $0"
     ],
     "description": "Creates a new array object of int ⇨ 𝑓 | array.new_int(size = int, initial_value = series int) → int[]"
  },
  "array.new_label ⇨ 𝑓": {
     "prefix": "array.new_label",
     "body": [
        "array.new_label(size = $1, initial_value = $2) $0"
     ],
     "description": "Creates a new array object of label ⇨ 𝑓 | array.new_label(size = int, initial_value = series label) → label[]"
  },
  "array.new_line ⇨ 𝑓": {
     "prefix": "array.new_line",
     "body": [
        "array.new_line(size = $1, initial_value = $2) $0"
     ],
     "description": "Creates a new array object of line ⇨ 𝑓 | array.new_line(size = int, initial_value = series line) → line[]"
  },
  "array.new_linefill ⇨ 𝑓": {
     "prefix": "array.new_linefill",
     "body": [
        "array.new_linefill(size = $1, initial_value = $2) $0"
     ],
     "description": "Creates a new array object of linefill ⇨ 𝑓 | array.new_linefill(size = int, initial_value = series linefill) → linefill[]"
  },
  "array.new_string ⇨ 𝑓": {
     "prefix": "array.new_string",
     "body": [
        "array.new_string(size = $1, initial_value = ${2:\"${3}\"}) $0"
     ],
     "description": "Creates a new array object of string ⇨ 𝑓 | array.new_string(size = int, initial_value = series string) → string[]"
  },
  "array.new_table ⇨ 𝑓": {
     "prefix": "array.new_table",
     "body": [
        "array.new_table(size = $1, initial_value = $2) $0"
     ],
     "description": "Creates a new array object of table ⇨ 𝑓 | array.new_table(size = int, initial_value = series table) → table[]"
  },
  "array.percentile_linear_interpolation ⇨ 𝑓": {
     "prefix": "array.percentile_linear_interpolation",
     "body": [
        "array.percentile_linear_interpolation(id = $1, percentage = $2) $0"
     ],
     "description": "Returns the value for which percentile are less than or equal to it, using linear interpolation. ⇨ 𝑓 | array.percentile_linear_interpolation(id = int[]|float[], percentage = series int|float) → series int|float"
  },
  "array.percentile_nearest_rank ⇨ 𝑓": {
     "prefix": "array.percentile_nearest_rank",
     "body": [
        "array.percentile_nearest_rank(id = $1, percentage = $2) $0"
     ],
     "description": "Returns the value for which percentile are less than or equal to it, using the nearest-rank method. ⇨ 𝑓 | array.percentile_nearest_rank(id = int[]|float[], percentage = series int|float) → series int|float"
  },
  "array.percentrank ⇨ 𝑓": {
     "prefix": "array.percentrank",
     "body": [
        "array.percentrank(id = $1, index = $2) $0"
     ],
     "description": "Returns the percentile rank of the element at the specified `index`. ⇨ 𝑓 | array.percentrank(id = int[]|float[], index = series int) → series int|float"
  },
  "array.pop ⇨ 𝑓": {
     "prefix": "array.pop",
     "body": [
        "array.pop(id = $1) $0"
     ],
     "description": "Removes the last element from an array and returns its value ⇨ 𝑓 | array.pop(id = any array type) → series <type of the array's elements>"
  },
  "array.push ⇨ 𝑓": {
     "prefix": "array.push",
     "body": [
        "array.push(id = $1, value = $2) $0"
     ],
     "description": "Appends a value to an array ⇨ 𝑓 | array.push(id = any array type, value = <type of the array's elements>) → series void"
  },
  "array.range ⇨ 𝑓": {
     "prefix": "array.range",
     "body": [
        "array.range(id = $1) $0"
     ],
     "description": "Difference between min and max from array ⇨ 𝑓 | array.range(id = int[]|float[]) → int|float"
  },
  "array.remove ⇨ 𝑓": {
     "prefix": "array.remove",
     "body": [
        "array.remove(id = $1, index = $2) $0"
     ],
     "description": "Remove array's element with the specified index ⇨ 𝑓 | array.remove(id = any array type, index = int) → series <type of the array's elements>"
  },
  "array.reverse ⇨ 𝑓": {
     "prefix": "array.reverse",
     "body": [
        "array.reverse(id = $1) $0"
     ],
     "description": "First array element = last and last = first ⇨ 𝑓 | array.reverse(id = any array type) → void"
  },
  "array.set ⇨ 𝑓": {
     "prefix": "array.set",
     "body": [
        "array.set(id = $1, index = $2, value = $3) $0"
     ],
     "description": "Sets the value of the element at the specified index ⇨ 𝑓 | array.set(id = any array type, index = int, value = <type of the array's elements>) → void"
  },
  "array.shift ⇨ 𝑓": {
     "prefix": "array.shift",
     "body": [
        "array.shift(id = $1) $0"
     ],
     "description": "Removes an array's first element and returns its value ⇨ 𝑓 | array.shift(id = any array type) → series <type of the array's elements>"
  },
  "array.size ⇨ 𝑓": {
     "prefix": "array.size",
     "body": [
        "array.size(id = $1) $0"
     ],
     "description": "Number of elements in an array ⇨ 𝑓 | array.size(id = any array type) → series int"
  },
  "array.slice ⇨ 𝑓": {
     "prefix": "array.slice",
     "body": [
        "array.slice(id = $1, index_from = $2, index_to = $3) $0"
     ],
     "description": "Slice from an existing array ⇨ 𝑓 | array.slice(id = any array type, index_from = int, index_to = int) → int|float"
  },
  "array.sort ⇨ 𝑓": {
     "prefix": "array.sort",
     "body": [
        "array.sort(id = $1, order = ${2| ,order.ascending,order.descending|}) $0"
     ],
     "description": "Sorts the elements of an array ⇨ 𝑓 | array.sort(id = int[]|float[]|string[], order = sort_order) → void"
  },
  "array.sort_indices ⇨ 𝑓": {
     "prefix": "array.sort_indices",
     "body": [
        "array.sort_indices(id = $1, order = ${2| ,order.ascending,order.descending|}) $0"
     ],
     "description": "Returns an array of indices which, when used to index the original array, will access its elements in their sorted order. ⇨ 𝑓 | array.sort_indices(id = float[], order = sort_order) → int[]"
  },
  "array.standardize ⇨ 𝑓": {
     "prefix": "array.standardize",
     "body": [
        "array.standardize(id = $1) $0"
     ],
     "description": "Returns the array of standardized elements ⇨ 𝑓 | array.standardize(id = int[]|float[]) → int[]|float[]"
  },
  "array.stdev ⇨ 𝑓": {
     "prefix": "array.stdev",
     "body": [
        "array.stdev(id = $1) $0"
     ],
     "description": "Standard deviation of an array's elements ⇨ 𝑓 | array.stdev(id = int[]|float[]) → int|float"
  },
  "array.sum ⇨ 𝑓": {
     "prefix": "array.sum",
     "body": [
        "array.sum(id = $1) $0"
     ],
     "description": "Sum of an array's elements ⇨ 𝑓 | array.sum(id = int[]|float[]) → int|float"
  },
  "array.unshift ⇨ 𝑓": {
     "prefix": "array.unshift",
     "body": [
        "array.unshift(id = $1, value = $2) $0"
     ],
     "description": "Inserts the value at the beginning of the array ⇨ 𝑓 | array.unshift(id = any array type, value = type of the array's elements) → int|float"
  },
  "array.variance ⇨ 𝑓": {
     "prefix": "array.variance",
     "body": [
        "array.variance(id = $1) $0"
     ],
     "description": "Variance of an array's elements ⇨ 𝑓 | array.variance(id = int[]|float[]) → int|float"
  },
  "matrix.add_col ⇨ 𝑓": {
     "prefix": "matrix.add_col",
     "body": [
        "matrix.add_col(id = $1, column = $2) $0"
     ],
     "description": "Add a column to the matrix ⇨ 𝑓 | matrix.add_col(id = any matrix type, column = int) → void"
  },
  "matrix.add_row ⇨ 𝑓": {
     "prefix": "matrix.add_row",
     "body": [
        "matrix.add_row(id = $1, row = $2) $0"
     ],
     "description": "Add a row to the matrix ⇨ 𝑓 | matrix.add_row(id = any matrix type, row = int) → void"
  },
  "matrix.avg ⇨ 𝑓": {
     "prefix": "matrix.avg",
     "body": [
        "matrix.avg(id = $1) $0"
     ],
     "description": "Average of all elements in the matrix ⇨ 𝑓 | matrix.avg(id = matrix<int>|matrix<float>) → int|float"
  },
  "matrix.col ⇨ 𝑓": {
     "prefix": "matrix.col",
     "body": [
        "matrix.col(id = $1, column = $2) $0"
     ],
     "description": "Creates a 1-D array from the elements of a matrix column ⇨ 𝑓 | matrix.col(id = any matrix type, column = int) → type[]"
  },
  "matrix.columns ⇨ 𝑓": {
     "prefix": "matrix.columns",
     "body": [
        "matrix.columns(id = $1) $0"
     ],
     "description": "Number of columns in the matrix ⇨ 𝑓 | matrix.columns(id = any matrix type) → series int"
  },
  "matrix.concat ⇨ 𝑓": {
     "prefix": "matrix.concat",
     "body": [
        "matrix.concat(id1 = $1, id2 = $2) $0"
     ],
     "description": "Merges two matrices ⇨ 𝑓 | matrix.concat(id1 = any matrix type, id2 = any matrix type) → matrix<type>"
  },
  "matrix.copy ⇨ 𝑓": {
     "prefix": "matrix.copy",
     "body": [
        "matrix.copy(id = $1) $0"
     ],
     "description": "Copy of an existing matrix ⇨ 𝑓 | matrix.copy(id = any matrix type) → matrix<type>"
  },
  "matrix.det ⇨ 𝑓": {
     "prefix": "matrix.det",
     "body": [
        "matrix.det(id = $1) $0"
     ],
     "description": "Determinant of a square matrix ⇨ 𝑓 | matrix.det(id = matrix<int>|matrix<float>) → int|float"
  },
  "matrix.diff ⇨ 𝑓": {
     "prefix": "matrix.diff",
     "body": [
        "matrix.diff(id1 = $1, id2 = $2) $0"
     ],
     "description": "Difference between two matrices or a scalar value ⇨ 𝑓 | matrix.diff(id1 = matrix<int>|matrix<float>, id2 = int|float|matrix<int>|matrix<float>) → matrix<int>|matrix<float>"
  },
  "matrix.eigenvalues ⇨ 𝑓": {
     "prefix": "matrix.eigenvalues",
     "body": [
        "matrix.eigenvalues(id = $1) $0"
     ],
     "description": "Eigenvalues of a square matrix ⇨ 𝑓 | matrix.eigenvalues(id = matrix<int>|matrix<float>) → int|float"
  },
  "matrix.eigenvectors ⇨ 𝑓": {
     "prefix": "matrix.eigenvectors",
     "body": [
        "matrix.eigenvectors(id = $1) $0"
     ],
     "description": "Returns a matrix of eigenvectors ⇨ 𝑓 | matrix.eigenvectors(id = matrix<int>|matrix<float>) → matrix<int>|matrix<float>"
  },
  "matrix.elements_count ⇨ 𝑓": {
     "prefix": "matrix.elements_count",
     "body": [
        "matrix.elements_count(id = $1) $0"
     ],
     "description": "Total number of all matrix elements ⇨ 𝑓 | matrix.elements_count(id = any matrix type) → int"
  },
  "matrix.fill ⇨ 𝑓": {
     "prefix": "matrix.fill",
     "body": [
        "matrix.fill(id = $1, value = $2, from_row = $3, to_row = $4, from_column = $5, to_column = $6) $0"
     ],
     "description": "Fill a rectangular area of the matrix to a single value ⇨ 𝑓 | matrix.fill(id = any matrix type, value = series <type of the matrix's elements>, from_row = int, to_row = int, from_column = int, to_column = int) → void"
  },
  "matrix.get ⇨ 𝑓": {
     "prefix": "matrix.get",
     "body": [
        "matrix.get(id = $1, row = $2, column = $3) $0"
     ],
     "description": "Returns the element with the specified index of the matrix ⇨ 𝑓 | matrix.get(id = any matrix type, row = int, column = int) → <matrix_type>"
  },
  "matrix.inv ⇨ 𝑓": {
     "prefix": "matrix.inv",
     "body": [
        "matrix.inv(id = $1) $0"
     ],
     "description": "Inverse of a square matrix ⇨ 𝑓 | matrix.inv(id = matrix<int>|matrix<float>) → matrix<int>|matrix<float>"
  },
  "matrix.is_antidiagonal ⇨ 𝑓": {
     "prefix": "matrix.is_antidiagonal",
     "body": [
        "matrix.is_antidiagonal(id = $1) $0"
     ],
     "description": "Matrix is anti-diagonal ⇨ 𝑓 | matrix.is_antidiagonal(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_antisymmetric ⇨ 𝑓": {
     "prefix": "matrix.is_antisymmetric",
     "body": [
        "matrix.is_antisymmetric(id = $1) $0"
     ],
     "description": "Matrix is antisymmetric ⇨ 𝑓 | matrix.is_antisymmetric(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_binary ⇨ 𝑓": {
     "prefix": "matrix.is_binary",
     "body": [
        "matrix.is_binary(id = $1) $0"
     ],
     "description": "Matrix is binary ⇨ 𝑓 | matrix.is_binary(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_diagonal ⇨ 𝑓": {
     "prefix": "matrix.is_diagonal",
     "body": [
        "matrix.is_diagonal(id = $1) $0"
     ],
     "description": "Matrix is diagonal ⇨ 𝑓 | matrix.is_diagonal(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_identity ⇨ 𝑓": {
     "prefix": "matrix.is_identity",
     "body": [
        "matrix.is_identity(id = $1) $0"
     ],
     "description": "Matrix is an identity matrix ⇨ 𝑓 | matrix.is_identity(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_square ⇨ 𝑓": {
     "prefix": "matrix.is_square",
     "body": [
        "matrix.is_square(id = $1) $0"
     ],
     "description": "Matrix is square ⇨ 𝑓 | matrix.is_square(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_stochastic ⇨ 𝑓": {
     "prefix": "matrix.is_stochastic",
     "body": [
        "matrix.is_stochastic(id = $1) $0"
     ],
     "description": "Matrix is stochastic ⇨ 𝑓 | matrix.is_stochastic(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_symmetric ⇨ 𝑓": {
     "prefix": "matrix.is_symmetric",
     "body": [
        "matrix.is_symmetric(id = $1) $0"
     ],
     "description": "Matrix is symmetric ⇨ 𝑓 | matrix.is_symmetric(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_triangular ⇨ 𝑓": {
     "prefix": "matrix.is_triangular",
     "body": [
        "matrix.is_triangular(id = $1) $0"
     ],
     "description": "Matrix is triangular ⇨ 𝑓 | matrix.is_triangular(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.is_zero ⇨ 𝑓": {
     "prefix": "matrix.is_zero",
     "body": [
        "matrix.is_zero(id = $1) $0"
     ],
     "description": "All elements of the matrix are zero ⇨ 𝑓 | matrix.is_zero(id = matrix<int>|matrix<float>) → bool"
  },
  "matrix.kron ⇨ 𝑓": {
     "prefix": "matrix.kron",
     "body": [
        "matrix.kron(id1 = $1, id2 = $2) $0"
     ],
     "description": "Kronecker product of two matrices ⇨ 𝑓 | matrix.kron(id1 = matrix<int>|matrix<float>, id2 = matrix<int>|matrix<float>) → matrix<int>|matrix<float>"
  },
  "matrix.max ⇨ 𝑓": {
     "prefix": "matrix.max",
     "body": [
        "matrix.max(id = $1) $0"
     ],
     "description": "Largest value from the matrix elements ⇨ 𝑓 | matrix.max(id = matrix<int>|matrix<float>) → series int|float"
  },
  "matrix.median ⇨ 𝑓": {
     "prefix": "matrix.median",
     "body": [
        "matrix.median(id = $1) $0"
     ],
     "description": "Median of the matrix elements ⇨ 𝑓 | matrix.median(id = matrix<int>|matrix<float>) → series int|float"
  },
  "matrix.min ⇨ 𝑓": {
     "prefix": "matrix.min",
     "body": [
        "matrix.min(id = $1) $0"
     ],
     "description": "Smallest value from the matrix elements ⇨ 𝑓 | matrix.min(id = matrix<int>|matrix<float>) → series int|float"
  },
  "matrix.mode ⇨ 𝑓": {
     "prefix": "matrix.mode",
     "body": [
        "matrix.mode(id = $1) $0"
     ],
     "description": "Mode of the matrix elements ⇨ 𝑓 | matrix.mode(id = matrix<int>|matrix<float>) → series int|float"
  },
  "matrix.mult ⇨ 𝑓": {
     "prefix": "matrix.mult",
     "body": [
        "matrix.mult(id1 = $1, id2 = $2) $0"
     ],
     "description": "Product of matrices, scalar or array vector ⇨ 𝑓 | matrix.mult(id1 = matrix<int>|matrix<float>, id2 = int|float|matrix<int>|matrix<float>|int[]|float[]) → matrix<int>|matrix<float>|int[]|float[]"
  },
  "matrix.pinv ⇨ 𝑓": {
     "prefix": "matrix.pinv",
     "body": [
        "matrix.pinv(id = $1) $0"
     ],
     "description": "Pseudoinverse of a matrix ⇨ 𝑓 | matrix.pinv(id = matrix<int>|matrix<float>) → matrix<int>|matrix<float>"
  },
  "matrix.pow ⇨ 𝑓": {
     "prefix": "matrix.pow",
     "body": [
        "matrix.pow(id = $1, power = $2) $0"
     ],
     "description": "Power of a matrix ⇨ 𝑓 | matrix.pow(id = matrix<int>|matrix<float>, power = int) → matrix<int>|matrix<float>"
  },
  "matrix.rank ⇨ 𝑓": {
     "prefix": "matrix.rank",
     "body": [
        "matrix.rank(id = $1) $0"
     ],
     "description": "Rank of a matrix ⇨ 𝑓 | matrix.rank(id = any matrix type) → series int"
  },
  "matrix.remove_col ⇨ 𝑓": {
     "prefix": "matrix.remove_col",
     "body": [
        "matrix.remove_col(id = $1, column = $2) $0"
     ],
     "description": "Remove a column from matrix ⇨ 𝑓 | matrix.remove_col(id = any matrix type, column = int) → type[]"
  },
  "matrix.remove_row ⇨ 𝑓": {
     "prefix": "matrix.remove_row",
     "body": [
        "matrix.remove_row(id = $1, row = $2) $0"
     ],
     "description": "Remove a row from matrix ⇨ 𝑓 | matrix.remove_row(id = any matrix type, row = int) → type[]"
  },
  "matrix.reshape ⇨ 𝑓": {
     "prefix": "matrix.reshape",
     "body": [
        "matrix.reshape(id = $1, rows = $2, columns = $3) $0"
     ],
     "description": "Rebuild a matrix in new dimensions ⇨ 𝑓 | matrix.reshape(id = any matrix type, rows = int, columns = int) → void"
  },
  "matrix.reverse ⇨ 𝑓": {
     "prefix": "matrix.reverse",
     "body": [
        "matrix.reverse(id = $1) $0"
     ],
     "description": "Reverse the order of a matrix ⇨ 𝑓 | matrix.reverse(id = any matrix type) → void"
  },
  "matrix.row ⇨ 𝑓": {
     "prefix": "matrix.row",
     "body": [
        "matrix.row(id = $1, row = $2) $0"
     ],
     "description": "Creates a 1-D array from the elements of a matrix row ⇨ 𝑓 | matrix.row(id = any matrix type, row = int) → type[]"
  },
  "matrix.rows ⇨ 𝑓": {
     "prefix": "matrix.rows",
     "body": [
        "matrix.rows(id = $1) $0"
     ],
     "description": "Number of rows in the matrix ⇨ 𝑓 | matrix.rows(id = any matrix type) → series int"
  },
  "matrix.set ⇨ 𝑓": {
     "prefix": "matrix.set",
     "body": [
        "matrix.set(id = $1, row = $2, column = $3, value = $4) $0"
     ],
     "description": "Set value to the element of matrix ⇨ 𝑓 | matrix.set(id = any matrix type, row = int, column = int, value = <type of the matrix's elements>) → void"
  },
  "matrix.sort ⇨ 𝑓": {
     "prefix": "matrix.sort",
     "body": [
        "matrix.sort(id = $1, column = $2, order = ${3| ,order.ascending,order.descending|}) $0"
     ],
     "description": "Sort the rows of matrix ⇨ 𝑓 | matrix.sort(id = matrix<int>|matrix<float>|matrix<string>, column = int, order = input sort_order) → void"
  },
  "matrix.submatrix ⇨ 𝑓": {
     "prefix": "matrix.submatrix",
     "body": [
        "matrix.submatrix(id = $1, from_row = $2, to_row = $3, from_column = $4, to_column = $5) $0"
     ],
     "description": "Extract a submatrix ⇨ 𝑓 | matrix.submatrix(id = any matrix type, from_row = int, to_row = int, from_column = int, to_column = int) → matrix<type>"
  },
  "matrix.sum ⇨ 𝑓": {
     "prefix": "matrix.sum",
     "body": [
        "matrix.sum(id1 = $1, id2 = $2) $0"
     ],
     "description": "Sum of two matrices or scalar ⇨ 𝑓 | matrix.sum(id1 = matrix<int>|matrix<float>, id2 = int|float|matrix<int>|matrix<float>) → matrix<int>|matrix<float>"
  },
  "matrix.swap_columns ⇨ 𝑓": {
     "prefix": "matrix.swap_columns",
     "body": [
        "matrix.swap_columns(id = $1, column1 = $2, column2 = $3) $0"
     ],
     "description": "Swap columns of matrix ⇨ 𝑓 | matrix.swap_columns(id = any matrix type, column1 = int, column2 = int) → void"
  },
  "matrix.swap_rows ⇨ 𝑓": {
     "prefix": "matrix.swap_rows",
     "body": [
        "matrix.swap_rows(id = $1, row1 = $2, row2 = $3) $0"
     ],
     "description": "Swap rows of matrix ⇨ 𝑓 | matrix.swap_rows(id = any matrix type, row1 = int, row2 = int) → void"
  },
  "matrix.trace ⇨ 𝑓": {
     "prefix": "matrix.trace",
     "body": [
        "matrix.trace(id = $1) $0"
     ],
     "description": "Trace of a matrix ⇨ 𝑓 | matrix.trace(id = matrix<int>|matrix<float>) → int|float"
  },
  "matrix.transpose ⇨ 𝑓": {
     "prefix": "matrix.transpose",
     "body": [
        "matrix.transpose(id = $1) $0"
     ],
     "description": "Transpose of a matrix ⇨ 𝑓 | matrix.transpose(id = any matrix type) → matrix<type>"
  },
  "matrix.new ⇨ 𝑓": {
     "prefix": "matrix.new",
     "body": [
        "matrix.new<${1|bool,box,color,float,int,label,line,linefill,string,table|}>(rows = $2, columns = $3, initial_value = $4) $0"
     ],
     "description": "Create a new matrix object ⇨ 𝑓 | matrix.new<type>(rows = int, columns = int, initial_value = int) → matrix<type>"
  },
  "barcolor ⇨ 𝑓": {
     "prefix": "barcolor",
     "body": [
        "barcolor(color = color.new(color = ${1| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${2:0})${3:, offset = ${4}}${5:, editable = ${6| ,true,false|}}${7:, bottom = ${8}}${9:, show_last = ${10}}${11:, title = \"${12}\"})",
        "$0"
     ],
     "description": "Color of bars ⇨ 𝑓 | barcolor(color = color, offset = int, editable = bool, show_last = input int, title = string) → void"
  },
  "bgcolor ⇨ 𝑓": {
     "prefix": "bgcolor",
     "body": [
        "bgcolor(color = color.new(color = ${1| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${2:0})${3:, offset = ${4}}${5:, editable = ${6| ,true,false|}}${7:, bottom = ${8}}${9:, show_last = ${10}}${11:, title = \"${12}\"})",
        "$0"
     ],
     "description": "Fill background of bars with specified color ⇨ 𝑓 | bgcolor(color = color, offset = int, editable = bool, show_last = input int, title = string) → void"
  },
  "bool ⇨ 𝑓": {
     "prefix": "bool",
     "body": [
        "bool(x = $1) $0"
     ],
     "description": "Casts na to bool ⇨ 𝑓 | bool(x = int) → simple|input|const|series int"
  },
  "box ⇨ 𝑓": {
     "prefix": "box",
     "body": [
        "box(x = $1)",
        "$0"
     ],
     "description": "Casts na to box ⇨ 𝑓 | box(x = box) → series box"
  },
  "box.copy ⇨ 𝑓": {
     "prefix": "box.copy",
     "body": [
        "box.copy(id = $1) $0"
     ],
     "description": "Clones the box object. ⇨ 𝑓 | box.copy(id = box) → series box"
  },
  "box.delete ⇨ 𝑓": {
     "prefix": "box.delete",
     "body": [
        "box.delete(id = $1) $0"
     ],
     "description": "Deletes the specified box object ⇨ 𝑓 | box.delete(id = box) → series void"
  },
  "box.get_bottom ⇨ 𝑓": {
     "prefix": "box.get_bottom",
     "body": [
        "box.get_bottom(id = $1) $0"
     ],
     "description": "Price value of the bottom border of the box ⇨ 𝑓 | box.get_bottom(id = box) → series float"
  },
  "box.get_left ⇨ 𝑓": {
     "prefix": "box.get_left",
     "body": [
        "box.get_left(id = $1) $0"
     ],
     "description": "A bar index or a UNIX timestamp of the left border ⇨ 𝑓 | box.get_left(id = box) → int"
  },
  "box.get_right ⇨ 𝑓": {
     "prefix": "box.get_right",
     "body": [
        "box.get_right(id = $1) $0"
     ],
     "description": "A bar index or a UNIX timestamp of the right border ⇨ 𝑓 | box.get_right(id = box) → int"
  },
  "box.get_top ⇨ 𝑓": {
     "prefix": "box.get_top",
     "body": [
        "box.get_top(id = $1) $0"
     ],
     "description": "Price value of the top border of the box ⇨ 𝑓 | box.get_top(id = box) → float"
  },
  "box.new.block ⇨ 𝑓": {
     "prefix": "box.new.block",
     "body": [
        "box.new(",
        " left         = ${1}, ",
        " top          = ${2}, ",
        " right        = ${3}, ",
        " bottom       = ${4}${5:, ",
        " border_color = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, ",
        " transp       = ${7:0})}${8:, ",
        " border_width = ${9}}${10:, ",
        " border_style = ${11| ,line.style_solid,line.style_dotted,line.style_dashed|}}${12:, ",
        " extend       = ${13| ,extend.none,extend.right,extend.left,extend.both|}}${14:, ",
        " xloc         = ${15| ,xloc.bar_index,xloc.bar_time|}}${16:, ",
        " bgcolor      = color.new(color = ${17| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${18:0})}",
        " )",
        "$0"
     ],
     "description": "New Box Object | block ⇨ 𝑓 | box.new(left = int, top = int|float, right = int, bottom = int|float, border_color = color, border_width = int, border_style = string, extend = string, xloc = string, bgcolor = string) → series box"
  },
  "box.new ⇨ 𝑓": {
     "prefix": "box.new",
     "body": [
        "box.new(left = ${1}, top = ${2}, right = ${3}, bottom = ${4}${5:, border_color = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${7:0})}${8:, border_width = ${9}}${10:, border_style = ${11| ,line.style_solid,line.style_dotted,line.style_dashed|}}${12:, extend = ${13| ,extend.none,extend.right,extend.left,extend.both|}}${14:, xloc = ${15| ,xloc.bar_index,xloc.bar_time|}}${16:, bgcolor = color.new(color = ${17| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${18:0})})",
        "$0"
     ],
     "description": "New Box Object ⇨ 𝑓 | box.new(left = int, top = int|float, right = int, bottom = int|float, border_color = color, border_width = int, border_style = string, extend = string, xloc = string, bgcolor = string, text = string, text_size = string, text_color = color, text_halign = string, text_valign = string, text_wrap = string, text_font_family = string) → series box"
  },
  "box.new.point ⇨ 𝑓": {
     "prefix": "box.new.point",
     "body": [
        "box.new(top_left = ${1}, bottom_right = ${2}${3:, border_color = color.new(color = ${4| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${5:0})}${6:, border_width = ${7}}${8:, border_style = ${9| ,line.style_solid,line.style_dotted,line.style_dashed|}}${10:, extend = ${11| ,extend.none,extend.right,extend.left,extend.both|}}${12:, xloc = ${13| ,xloc.bar_index,xloc.bar_time|}}${14:, bgcolor = color.new(color = ${15| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${16:0})})"
     ],
     "description": "New Box Object by chart.point ⇨ 𝑓 | box.new(top_left = chart.point, bottom_right = chart.point, border_color = color, border_width = int, border_style = string, extend = string, xloc = string, bgcolor = string, text = string, text_size = string, text_color = color, text_halign = string, text_valign = string, text_wrap = string, text_font_family = string) → series box"
  },
  "box.set_bgcolor ⇨ 𝑓": {
     "prefix": "box.set_bgcolor",
     "body": [
        "box.set_bgcolor(id = $1, color = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${3:0})) $0"
     ],
     "description": "background color of the box ⇨ 𝑓 | box.set_bgcolor(id = box, color = color) → void"
  },
  "box.set_border_color ⇨ 𝑓": {
     "prefix": "box.set_border_color",
     "body": [
        "box.set_border_color(id = $1, color = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${3:0})) $0"
     ],
     "description": "Border color of the box ⇨ 𝑓 | box.set_border_color(id = box, color = color) → void"
  },
  "box.set_border_style ⇨ 𝑓": {
     "prefix": "box.set_border_style",
     "body": [
        "box.set_border_style(id = $1, style = ${2| ,line.style_solid,line.style_dotted,line.style_dashed|}) $0"
     ],
     "description": "Border style of the box ⇨ 𝑓 | box.set_border_style(id = box, style = string) → void"
  },
  "box.set_border_width ⇨ 𝑓": {
     "prefix": "box.set_border_width",
     "body": [
        "box.set_border_width(id = $1, width = $2) $0"
     ],
     "description": "Border width of the box ⇨ 𝑓 | box.set_border_width(id = box, width = int) → void"
  },
  "box.set_bottom ⇨ 𝑓": {
     "prefix": "box.set_bottom",
     "body": [
        "box.set_bottom(id = $1, bottom = $2) $0"
     ],
     "description": "Bottom coordinate of the box ⇨ 𝑓 | box.set_bottom(id = box, bottom = int|float) → void"
  },
  "box.set_bottom_right_point ⇨ 𝑓": {
     "prefix": "box.set_bottom_right_point",
     "body": [
        "box.set_bottom_right_point(id = $1, point = $2) $0"
     ],
     "description": "Sets the bottom-right corner location to `point`. ⇨ 𝑓 | box.set_bottom_right_point(id = box, point = chart.point) → void"
  },
  "box.set_extend ⇨ 𝑓": {
     "prefix": "box.set_extend",
     "body": [
        "box.set_extend(id = $1, extend = ${2| ,extend.none,extend.left,extend.right,extend.both|}) $0"
     ],
     "description": "Extending type of the box border ⇨ 𝑓 | box.set_extend(id = box, extend = string) → void"
  },
  "box.set_left ⇨ 𝑓": {
     "prefix": "box.set_left",
     "body": [
        "box.set_left(id = $1, left = $2) $0"
     ],
     "description": "Left coordinate of the box ⇨ 𝑓 | box.set_left(id = box, left = int) → void"
  },
  "box.set_lefttop ⇨ 𝑓": {
     "prefix": "box.set_lefttop",
     "body": [
        "box.set_lefttop(id = $1, left = $2, top = $3) $0"
     ],
     "description": "Left and top coordinates of the box ⇨ 𝑓 | box.set_lefttop(id = box, left = int, top = int|float) → void"
  },
  "box.set_right ⇨ 𝑓": {
     "prefix": "box.set_right",
     "body": [
        "box.set_right(id = $1, right = $2) $0"
     ],
     "description": "Right coordinate of the box ⇨ 𝑓 | box.set_right(id = box, right = int) → void"
  },
  "box.set_rightbottom ⇨ 𝑓": {
     "prefix": "box.set_rightbottom",
     "body": [
        "box.set_rightbottom(id = $1, right = $2, bottom = $3) $0"
     ],
     "description": "Right and bottom coordinates of the box ⇨ 𝑓 | box.set_rightbottom(id = box, right = int, bottom = int|float) → void"
  },
  "box.set_text ⇨ 𝑓": {
     "prefix": "box.set_text",
     "body": [
        "box.set_text(id = $1, text = $2) $0"
     ],
     "description": "Sets text in the box. ⇨ 𝑓 | box.set_text(id = box, text = string) → void"
  },
  "box.set_text_color ⇨ 𝑓": {
     "prefix": "box.set_text_color",
     "body": [
        "box.set_text_color(id = $1, text_color = $2) $0"
     ],
     "description": "Sets color of text inside the box. ⇨ 𝑓 | box.set_text_color(id = box, text_color = color) → void"
  },
  "box.set_text_font_family ⇨ 𝑓": {
     "prefix": "box.set_text_font_family",
     "body": [
        "box.set_text_font_family(id = $1, text_font_family = $2) $0"
     ],
     "description": "Sets font family of text inside the box. ⇨ 𝑓 | box.set_text_font_family(id = box, text_font_family = string) → void"
  },
  "box.set_text_halign ⇨ 𝑓": {
     "prefix": "box.set_text_halign",
     "body": [
        "box.set_text_halign(id = $1, text_halign = $2) $0"
     ],
     "description": "Sets horizontal alignment of box's text. ⇨ 𝑓 | box.set_text_halign(id = box, text_halign = string) → void"
  },
  "box.set_text_size ⇨ 𝑓": {
     "prefix": "box.set_text_size",
     "body": [
        "box.set_text_size(id = $1, text_size = $2) $0"
     ],
     "description": "Sets size of box's text. ⇨ 𝑓 | box.set_text_size(id = box, text_size = string) → void"
  },
  "box.set_text_valign ⇨ 𝑓": {
     "prefix": "box.set_text_valign",
     "body": [
        "box.set_text_valign(id = $1, text_valign = $2) $0"
     ],
     "description": "Sets vertical alignment of box's text. ⇨ 𝑓 | box.set_text_valign(id = box, text_valign = string) → void"
  },
  "box.set_text_wrap ⇨ 𝑓": {
     "prefix": "box.set_text_wrap",
     "body": [
        "box.set_text_wrap(id = $1, text_wrap = $2) $0"
     ],
     "description": "Sets mode of wrapping text inside the box. ⇨ 𝑓 | box.set_text_wrap(id = box, text_wrap = string) → void"
  },
  "box.set_top ⇨ 𝑓": {
     "prefix": "box.set_top",
     "body": [
        "box.set_top(id = $1, top = $2) $0"
     ],
     "description": "Top coordinate of the box ⇨ 𝑓 | box.set_top(id = box, top = int|float) → void"
  },
  "box.set_top_left_point ⇨ 𝑓": {
     "prefix": "box.set_top_left_point",
     "body": [
        "box.set_top_left_point(id = $1, point = $2) $0"
     ],
     "description": "Sets the top-left corner location to `point`. ⇨ 𝑓 | box.set_top_left_point(id = box, point = chart.point) → void"
  },
  "chart.point.copy ⇨ 𝑓": {
     "prefix": "chart.point.copy",
     "body": [
        "chart.point.copy(id = $1) $0"
     ],
     "description": "Copy of a chart.point object. ⇨ 𝑓 | chart.point.copy(id = chart.point) → chart.point"
  },
  "chart.point.from_index ⇨ 𝑓": {
     "prefix": "chart.point.from_index",
     "body": [
        "chart.point.from_index(index = $1, price = ${2| ,open,high,low,close|}) $0"
     ],
     "description": "Returns a chart.point object with `index` as its x-coordinate and `price` as its y-coordinate. ⇨ 𝑓 | chart.point.from_index(index = int, price = int|float) → chart.point"
  },
  "chart.point.from_time ⇨ 𝑓": {
     "prefix": "chart.point.from_time",
     "body": [
        "chart.point.from_time(time = $1, price = ${2| ,open,high,low,close|}) $0"
     ],
     "description": "Returns a chart.point object with `time` as its x-coordinate and `price` as its y-coordinate. ⇨ 𝑓 | chart.point.from_time(time = int, price = int|float) → chart.point"
  },
  "chart.point.now ⇨ 𝑓": {
     "prefix": "chart.point.now",
     "body": [
        "chart.point.now(price = ${1| ,open,high,low,close|}) $0"
     ],
     "description": "Returns a chart.point object with `price` as the y-coordinate ⇨ 𝑓 | chart.point.now(price = int|float) → chart.point"
  },
  "color.b ⇨ 𝑓": {
     "prefix": "color.b",
     "body": [
        "color.b(color = color.new(color = ${1| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${2:0})) $0"
     ],
     "description": "Value of the color's blue component ⇨ 𝑓 | color.b(color = color) → series|const|input float"
  },
  "color.from_gradient ⇨ 𝑓": {
     "prefix": "color.from_gradient",
     "body": [
        "color.from_gradient(value = ${1}, bottom_value = ${2}, top_value = ${3}, bottom_color = color.new(color = ${4| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${5:0}), top_color = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${7:0})) $0"
     ],
     "description": "Linear gradient between bottom_color to top_color ⇨ 𝑓 | color.from_gradient(value = int|float, bottom_value = int|float, top_value = int|float, bottom_color = color, top_color = color) → series color"
  },
  "color.g ⇨ 𝑓": {
     "prefix": "color.g",
     "body": [
        "color.g(color = color.new(color = ${1| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${2:0})) $0"
     ],
     "description": "Value of the color's green component ⇨ 𝑓 | color.g(color = color) → series|const|input float"
  },
  "color.new ⇨ 𝑓": {
     "prefix": "color.new",
     "body": [
        "color.new(color = ${1| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${2:0}) $0"
     ],
     "description": "Color with specified transparency. ⇨ 𝑓 | color.new(color = color, transp = int|float) → const color"
  },
  "color.r ⇨ 𝑓": {
     "prefix": "color.r",
     "body": [
        "color.r(color = color.new(color = ${1| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${2:0})) $0"
     ],
     "description": "Value of the color's red component ⇨ 𝑓 | color.r(color = color) → series|const|input float"
  },
  "color.rgb ⇨ 𝑓": {
     "prefix": "color.rgb",
     "body": [
        "color.rgb(red = $1, green = $2, blue = $3, transp = $4) $0"
     ],
     "description": "RGB color model ⇨ 𝑓 | color.rgb(red = int|float, green = int|float, blue = int|float, transp = int|float) → series|const|input color"
  },
  "color.t ⇨ 𝑓": {
     "prefix": "color.t",
     "body": [
        "color.t(color = color.new(color = ${1| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${2:0})) $0"
     ],
     "description": "Retrieves the color's transparency ⇨ 𝑓 | color.t(color = color) → series|const|input float"
  },
  "dayofmonth ⇨ 𝑓": {
     "prefix": "dayofmonth",
     "body": [
        "dayofmonth(time = ${1}${2:, timezone = ${3| ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}}) $0"
     ],
     "description": "Day of month (in exchange timezone) for provided UNIX time ⇨ 𝑓 | dayofmonth(time = int, timezone = series string) → series int"
  },
  "dayofweek ⇨ 𝑓": {
     "prefix": "dayofweek",
     "body": [
        "dayofweek(time = ${1}${2:, timezone = ${3| ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}}) $0"
     ],
     "description": "Day of week (in exchange timezone) for provided UNIX time ⇨ 𝑓 | dayofweek(time = int, timezone = series string) → series int"
  },
  "fill.hline ⇨ 𝑓": {
     "prefix": "fill.hline",
     "body": [
        "fill(hline1 = ${1}, hline2 = ${2}, color = color.new(color = ${3| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${4:0}), title = \"${5}\"${6:, editable = ${7| ,true,false|}}${8:, fillgaps = ${9| ,true,false|}})",
        "$0"
     ],
     "description": "Fills background between two hlines ⇨ 𝑓 | fill(hline1 = hline, hline2 = hline, color = color, title = string, editable = bool, fillgaps = bool) → void"
  },
  "fill.plot ⇨ 𝑓": {
     "prefix": "fill.plot",
     "body": [
        "fill(plot1 = ${1}, plot2 = ${2}, color = color.new(color = ${3| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${4:0}), title = \"${5}\"${6:, editable = ${7| ,true,false|}}${8:, show_last = ${9}}${10:, fillgaps = ${11| ,true,false|}})",
        "$0"
     ],
     "description": "Fills background between two plots ⇨ 𝑓 | fill(plot1 = plot, plot2 = plot, color = color, title = string, editable = bool, show_last = input int, fillgaps = bool) → void"
  },
  "fixnan ⇨ 𝑓": {
     "prefix": "fixnan",
     "body": [
        "fixnan(source = $1) $0"
     ],
     "description": "Replaces NaN values with previous nearest non-NaN value ⇨ 𝑓 | fixnan(source = int|float|bool|color) → series int|float|bool|color"
  },
  "float ⇨ 𝑓": {
     "prefix": "float",
     "body": [
        "float(x = $1) $0"
     ],
     "description": "Casts na to float ⇨ 𝑓 | float(x = any) → simple|input|const|series float"
  },
  "hline ⇨ 𝑓": {
     "prefix": "hline",
     "body": [
        "hline(price = ${1}, title = \"${2}\", color = color.new(color = ${3| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${4:0})${5:, linestyle = ${6| ,hline.style_solid,hline.style_dotted,hline.style_dashed|}}${7:, linewidth = ${8}}${9:, editable = ${10| ,true,false|}})",
        "$0"
     ],
     "description": "Renders a horizontal line at a given fixed price level ⇨ 𝑓 | hline(price = int|float, title = const string, color = color, linestyle = hline_style, linewidth = int, editable = bool) → hline"
  },
  "hour ⇨ 𝑓": {
     "prefix": "hour",
     "body": [
        "hour(time = ${1}${2:, timezone = ${3| ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}})",
        "$0"
     ],
     "description": "Hour (in exchange timezone) for provided UNIX time ⇨ 𝑓 | hour(time = int, timezone = string) → series int"
  },
  "input ⇨ 𝑓": {
     "prefix": "input",
     "body": [
        "input(defval = ${1}, title = \"${2}\"${3:,${4: tooltip = ${5:\"${6}\"},}${7: inline = \"${8| ,01,02,03,04,05,06,07,08,09,10|}\",}${9: group = ${10| ,\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}})",
        "$0"
     ],
     "description": "Input ⇨ 𝑓 | input(defval = any, title = string, tooltip = string, inline = string, group = string) → input int|float|bool|string|color"
  },
  "input.bool ⇨ 𝑓": {
     "prefix": "input.bool",
     "body": [
        "input.bool(defval = ${1| ,true,false|}, title = \"${2}\"${3:,${4: tooltip = ${5:\"${6:}\"},} ${7:inline = \"${8| ,01,02,03,04,05,06,07,08,09,10|}\",} ${9:group = ${10|  ,\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|},} ${11: confirm = ${12| ,false,true|}}}) $0"
     ],
     "description": "Boolean input ⇨ 𝑓 | input.bool(defval = bool, title = string, tooltip = string, inline = string, group = string, confirm = bool) → input bool"
  },
  "input.color ⇨ 𝑓": {
     "prefix": "input.color",
     "body": [
        "input.color(defval = ${1| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, title = \"${2}\"${3:,${4: tooltip = ${5:\"${6}\"}}${7:, inline = \"${8| ,01,02,03,04,05,06,07,08,09,10|}\"}${9:, group = ${10| ,\"🔵 Colors 🔵\",\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${11:, confirm = ${12| ,false,true|}}}) $0"
     ],
     "description": "Color input ⇨ 𝑓 | input.color(defval = const color, title = string, tooltip = string, inline = string, group = string, confirm = bool) → input color"
  },
  "input.float ⇨ 𝑓": {
     "prefix": "input.float",
     "body": [
        "input.float(defval = ${1| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}, title = \"${2}\"${3:${4:, minval = ${5| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}}${6:, maxval = ${7| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}}${8:, step = ${9| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}}${10:, tooltip = ${11:\"${12}\"}}${13:, inline = \"${14| ,01,02,03,04,05,06,07,08,09,10|}\"}${15:, group = ${16| ,\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${17:, confirm = ${18| ,false,true|}}}) $0"
     ],
     "description": "Float input ⇨ 𝑓 | input.float(defval = float, title = string, minval = float, maxval = float, step = float, tooltip = string, inline = string, group = string, confirm = bool) → input float"
  },
  "input.float.options ⇨ 𝑓": {
     "prefix": "input.float.options",
     "body": [
        "input.float(defval = ${1| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}, title = \"${2}\"${3:,${4: options = [${5| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}${6:, ${7| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}}${8:, ${9| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}}${10:, ${11| ,0.00,0.005,0.01,0.02,0.025,0.03,0.05,0.075,0.1,0.15,0.25,0.50,0.75,1.00,1.41421356237,1.61803398875,1.73205080757,2.2360679775,2.64575131106,3.14159265359|}}],}${12: tooltip = ${13:\"${14}\"},}${15: inline = \"${16| ,01,02,03,04,05,06,07,08,09,10|}\",}${17: group = ${18| ,\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|},}${19: confirm = ${20| ,false,true|}}}) $0"
     ],
     "description": "Float input options ⇨ 𝑓 | input.float(defval = float, title = string, options = tuple, tooltip = string, inline = string, group = string, confirm = bool) → input float"
  },
  "input.int ⇨ 𝑓": {
     "prefix": "input.int",
     "body": [
        "input.int(defval = ${1| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}, title = \"${2}\"${3:${4:, minval = ${5| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}}${6:, maxval = ${7| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}}${8:, step = ${9| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}}${10:, tooltip = ${11:\"${12}\"}}${13:, inline = \"${14| ,01,02,03,04,05,06,07,08,09,10|}\"}${15:, group = ${16| ,\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${17:, confirm = ${18| ,false,true|}}}) $0"
     ],
     "description": "Int input ⇨ 𝑓 | input.int(defval = int, title = string, minval = int, maxval = int, step = int, tooltip = string, inline = string, group = string, confirm = bool) → input int"
  },
  "input.int.options ⇨ 𝑓": {
     "prefix": "input.int.options",
     "body": [
        "input.int(defval = ${1| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}, title = \"${2}\"${3:${4:, options = [${5| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}${6:, ${7| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}}${8:, ${9| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}}${10:, ${11| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}}]}${12:, tooltip = ${13:\"${14}\"}}${15:, inline = \"${16| ,01,02,03,04,05,06,07,08,09,10|}\"}${17:, group = ${18| ,\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${19:, confirm = ${20| ,false,true|}}}) $0"
     ],
     "description": "Int input | options ⇨ 𝑓 | input.int(defval = int, title = string, options = tuple, tooltip = string, inline = string, group = string, confirm = bool) → input int"
  },
  "input.price ⇨ 𝑓": {
     "prefix": "input.price",
     "body": [
        "input.price(defval = ${1| ,0,1,2,3,4,5,6,7,8,9,10,15,20,25,30,40,50,60,75,90,100,200,300,400,500,600,700,1000|}${2:.${3| ,01,02,03,04,05,06,07,08,09,1,15,25,30,40,50,60,75,99|}}, title = \"${4}\"${5:${6:, tooltip = ${7:\"${8}\"}}${9:, inline = \"${10| ,01,02,03,04,05,06,07,08,09,10|}\"}${11:, group = ${12| ,\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${13:, confirm = ${14| ,false,true|}}}) $0"
     ],
     "description": "Price input ⇨ 𝑓 | input.price(defval = int|float, title = string, tooltip = string, inline = string, group = string, confirm = bool) → input float"
  },
  "input.session ⇨ 𝑓": {
     "prefix": "input.session",
     "body": [
        "input.session(defval = \"${1| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}-${2| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}\", title = \"${3| ,Session|}\"${4:${5:, options = [\"${6| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}-${7| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}\"${8:, \"${9| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}-${10| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}\"}${11:, \"${12| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}-${13| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}\"}]}${14:, tooltip = ${15:\"${16}\"}}${17:, inline = \"${18| ,01,02,03,04,05,06,07,08,09,10|}\"}${19:, group = ${20| ,\"⏱ Session ⏱\",\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${21:, confirm = ${22| ,false,true|}}}) $0"
     ],
     "description": "Session input ⇨ 𝑓 | input.session(defval = string, title = string, options = tuple, tooltip = string, inline = string, group = string, confirm = bool) → input string"
  },
  "input.source ⇨ 𝑓": {
     "prefix": "input.source",
     "body": [
        "input.source(defval = ${1| ,open,high,low,close,hl2,hlc3,ohlc4|}, title = \"${2| ,Source|}\"${3:${4:, tooltip = ${5:\"${6:}\"}}${7:, inline = \"${8| ,01,02,03,04,05,06,07,08,09,10|}\"}${9:, group = ${10| ,\"🌲 Source 🌲\",\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${11:, confirm = ${12| ,false,true|}}}) $0"
     ],
     "description": "Source input ⇨ 𝑓 | input.source(defval = int|float, title = string, tooltip = string, inline = string, group = string) → series float"
  },
  "input.string ⇨ 𝑓": {
     "prefix": "input.string",
     "body": [
        "input.string(defval = \"${1}\", title = \"${2}\"${3:${4:, options = [\"${5}\"${6:, \"${7}\"}${8:, \"${9}\"}${10:, \"${11}\"}${12:, \"${13}\"}]}${14:, tooltip = ${15:\"${16}\"}}${17:, inline = \"${18| ,01,02,03,04,05,06,07,08,09,10|}\"}${19:, group = ${20| ,\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${21:, confirm = ${22| ,false,true|}}}) $0"
     ],
     "description": "String input ⇨ 𝑓 | input.string(defval = string, title = string, options = string, tooltip = string, inline = string, group = string, confirm = bool) → input string"
  },
  "input.symbol ⇨ 𝑓": {
     "prefix": "input.symbol",
     "body": [
        "input.symbol(defval = \"${1}\", title = \"${2}\"${3:${4:, tooltip = ${5:\"${6}\"}}${7:, inline = \"${8| ,01,02,03,04,05,06,07,08,09,10|}\"}${9:, group = ${10| ,\"🔱 Symbol 🔱\",\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${11:, confirm = ${12| ,false,true|}}}) $0"
     ],
     "description": "Symbol input ⇨ 𝑓 | input.symbol(defval = string, title = string, tooltip = string, inline = string, group = string, confirm = bool) → input string"
  },
  "input.text_area ⇨ 𝑓": {
     "prefix": "input.text_area",
     "body": [
        "input.text_area(defval = \"${1}\", title = \"${2}\"${3:${4:, tooltip = \"${5}\"}${6:, group = ${7| ,\"🔱 Symbol 🔱\",\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${8:, confirm = ${9| ,false,true|}}${10:, display = ${11| ,display.none,display.data_window,display.status_line,display.all|}}}) $0"
     ],
     "description": "Text area input ⇨ 𝑓 | input.text_area(defval = string, title = string, tooltip = string, group = string, confirm = bool, display = plot_display) → input string"
  },
  "input.time ⇨ 𝑓": {
     "prefix": "input.time",
     "body": [
        "input.time(defval = timestamp(${1|TZ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}, ${2|Y,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000|}, ${3|M,01,02,03,04,05,06,07,08,09,10,11,12|}, ${4|D,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31|}, ${5|h,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}, ${6|m,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}${7:, ${8|s,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}}), title = \"${9| ,Time|}\"${10:${11:, tooltip = ${12:\"${13:}\"}}${14:, inline = \"${15| ,01,02,03,04,05,06,07,08,09,10|}\"}${16:, group = ${17| ,\"🌲 Source 🌲\",\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"⏱ Timeframe ⏱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${18:, confirm = ${19| ,false,true|}}}) $0"
     ],
     "description": "Time input ⇨ 𝑓 | input.time(defval = const int, title = string, tooltip = string, inline = string, group = string, confirm = bool) → input int"
  },
  "input.timeframe ⇨ 𝑓": {
     "prefix": "input.timeframe",
     "body": [
        "input.timeframe(defval = \"${1| ,1,2,3,5,7,10,15,30,60,90,120,180,240,360,480,D,2D,5D,W,2W,M,2M,6M,Y|}\", title = \"${2}\"${3:${4:, options = [\"${5| ,1,2,3,5,7,10,15,30,60,90,120,180,240,360,480,D,2D,5D,W,2W,M,2M,6M,Y|}\"${6:, \"${7| ,1,2,3,5,7,10,15,30,60,90,120,180,240,360,480,D,2D,5D,W,2W,M,2M,6M,Y|}\"}${8:, \"${9| ,1,2,3,5,7,10,15,30,60,90,120,180,240,360,480,D,2D,5D,W,2W,M,2M,6M,Y|}\"}${10:, \"${11| ,1,2,3,5,7,10,15,30,60,90,120,180,240,360,480,D,2D,5D,W,2W,M,2M,6M,Y|}\"}${12:, \"${13| ,1,2,3,5,7,10,15,30,60,90,120,180,240,360,480,D,2D,5D,W,2W,M,2M,6M,Y|}\"}]}${14:, tooltip = ${15:\"${16}\"}}${17:, inline = \"${18| ,01,02,03,04,05,06,07,08,09,10|}\"}${19:, group = ${20| ,\"⏱ Timeframe ⏱\",\"🟣 Backtesting Start 🟢\",\"🟣 Backtesting End ❎\",\"🟢 Entry 🟢\",\"❎ Exit ❎\",\"⛔ Exit ⛔\",\"🔵 Colors 🔵\",\"💬 Comments 💬\",\"🎨 Drawings 🎨\",\"🟤 Length 🟤\",\"🟢 Long 🟢\",\"⚪ Options ⚪\",\"⏱ Session ⏱\",\"🟠 Settings 🟠\",\"🔴 Short 🔴\",\"🌲 Source 🌲\",\"🔶 Statistics 🔶\",\"🟤 Strategy 🟤\",\"🔱 Symbol 🔱\",\"🌲  🌲\",\"⛔  ⛔\",\"💬  💬\",\"🎨  🎨\",\"⏱  ⏱\",\"🔴  🔴\",\"🟠  🟠\",\"🟡  🟡\",\"🟢  🟢\",\"🔵  🔵\",\"🟣  🟣\",\"🟤  🟤\",\"⚫  ⚫\",\"⚪  ⚪\",\"🟥  🟥\",\"🟧  🟧\",\"🟨  🟨\",\"🟩  🟩\",\"🟦  🟦\",\"🟪  🟪\",\"🟫  🟫\",\"⬛  ⬛\",\"⬜  ⬜\",\"🔶  🔶\",\"🔷  🔷\",\"🔸  🔸\",\"🔹  🔹\",\"🔺  🔺\",\"🔻  🔻\",\"💠  💠\",\"🔱  🔱\",\"🔘  🔘\",\"🔳  🔳\",\"🔲  🔲\",\"🏁  🏁\",\"🚩  🚩\",\"🎌  🎌\",\"🏴  🏴\",\"🏳️‍🌈  🏳️‍🌈\",\"🏴‍☠️  🏴‍☠️\",\"📍  📍\",\"📌  📌\",\"📊  📊\",\"📉  📉\",\"📈  📈\",\"🌎  🌎\",\"🌐  🌐\",\"🧭  🧭\",\"🌋  🌋\",\"🚀  🚀\",\"⌛  ⌛\",\"🌑  🌑\",\"🌗  🌗\",\"🌕  🌕\",\"🌙  🌙\",\"⭐  ⭐\",\"🌟  🌟\",\"🌞  🌞\",\"🪐  🪐\",\"🌈  🌈\",\"🌀  🌀\",\"🧨  🧨\",\"🎈  🎈\",\"🔊  🔊\",\"📢  📢\",\"📣  📣\",\"📯  📯\",\"🔔  🔔\",\"🔋  🔋\",\"🔍  🔍\",\"💾  💾\",\"💰  💰\",\"💴  💴\",\"💸  💸\",\"📐  📐\",\"📏  📏\",\"🔒  🔒\",\"🔓  🔓\",\"🔑  🔑\",\"🔐  🔐\",\"🔨  🔨\",\"⛓  ⛓\",\"🧲  🧲\",\"📡  📡\",\"🩸  🩸\",\"🗿  🗿\",\"🛂  🛂\",\"⛔  ⛔\",\"🚫  🚫\",\"☢  ☢\",\"☣  ☣\",\"▶  ▶\",\"⏯  ⏯\",\"🔂  🔂\",\"🔀  🔀\",\"📶  📶\",\"🔅  🔅\",\"✖  ✖\",\"➕  ➕\",\"➖  ➖\",\"➗  ➗\",\"💲  💲\",\"💱  💱\",\"♻  ♻\",\"📛  📛\",\"🔰  🔰\",\"⭕  ⭕\",\"✅  ✅\",\"✔  ✔\",\"❌  ❌\",\"❎  ❎\",\"➰  ➰\",\"™  ™\",\"#️⃣  #️⃣\",\"*️⃣  *️⃣\",\"0️⃣  0️⃣\",\"1️⃣  1️⃣\",\"2️⃣  2️⃣\",\"3️⃣  3️⃣\",\"4️⃣  4️⃣\",\"5️⃣  5️⃣\",\"6️⃣  6️⃣\",\"7️⃣  7️⃣\",\"8️⃣  8️⃣\",\"9️⃣  9️⃣\",\"🔟  🔟\",\"🅰  🅰\",\"🆎  🆎\",\"🅱  🅱\",\"🆑  🆑\",\"🆗  🆗\",\"🆙  🆙\"|}}${21:, confirm = ${22| ,false,true|}}}) $0"
     ],
     "description": "Timeframe input ⇨ 𝑓 | input.timeframe(defval = string, title = string, options = tuple, tooltip = string, inline = string, group = string, confirm = bool) → input string"
  },
  "int ⇨ 𝑓": {
     "prefix": "int",
     "body": [
        "int(x = $1) $0"
     ],
     "description": "Casts na or truncates float value to int ⇨ 𝑓 | int(x = int) → simple|input|const|series int"
  },
  "label ⇨ 𝑓": {
     "prefix": "label",
     "body": [
        "label(x = $1)",
        "$0"
     ],
     "description": "Casts na to label ⇨ 𝑓 | label(x = label) → label"
  },
  "label.copy ⇨ 𝑓": {
     "prefix": "label.copy",
     "body": [
        "label.copy(id = $1) $0"
     ],
     "description": "Clones the label object. ⇨ 𝑓 | label.copy(id = label) → series label"
  },
  "label.delete ⇨ 𝑓": {
     "prefix": "label.delete",
     "body": [
        "label.delete(id = $1)",
        "$0"
     ],
     "description": "Deletes the specified label object ⇨ 𝑓 | label.delete(id = label) → void"
  },
  "label.get_text ⇨ 𝑓": {
     "prefix": "label.get_text",
     "body": [
        "label.get_text(id = $1)",
        "$0"
     ],
     "description": "Text of this label object ⇨ 𝑓 | label.get_text(id = label) → string"
  },
  "label.get_x ⇨ 𝑓": {
     "prefix": "label.get_x",
     "body": [
        "label.get_x(id = $1)",
        "$0"
     ],
     "description": "UNIX time or bar index ⇨ 𝑓 | label.get_x(id = label) → int"
  },
  "label.get_y ⇨ 𝑓": {
     "prefix": "label.get_y",
     "body": [
        "label.get_y(id = $1)",
        "$0"
     ],
     "description": "Price of this label's position ⇨ 𝑓 | label.get_y(id = label) → float"
  },
  "label.new ⇨ 𝑓": {
     "prefix": "label.new",
     "body": [
        "label.new(x = ${1| ,bar_index|}, y = ${2| ,na,open,high,low,close,hl2,hlc3,ohlc4|}, text = ${3:\"${4}\"}${5:, xloc = ${6| ,xloc.bar_index,xloc.bar_time|}}${7:, yloc = ${8| ,yloc.price,yloc.abovebar,yloc.belowbar|}}${9:, color = color.new(color = ${10| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${11:0})}, style = ${12| ,label.style_none,label.style_xcross,label.style_cross,label.style_triangleup,label.style_triangledown,label.style_flag,label.style_circle,label.style_arrowup,label.style_arrowdown,label.style_label_up,label.style_label_down,label.style_label_left,label.style_label_right,label.style_label_lower_left,label.style_label_lower_right,label.style_label_upper_left,label.style_label_upper_right,label.style_label_center,label.style_square,label.style_diamond|}${13:, textcolor = color.new(color = ${14| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${15:0})}${16:, size = ${17| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|}}${18:, textalign = ${19| ,text.align_left,text.align_center,text.align_right|}}${20:, tooltip = ${21:\"${22}\"}})",
        "$0"
     ],
     "description": "New label Object ⇨ 𝑓 | label.new(x = int, y = int|float, text = string, xloc = string, yloc = string, color = color, style = string, textcolor = color, size = string , textalign = string, tooltip = string) → series label"
  },
  "label.new.block ⇨ 𝑓": {
     "prefix": "label.new.block",
     "body": [
        "label.new(",
        " x            = ${1| ,bar_index|},",
        " y            = ${2| ,na,open,high,low,close,hl2,hlc3,ohlc4|},",
        " text         = ${3:\"${4}\"}${5:,",
        " xloc         = ${6| ,xloc.bar_index,xloc.bar_time|}}${7:,",
        " yloc         = ${8| ,yloc.price,yloc.abovebar,yloc.belowbar|}}${9:,",
        " color        = color.new(color = ${10| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${11:0})},",
        " style        = ${12| ,label.style_none,label.style_xcross,label.style_cross,label.style_triangleup,label.style_triangledown,label.style_flag,label.style_circle,label.style_arrowup,label.style_arrowdown,label.style_label_up,label.style_label_down,label.style_label_left,label.style_label_right,label.style_label_lower_left,label.style_label_lower_right,label.style_label_upper_left,label.style_label_upper_right,label.style_label_center,label.style_square,label.style_diamond|}${13:,",
        " textcolor    = color.new(color = ${14| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${15:0})}${16:,",
        " size         = ${17| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|}}${18:,",
        " textalign    = ${19| ,text.align_left,text.align_center,text.align_right|}}${20:,",
        " tooltip      = ${21:\"${22}\"} }",
        " )",
        "$0"
     ],
     "description": "New label object | Block ⇨ 𝑓 | label.new(x = int, y = int|float, text = string, xloc = string, yloc = string, color = color, style = string, textcolor = color, size = string , textalign = string, tooltip = string) → series label"
  },
  "label.set_color ⇨ 𝑓": {
     "prefix": "label.set_color",
     "body": [
        "label.set_color(id = $1, color = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${3:0}))",
        "$0"
     ],
     "description": "Sets label border and arrow color ⇨ 𝑓 | label.set_color(id = label, color = string) → void"
  },
  "label.set_size ⇨ 𝑓": {
     "prefix": "label.set_size",
     "body": [
        "label.set_size(id = $1, size = ${2| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|})",
        "$0"
     ],
     "description": "Sets arrow and text size of the specified label object ⇨ 𝑓 | label.set_size(id = label, size = string) → void"
  },
  "label.set_style ⇨ 𝑓": {
     "prefix": "label.set_style",
     "body": [
        "label.set_style(id = $1, style = ${2|label.style_none,label.style_xcross,label.style_cross,label.style_triangleup,label.style_triangledown,label.style_flag,label.style_circle,label.style_arrowup,label.style_arrowdown,label.style_label_up,label.style_label_down,label.style_label_left,label.style_label_right,label.style_label_lower_left,label.style_label_lower_right,label.style_label_upper_left,label.style_label_upper_right,label.style_label_center,label.style_square,label.style_diamond|})",
        "$0"
     ],
     "description": "Sets label style ⇨ 𝑓 | label.set_style(id = label, style = string) → void"
  },
  "label.set_text ⇨ 𝑓": {
     "prefix": "label.set_text",
     "body": [
        "label.set_text(id = $1, text = \"${2}\")",
        "$0"
     ],
     "description": "Sets label text ⇨ 𝑓 | label.set_text(id = label, text = string) → void"
  },
  "label.set_text_font_family ⇨ 𝑓": {
     "prefix": "label.set_text_font_family",
     "body": [
        "label.set_text_font_family(id = $1, text_font_family = ${2| ,font.family_default,font.family_monospace|})",
        "$0"
     ],
     "description": "Sets the font family of the text inside the label ⇨ 𝑓 | label.set_text_font_family(id = label, text_font_family = string) → void"
  },
  "label.set_textalign ⇨ 𝑓": {
     "prefix": "label.set_textalign",
     "body": [
        "label.set_textalign(id = $1, textalign = ${2| ,text.align_left,text.align_center,text.align_right|})",
        "$0"
     ],
     "description": "Sets the alignment for the label text ⇨ 𝑓 | label.set_textalign(id = label, textalign = string) → void"
  },
  "label.set_textcolor ⇨ 𝑓": {
     "prefix": "label.set_textcolor",
     "body": [
        "label.set_textcolor(id = $1, textcolor = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${3:0})",
        "$0"
     ],
     "description": "Sets color of the label text ⇨ 𝑓 | label.set_textcolor(id = label, textcolor = color) → void"
  },
  "label.set_tooltip ⇨ 𝑓": {
     "prefix": "label.set_tooltip",
     "body": [
        "label.set_tooltip(id = $1, tooltip = \"${2}\")",
        "$0"
     ],
     "description": "Sets the tooltip text ⇨ 𝑓 | label.set_tooltip(id = label, tooltip = string) → void"
  },
  "label.set_x ⇨ 𝑓": {
     "prefix": "label.set_x",
     "body": [
        "label.set_x(id = $1, x = ${2})",
        "$0"
     ],
     "description": "Sets bar index or bar time of the label position ⇨ 𝑓 | label.set_x(id = label, x = int) → void"
  },
  "label.set_xloc ⇨ 𝑓": {
     "prefix": "label.set_xloc",
     "body": [
        "label.set_xloc(id = $1, x = ${2}, xloc = ${3| ,xloc.bar_index,xloc.bar_time|})",
        "$0"
     ],
     "description": "Sets x-location and new bar index/time value ⇨ 𝑓 | label.set_xloc(id = label, x = int, xloc = string) → void"
  },
  "label.set_xy ⇨ 𝑓": {
     "prefix": "label.set_xy",
     "body": [
        "label.set_xy(id = $1, x = ${2}, y = ${3})",
        "$0"
     ],
     "description": "Sets bar index/time and price of the label position ⇨ 𝑓 | label.set_xy(id = label, x = int, y = int|float) → void"
  },
  "label.set_y ⇨ 𝑓": {
     "prefix": "label.set_y",
     "body": [
        "label.set_y(id = $1, y = ${2})",
        "$0"
     ],
     "description": "Sets price of the label position ⇨ 𝑓 | label.set_y(id = label, y = int|float) → void"
  },
  "label.set_yloc ⇨ 𝑓": {
     "prefix": "label.set_yloc",
     "body": [
        "label.set_yloc(id = $1, yloc = ${2| ,yloc.price,yloc.abovebar,yloc.belowbar|})",
        "$0"
     ],
     "description": "Sets new y-location calculation algorithm ⇨ 𝑓 | label.set_yloc(id = label, yloc = string) → void"
  },
  "line ⇨ 𝑓": {
     "prefix": "line",
     "body": [
        "line(id = $1) $0"
     ],
     "description": "Casts na to line ⇨ 𝑓 | line(id = line) → line"
  },
  "library ⇨ 𝑓": {
     "prefix": "library",
     "body": [
        "library(title = \"${1}\", overlay = ${2| ,true,false|}) $0"
     ],
     "description": "Declaration statement identifying a script as a library ⇨ 𝑓 | library(title = string, overlay = bool) → void"
  },
  "line.copy ⇨ 𝑓": {
     "prefix": "line.copy",
     "body": [
        "line.copy(id = $1) $0"
     ],
     "description": "Clones the line object. ⇨ 𝑓 | line.copy(id = line) → series line"
  },
  "line.delete ⇨ 𝑓": {
     "prefix": "line.delete",
     "body": [
        "line.delete(id = $1) $0"
     ],
     "description": "Deletes the specified line object ⇨ 𝑓 | line.delete(id = line) → void"
  },
  "line.get_price ⇨ 𝑓": {
     "prefix": "line.get_price",
     "body": [
        "line.get_price(id = $1, x = $2) $0"
     ],
     "description": "Price level of a line at a given bar index ⇨ 𝑓 | line.get_price(id = line, x = int) → float"
  },
  "line.get_x1 ⇨ 𝑓": {
     "prefix": "line.get_x1",
     "body": [
        "line.get_x1(id = $1) $0"
     ],
     "description": "Returns UNIX time of the first point of the line ⇨ 𝑓 | line.get_x1(id = line) → int"
  },
  "line.get_x2 ⇨ 𝑓": {
     "prefix": "line.get_x2",
     "body": [
        "line.get_x2(id = $1) $0"
     ],
     "description": "Returns UNIX time of the second point of the line ⇨ 𝑓 | line.get_x2(id = line) → int"
  },
  "line.get_y1 ⇨ 𝑓": {
     "prefix": "line.get_y1",
     "body": [
        "line.get_y1(id = $1) $0"
     ],
     "description": "Returns price of the first point of the line ⇨ 𝑓 | line.get_y1(id = line) → float"
  },
  "line.get_y2 ⇨ 𝑓": {
     "prefix": "line.get_y2",
     "body": [
        "line.get_y2(id = $1) $0"
     ],
     "description": "Returns price of the second point of the line ⇨ 𝑓 | line.get_y2(id = line) → float"
  },
  "line.new ⇨ 𝑓": {
     "prefix": "line.new",
     "body": [
        "line.new(x1 = $1, y1 = $2, x2 = $3, y2 = $4, xloc = ${5| ,xloc.bar_index,xloc.bar_time|}, extend = ${6| ,extend.none,extend.right,extend.left,extend.both|}, color = color.new(color = ${7| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${8:0}), style = ${9| ,line.style_solidline,line.style_dottedline,line.style_dashedline,line.style_arrow_leftline,line.style_arrow_rightline,line.style_arrow_bothline|}, width = $10) $0"
     ],
     "description": "Creates new line object ⇨ 𝑓 | line.new(x1 = int, y1 = int|float, x2 = int, y2 = int|float, xloc = string, extend = string, color = series color, style = string, width = series int) → series line"
  },
  "line.set_color ⇨ 𝑓": {
     "prefix": "line.set_color",
     "body": [
        "line.set_color(id = $1, color = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = $3) $0"
     ],
     "description": "Sets the line color ⇨ 𝑓 | line.set_color(id = line, color = color) → void"
  },
  "line.set_extend ⇨ 𝑓": {
     "prefix": "line.set_extend",
     "body": [
        "line.set_extend(id = $1, extend = ${2| ,extend.none,extend.right,extend.left,extend.both|}) $0"
     ],
     "description": "Sets extending type of this line object ⇨ 𝑓 | line.set_extend(id = line, extend = string) → void"
  },
  "line.set_first_point ⇨ 𝑓": {
     "prefix": "line.set_first_point",
     "body": [
        "line.set_first_point(id = $1, point = $2) $0"
     ],
     "description": "Sets the 1st point of line to `point`. ⇨ 𝑓 | line.set_first_point(id = line, point = chart.point) → void"
  },
  "line.set_second_point ⇨ 𝑓": {
     "prefix": "line.set_second_point",
     "body": [
        "line.set_second_point(id = $1, point = $2) $0"
     ],
     "description": "Sets the 2nd point of line to `point`. ⇨ 𝑓 | line.set_second_point(id = line, point = chart.point) → void"
  },
  "line.set_style ⇨ 𝑓": {
     "prefix": "line.set_style",
     "body": [
        "line.set_style(id = $1, style = ${2| ,line.style_solidline,line.style_dottedline,line.style_dashedline,line.style_arrow_leftline,line.style_arrow_rightline,line.style_arrow_bothline|}) $0"
     ],
     "description": "Sets the line width ⇨ 𝑓 | line.set_style(id = line, style = string) → void"
  },
  "line.set_width ⇨ 𝑓": {
     "prefix": "line.set_width",
     "body": [
        "line.set_width(id = $1, width = $2) $0"
     ],
     "description": "Sets the line style ⇨ 𝑓 | line.set_width(id = line, width = int) → void"
  },
  "line.set_x1 ⇨ 𝑓": {
     "prefix": "line.set_x1",
     "body": [
        "line.set_x1(id = $1, x = $2) $0"
     ],
     "description": "Sets bar index or bar time of the first point ⇨ 𝑓 | line.set_x1(id = line, x = int) → void"
  },
  "line.set_x2 ⇨ 𝑓": {
     "prefix": "line.set_x2",
     "body": [
        "line.set_x2(id = $1, x = $2) $0"
     ],
     "description": "Sets bar index or bar time of the second point ⇨ 𝑓 | line.set_x2(id = line, x = int) → void"
  },
  "line.set_xloc ⇨ 𝑓": {
     "prefix": "line.set_xloc",
     "body": [
        "line.set_xloc(id = $1, x1 = $2, x2 = $3, xloc = $4) $0"
     ],
     "description": "Sets x-location and new bar index/time values ⇨ 𝑓 | line.set_xloc(id = line, x1 = int, x2 = int, xloc = string) → void"
  },
  "line.set_xy1 ⇨ 𝑓": {
     "prefix": "line.set_xy1",
     "body": [
        "line.set_xy1(id = $1, x = ${2| ,xloc.bar_index, xloc.bar_time|}, y = $3) $0"
     ],
     "description": "Sets bar index/time and price of the first point ⇨ 𝑓 | line.set_xy1(id = line, x = int, y = int|float) → void"
  },
  "line.set_xy2 ⇨ 𝑓": {
     "prefix": "line.set_xy2",
     "body": [
        "line.set_xy2(id = $1, x = $2, y = $3) $0"
     ],
     "description": "Sets bar index/time and price of the second point ⇨ 𝑓 | line.set_xy2(id = line, x = int, y = int|float) → void"
  },
  "line.set_y1 ⇨ 𝑓": {
     "prefix": "line.set_y1",
     "body": [
        "line.set_y1(id = $1, y = $2) $0"
     ],
     "description": "Sets price of the first point ⇨ 𝑓 | line.set_y1(id = line, y = int|float) → void"
  },
  "line.set_y2 ⇨ 𝑓": {
     "prefix": "line.set_y2",
     "body": [
        "line.set_y2(id = $1, y = $2) $0"
     ],
     "description": "Sets price of the second point ⇨ 𝑓 | line.set_y2(id = line, y = int|float) → void"
  },
  "linefill ⇨ 𝑓": {
     "prefix": "linefill",
     "body": [
        "linefill(id = $1) $0"
     ],
     "description": "Casts na to linefill ⇨ 𝑓 | linefill(id = linefill)   → linefill"
  },
  "linefill.delete ⇨ 𝑓": {
     "prefix": "linefill.delete",
     "body": [
        "linefill.delete(id = $1) $0"
     ],
     "description": "Deletes the specified linefill object ⇨ 𝑓 | linefill.delete(id = linefill)   → void"
  },
  "linefill.get_line1 ⇨ 𝑓": {
     "prefix": "linefill.get_line1",
     "body": [
        "linefill.get_line1(id = $1) $0"
     ],
     "description": "ID of 1st line in linefill object ⇨ 𝑓 | linefill.get_line1(id = linefill)   → series line"
  },
  "linefill.get_line2 ⇨ 𝑓": {
     "prefix": "linefill.get_line2",
     "body": [
        "linefill.get_line2(id = $1) $0"
     ],
     "description": "ID of 2nd line in linefill object ⇨ 𝑓 | linefill.get_line2(id = linefill)   → series line"
  },
  "linefill.new ⇨ 𝑓": {
     "prefix": "linefill.new",
     "body": [
        "linefill.new(line1 = $1, line2 = $2, color = color.new(color = ${3| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${4:0})) $0"
     ],
     "description": "Creates new linefill object ⇨ 𝑓 | linefill.new(line1 = series line, line2 = series line, color = series color)   → series linefill"
  },
  "log.error ⇨ 𝑓": {
     "prefix": "log.error",
     "body": [
        "log.error(message = $1) $0"
     ],
     "description": "Sends result to 'Pine Logs' menu tagged with 'error' debug level. ⇨ 𝑓 | log.error(message = string) → void"
  },
  "log.info ⇨ 𝑓": {
     "prefix": "log.info",
     "body": [
        "log.info(message = $1) $0"
     ],
     "description": "Sends result to 'Pine Logs' menu tagged with 'info' debug level. ⇨ 𝑓 | log.info(message = string) → void"
  },
  "log.warning ⇨ 𝑓": {
     "prefix": "log.warning",
     "body": [
        "log.warning(message = $1) $0"
     ],
     "description": "Sends result to 'Pine Logs' menu tagged with 'warning' debug level. ⇨ 𝑓 | log.warning(message = string) → void"
  },
  "map.clear ⇨ 𝑓": {
     "prefix": "map.clear",
     "body": [
        "map.clear(id = $1) $0"
     ],
     "description": "Clears the map and removing all key-value pairs. ⇨ 𝑓 | map.clear(id = any map type) → void"
  },
  "map.contains ⇨ 𝑓": {
     "prefix": "map.contains",
     "body": [
        "map.contains(id = $1, key = $2) $0"
     ],
     "description": "Returns true if the `key` was found else false. ⇨ 𝑓 | map.contains(id = any map type, key = <type of map's elements>) → series bool"
  },
  "map.copy ⇨ 𝑓": {
     "prefix": "map.copy",
     "body": [
        "map.copy(id = $1) $0"
     ],
     "description": "Copy of an existing map. ⇨ 𝑓 | map.copy(id = any map type) → map<keyType, valueType>"
  },
  "map.get ⇨ 𝑓": {
     "prefix": "map.get",
     "body": [
        "map.get(id = $1, key = $2) $0"
     ],
     "description": "Returns value associated with the specified `key`. ⇨ 𝑓 | map.get(id = any map type, key = <type of map's elements>) → <valueType>"
  },
  "map.keys ⇨ 𝑓": {
     "prefix": "map.keys",
     "body": [
        "map.keys(id = $1) $0"
     ],
     "description": "Returns an array of all keys in the map. ⇨ 𝑓 | map.keys(id = any map type) → type[]"
  },
  "map.new ⇨ 𝑓": {
     "prefix": "map.new",
     "body": [
        "map.new<${1|int,float,bool,string,color|}, $2>() $0"
     ],
     "description": "Creates a new map object. ⇨ 𝑓 | map.new<keyType, valueType>() → map<keyType, valueType>"
  },
  "map.put ⇨ 𝑓": {
     "prefix": "map.put",
     "body": [
        "map.put(id = $1, key = $2, value = $3) $0"
     ],
     "description": "Puts a new key-value pair into map. ⇨ 𝑓 | map.put(id = any map type, key = <type of map's elements>, value = <type of map's elements>) → < valueType>"
  },
  "map.put_all ⇨ 𝑓": {
     "prefix": "map.put_all",
     "body": [
        "map.put_all(id = $1, id2 = $2) $0"
     ],
     "description": "Puts all key-value pairs from `id2` map into `id` map. ⇨ 𝑓 | map.put_all(id = any map type, id2 = any map type) → void"
  },
  "map.remove ⇨ 𝑓": {
     "prefix": "map.remove",
     "body": [
        "map.remove(id = $1, key = $2) $0"
     ],
     "description": "Removes a key-value pair from map. ⇨ 𝑓 | map.remove(id = any map type, key = <type of map's elements>) → <valueType>"
  },
  "map.size ⇨ 𝑓": {
     "prefix": "map.size",
     "body": [
        "map.size(id = $1) $0"
     ],
     "description": "Returns the number of key-value pairs in map. ⇨ 𝑓 | map.size(id = any map type) → series int"
  },
  "map.values ⇨ 𝑓": {
     "prefix": "map.values",
     "body": [
        "map.values(id = $1) $0"
     ],
     "description": "Returns an array of all the values in map. ⇨ 𝑓 | map.values(id = any map type) → type[]"
  },
  "linefill.set_color ⇨ 𝑓": {
     "prefix": "linefill.set_color",
     "body": [
        "linefill.set_color(id = $1, color = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = $3) $0"
     ],
     "description": "Sets the linefill color ⇨ 𝑓 | linefill.set_color(id = linefill, color = series color) → void"
  },
  "math.abs ⇨ 𝑓": {
     "prefix": "math.abs",
     "body": [
        "math.abs(number = $1) $0"
     ],
     "description": "Absolute value of `number` ⇨ 𝑓 | math.abs(number = int|float) → simple|input|const|series int|float"
  },
  "math.acos ⇨ 𝑓": {
     "prefix": "math.acos",
     "body": [
        "math.acos(angle = $1) $0"
     ],
     "description": "Arc cosine of a value in the range [0, Pi] or na if not in [-1, 1] ⇨ 𝑓 | math.acos(angle = int|float) → simple|input|const|series float"
  },
  "math.asin ⇨ 𝑓": {
     "prefix": "math.asin",
     "body": [
        "math.asin(angle = $1) $0"
     ],
     "description": "Arc sin of a value in the range [-Pi/2, Pi/2] or na if not in [-1, 1] ⇨ 𝑓 | math.asin(angle = int|float) → simple|input|const|series float"
  },
  "math.atan ⇨ 𝑓": {
     "prefix": "math.atan",
     "body": [
        "math.atan(angle = $1) $0"
     ],
     "description": "Arc tangent of a value in the range [-Pi/2, Pi/2] ⇨ 𝑓 | math.atan(angle = int|float) → simple|input|const|series float"
  },
  "math.avg ⇨ 𝑓": {
     "prefix": "math.avg",
     "body": [
        "math.avg(number0 = $1, number1 = $2, number2 = $3) $0"
     ],
     "description": "Average of all given series ⇨ 𝑓 | math.avg(number0 = int|float, number1 = int|float, number2 = int|float, ...) → simple float"
  },
  "math.ceil ⇨ 𝑓": {
     "prefix": "math.ceil",
     "body": [
        "math.ceil(number = $1) $0"
     ],
     "description": "Smallest integer greater than or equal to the given number ⇨ 𝑓 | math.ceil(number = int|float) → simple|input|const|series float"
  },
  "math.cos ⇨ 𝑓": {
     "prefix": "math.cos",
     "body": [
        "math.cos(angle = $1) $0"
     ],
     "description": "Trigonometric cosine of an angle ⇨ 𝑓 | math.cos(angle = int|float) → simple|input|const|series float"
  },
  "math.exp ⇨ 𝑓": {
     "prefix": "math.exp",
     "body": [
        "math.exp(number = $1) $0"
     ],
     "description": "e raised to the power of `number` ⇨ 𝑓 | math.exp  (number = int|float) → simple|input|const|series float"
  },
  "math.floor ⇨ 𝑓": {
     "prefix": "math.floor",
     "body": [
        "math.floor(number = $1) $0"
     ],
     "description": "largest integer less than or equal to the given number ⇨ 𝑓 | math.floor  (number = int|float) → simple|input|const|series float"
  },
  "math.log ⇨ 𝑓": {
     "prefix": "math.log",
     "body": [
        "math.log(number = $1) $0"
     ],
     "description": "Natural logarithm of any `number` > 0 ⇨ 𝑓 | math.log  (number = int|float) → simple|input|const|series float"
  },
  "math.log10 ⇨ 𝑓": {
     "prefix": "math.log10",
     "body": [
        "math.log10(number = $1) $0"
     ],
     "description": "Base 10 logarithm of `number` ⇨ 𝑓 | math.log10(number = int|float) → simple|input|const|series float"
  },
  "math.max ⇨ 𝑓": {
     "prefix": "math.max",
     "body": [
        "math.max(number0 = $1, number1 = $2, number2 = $3) $0"
     ],
     "description": "Greatest of multiple values ⇨ 𝑓 | math.max(number0 = int|float, number1 = int|float, number2 = int|float, ...) → simple|input|const|series int|float"
  },
  "math.min ⇨ 𝑓": {
     "prefix": "math.min",
     "body": [
        "math.min(number0 = $1, number1 = $2, number2 = $3) $0"
     ],
     "description": "Smallest of multiple values ⇨ 𝑓 | math.min(number0 = int|float, number1 = int|float, number2 = int|float, ...) → simple|input|const|series int|float"
  },
  "math.pow ⇨ 𝑓": {
     "prefix": "math.pow",
     "body": [
        "math.pow(base = $1, exponent = $2) $0"
     ],
     "description": "Mathematical power function ⇨ 𝑓 | math.pow(base = int|float, exponent = int|float) → series float"
  },
  "math.random ⇨ 𝑓": {
     "prefix": "math.random",
     "body": [
        "math.random(min = $1, max = $2${3:, seed = $4}) $0"
     ],
     "description": "Pseudo-random value ⇨ 𝑓 | math.random(min = int|float, max = int|float, seed = int) → series float"
  },
  "math.round ⇨ 𝑓": {
     "prefix": "math.round",
     "body": [
        "math.round(number = $1${2:, precision = $3}) $0"
     ],
     "description": "Value of `number` rounded to the nearest integer | precision ⇨ 𝑓 | math.round(number = int|float, precision = int) → simple|input|const|series int|float"
  },
  "math.round_to_mintick ⇨ 𝑓": {
     "prefix": "math.round_to_mintick",
     "body": [
        "math.round_to_mintick(number = $1) $0"
     ],
     "description": "`number` rounded to tick precision ⇨ 𝑓 | math.round_to_mintick(number = int|float) → float"
  },
  "math.sign ⇨ 𝑓": {
     "prefix": "math.sign",
     "body": [
        "math.sign(number = $1) $0"
     ],
     "description": "sign of the argument ⇨ 𝑓 | math.sign(number = int|float) → simple|input|const|series float"
  },
  "math.sin ⇨ 𝑓": {
     "prefix": "math.sin",
     "body": [
        "math.sin(angle = $1) $0"
     ],
     "description": "Trigonometric sine of an angle ⇨ 𝑓 | math.sin(angle = int|float)  → simple|input|const|series float"
  },
  "math.sqrt ⇨ 𝑓": {
     "prefix": "math.sqrt",
     "body": [
        "math.sqrt(number = $1) $0"
     ],
     "description": "Square root of `number` ⇨ 𝑓 | math.sqrt(number = int|float) → simple|input|const|series float"
  },
  "math.sum ⇨ 𝑓": {
     "prefix": "math.sum",
     "body": [
        "math.sum(source = $1, length = $2) $0"
     ],
     "description": "Sum of last y values of x ⇨ 𝑓 | math.sum(source = int|float, length = int) → series float"
  },
  "math.tan ⇨ 𝑓": {
     "prefix": "math.tan",
     "body": [
        "math.tan(angle = $1) $0"
     ],
     "description": "Trigonometric tangent of an angle ⇨ 𝑓 | math.tan(angle = int|float) → series float"
  },
  "math.todegrees ⇨ 𝑓": {
     "prefix": "math.todegrees",
     "body": [
        "math.todegrees(radians = $1) $0"
     ],
     "description": "Approx. angle in degrees from an angle measured in radians ⇨ 𝑓 | math.todegrees(radians = int|float) → series float"
  },
  "math.toradians ⇨ 𝑓": {
     "prefix": "math.toradians",
     "body": [
        "math.toradians(degrees = $1) $0"
     ],
     "description": "Approx. angle in radians from an angle measured in degrees ⇨ 𝑓 | math.toradians(degrees = int|float) → series float"
  },
  "max_bars_back ⇨ 𝑓": {
     "prefix": "max_bars_back",
     "body": [
        "max_bars_back(var = $1, num = $2) $0"
     ],
     "description": "Maximum number of bars that is available for historical reference ⇨ 𝑓 | max_bars_back(var = int|float|bool|color|label|line, num = litteral int) → void"
  },
  "minute ⇨ 𝑓": {
     "prefix": "minute",
     "body": [
        "minute(time ${1:= time}${2:, timezone = ${3| ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}}) ${0}"
     ],
     "description": "Minute (in exchange timezone) for provided UNIX time ⇨ 𝑓 | minute(time = int, timezone = string) → series int"
  },
  "month ⇨ 𝑓": {
     "prefix": "month",
     "body": [
        "month(time ${1:= time}${2:, timezone = ${3| ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}}) ${0}"
     ],
     "description": "Month (in exchange timezone) for provided UNIX time ⇨ 𝑓 | month(time = int, timezone = string) → series int"
  },
  "na ⇨ 𝑓": {
     "prefix": "na",
     "body": [
        "na(x = ${1}) ${0}"
     ],
     "description": "true if x is not a valid number (x is NaN), otherwise false ⇨ 𝑓 | na(x) → simple|series bool"
  },
  "nz ⇨ 𝑓": {
     "prefix": "nz",
     "body": [
        "nz(source = ${1}${2:, replacement = ${3}}) ${0}"
     ],
     "description": "Replaces NaN values with zeros (or given value) in a series ⇨ 𝑓 | nz(source = int|float|bool|color, replacement = int|float|bool|color) → int|float|bool|color"
  },
  "plot ⇨ 𝑓": {
     "prefix": "plot",
     "body": [
        "plot(series = ${1}, title = \"${2}\", color = color.new(color = ${3| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${4:0})${5:${6:, linewidth = ${7}}${8:, style = ${9| ,plot.style_line,plot.style_stepline,plot.style_stepline_diamond,plot.style_histogram,plot.style_cross,plot.style_area,plot.style_columns,plot.style_circles|}}${10:, trackprice = ${11| ,true,false|}}${12:, offset = ${13}}${14:, join = ${15| ,true,false|}}${16:, editable = ${17| ,true,false|}}${18:, show_last = ${19}}${20:, display = ${21| ,display.none,display.all|}}})",
        "${0}"
     ],
     "description": "Plots a series of data on the chart ⇨ 𝑓 | plot(series = int|float, title = string, color = color, linewidth = input int, trackprice = bool, histbase = int|float, offset = int, join = bool, editable = bool, show_last = int, display = plot_display) → plot"
  },
  "plot.block ⇨ 𝑓": {
     "prefix": "plot.block",
     "body": [
        "plot(",
        " series       = ${1},",
        " title        = \"${2}\",",
        " color        = color.new(color = ${3| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${4:0})${5:${6:,",
        " linewidth    = ${7}}${8:,",
        " style        = ${9| ,plot.style_line,plot.style_stepline,plot.style_stepline_diamond,plot.style_histogram,plot.style_cross,plot.style_area,plot.style_columns,plot.style_circles|}}${10:,",
        " trackprice   = ${11| ,true,false|}}${12:,",
        " offset       = ${13}}${14:,",
        " join         = ${15| ,true,false|}}${16:,",
        " editable     = ${17| ,true,false|}}${18:,",
        " show_last    = ${19}}${20:,",
        " display      = ${21| ,display.none,display.all|}}}",
        " )",
        "${0}"
     ],
     "description": "Plots a series of data on the chart | block ⇨ 𝑓 | plot(series = int|float, title = string, color = color, linewidth = input int, trackprice = bool, histbase = int|float, offset = int, join = bool, editable = bool, show_last = int, display = plot_display) → plot"
  },
  "plotarrow ⇨ 𝑓": {
     "prefix": "plotarrow",
     "body": [
        "plotarrow(series = ${1}, title = \"${2}\", colorup = color.new(color = ${3| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${4:0}), colordn = color.new(color = ${5| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${6:0})${7:, offset = ${8}}, minheight = ${9}, maxheight = ${10}${11:${12:, editable = ${13| ,true,false|}}${14:, show_last = ${15}}${16:, display = ${17| ,display.none,display.all|}}})",
        "${0}"
     ],
     "description": "Plots up and down arrows on the chart ⇨ 𝑓 | plotarrow(series = any, title = string, colorup = color, colordown = color, offset = int, minheight = int, maxheight = int, editable = bool, show_last = int, display = plot_display) → void"
  },
  "plotarrow.block ⇨ 𝑓": {
     "prefix": "plotarrow.block",
     "body": [
        "plotarrow(",
        " series       = ${1},",
        " title        = \"${2}\",",
        " colorup      = color.new(color = ${3| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${4:0}),",
        " colordn      = color.new(color = ${5| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${6:0})${7:,",
        " offset       = ${8}},",
        " minheight    = ${9},",
        " maxheight    = ${10}${11:${12:,",
        " editable     = ${13| ,true,false|}}${14:,",
        " show_last    = ${15}}${16:,",
        " display      = ${17| ,display.none,display.all|}}}",
        " )",
        "${0}"
     ],
     "description": "Plots up and down arrows on the chart | block ⇨ 𝑓 | plotarrow(series = any, title = string, colorup = color, colordown = color, offset = int, minheight = int, maxheight = int, editable = bool, show_last = int, display = plot_display) → void"
  },
  "plotbar ⇨ 𝑓": {
     "prefix": "plotbar",
     "body": [
        "plotbar(open = ${1}, high = ${2}, low = ${3}, close = ${4}, title = \"${5}\", color = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${7:0})${8:${9:, editable = ${10| ,true,false|}}${11:, show_last = ${12}}${13:, display = ${14| ,display.none,display.all|}}})",
        "${0}"
     ],
     "description": "Plots ohlc bars on the chart ⇨ 𝑓 | plotbar(open = int|float, high = int|float, low = int|float, close = int|float, title = string, color = color, editable = bool, show_last = input int, display = plot_display) → void"
  },
  "plotbar.block ⇨ 𝑓": {
     "prefix": "plotbar.block",
     "body": [
        "plotbar(",
        " open        = ${1},",
        " high        = ${2},",
        " low         = ${3},",
        " close       = ${4},",
        " title       = \"${5}\",",
        " color       = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${7:0})${8:${9:,",
        " editable    = ${10| ,true,false|}}${11:,",
        " show_last   = ${12}}${13:,",
        " display     = ${14| ,display.none,display.all|}}}",
        " )",
        "${0}"
     ],
     "description": "Plots ohlc bars on the chart | block ⇨ 𝑓 | plotbar(open = int|float, high = int|float, low = int|float, close = int|float, title = string, color = color, editable = bool, show_last = input int, display = plot_display) → void"
  },
  "plotcandle ⇨ 𝑓": {
     "prefix": "plotcandle",
     "body": [
        "plotcandle(open = $1, high = $3, low = $4, close = $2, title = \"$5\", color = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${7:0}), wickcolor = color.new(color = ${8| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${9:0})${10:${11:, editable = ${12| ,true,false|}}${13:, show_last = ${14}}${15:, bordercolor = color.new(color = ${16| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${17:0})}${18:, display = ${19| ,display.none,display.all|}}})",
        "${0}"
     ],
     "description": "Plots candles on the chart ⇨ 𝑓 | plotcandle(open = int|float, high = int|float, low = int|float, close = int|float, title = string, color = color, wickcolor = color, editable = bool, show_last = input int, bordercolor = color, display = plot_display) → void"
  },
  "plotcandle.block ⇨ 𝑓": {
     "prefix": "plotcandle.block",
     "body": [
        "plotcandle(",
        " open        = ${1},",
        " high        = $2,",
        " low         = $3,",
        " close       = $4,",
        " title       = \"$5\",",
        " color       = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${7:0}),",
        " wickcolor   = color.new(color = ${8| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${9:0})${10:${11:,",
        " editable    = ${12| ,true,false|}}${13:,",
        " show_last   = $14}${15:,",
        " bordercolor = color.new(color = ${16| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${17:0})}${18:,",
        " display     = ${19| ,display.none,display.all|}}}",
        " )",
        "${0}"
     ],
     "description": "Plots candles on the chart | block ⇨ 𝑓 | plotcandle(open = int|float, high = int|float, low = int|float, close = int|float, title = string, color = color, wickcolor = color, editable = bool, show_last = input int, bordercolor = color, display = plot_display) → void"
  },
  "plotchar.block ⇨ 𝑓": {
     "prefix": "plotchar.block",
     "body": [
        "plotchar(",
        " series     = ${1},",
        " title      = \"${2}\",",
        " char       = \"${3| ,♯,☉,☼,☀,✗,✓,🠐,🠒 ,🠑,🠓,🡔,🡕,🡖,🡗,⇦,⇨,⇧,⇩,⤺,⤻,⤹,⤸,⇤,⇥,⤒,⤓,↨,⇆,⇄,⇅,⇵,➢,➣,➤,↚,↛,↮,↯,⭍,↞,↠,↟,↡,⯬,⯭,⯮,⯯,➳,➵,➴,➶,➸,➷|}\",",
        " location   = ${4| ,location.abovebar,location.belowbar,location.top,location.bottom,location.absolute|},",
        " color      = color.new(color = ${5| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${6:0})${7:${8:,",
        " offset     = ${9}}${10:,",
        " text       = \"${11}\"}${12:,",
        " textcolor  = color.new(color = ${13| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${14:0})}${15:,",
        " editable   = ${16| ,true,false|}}${17:,",
        " size       = ${18| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|}}${19:,",
        " show_last  = ${20}}${21:,",
        " display    = ${22| ,display.none,display.all|}}}",
        " )",
        "${0}"
     ],
     "description": "Plots visual Unicode Char | block ⇨ 𝑓 | plotchar(series = bool, title = string, char = string, location = string, color = color, offset = int, text = string, textcolor = color, editable = bool, size = int, show_last = input int, display = plot_display) → void"
  },
  "plotchar ⇨ 𝑓": {
     "prefix": "plotchar",
     "body": [
        "plotchar(series = ${1}, title = \"${2}\", char = \"${3| ,♯,☉,☼,☀,✗,✓,🠐,🠒 ,🠑,🠓,🡔,🡕,🡖,🡗,⇦,⇨,⇧,⇩,⤺,⤻,⤹,⤸,⇤,⇥,⤒,⤓,↨,⇆,⇄,⇅,⇵,➢,➣,➤,↚,↛,↮,↯,⭍,↞,↠,↟,↡,⯬,⯭,⯮,⯯,➳,➵,➴,➶,➸,➷|}\", location = ${4| ,location.abovebar,location.belowbar,location.top,location.bottom,location.absolute|}, color = color.new(color = ${5| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${6:0})${7:${8:, offset = ${9}}${10:, text = \"${11}\"}${12:, textcolor = color.new(color = ${13| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${14:0})}${15:, editable = ${16| ,true,false|}}${17:, size = ${18| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|}}${19:, show_last = ${20}}${21:, display = ${22| ,display.none,display.all|}}})",
        "${0}"
     ],
     "description": "Plots visual shapes using any given one Unicode char ⇨ 𝑓 | plotchar(series = bool, title = string, char = string, location = string, color = color, offset = int, text = string, textcolor = color, editable = bool, size = int, show_last = input int, display = plot_display) → void"
  },
  "plotshape.block ⇨ 𝑓": {
     "prefix": "plotshape.block",
     "body": [
        "plotshape(",
        " series     = ${1},",
        " title      = \"${2}\",",
        " style      = ${3| ,shape.xcross,shape.cross,shape.triangleup,shape.triangledown,shape.flag,shape.circle,shape.arrowup,shape.arrowdown,shape.labelup,shape.labeldown,shape.square,shape.diamond|},",
        " location   = ${4| ,location.abovebar,location.belowbar,location.top,location.bottom,location.absolute|},",
        " color      = color.new(color = ${5| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${6:0})${7:${8:,",
        " offset     = ${9}}${10:,",
        " text       = \"${11}\"}${12:,",
        " textcolor  = color.new(color = ${13| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${14:0})}${15:,",
        " editable   = ${16| ,true,false|}}${17:,",
        " size       = ${18| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|}}${19:,",
        " show_last  = ${20}}${21:,",
        " display    = ${22| ,display.none,display.all|}}}",
        " )",
        "${0}"
     ],
     "description": "Plots visual shapes on the chart | block ⇨ 𝑓 | plotshape(series = bool, title = string, style = string, location = string, color = color, offset = int, text = string, textcolor = color, editable = bool, size = int, show_last = input int, display = plot_display) → void"
  },
  "plotshape ⇨ 𝑓": {
     "prefix": "plotshape",
     "body": [
        "plotshape(series = ${1}, title = \"${2}\", style = ${3| ,shape.xcross,shape.cross,shape.triangleup,shape.triangledown,shape.flag,shape.circle,shape.arrowup,shape.arrowdown,shape.labelup,shape.labeldown,shape.square,shape.diamond|}, location = ${4| ,location.abovebar,location.belowbar,location.top,location.bottom,location.absolute|}, color = color.new(color = ${5| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${6:0})${7:${8:, offset = ${9}}${10:, text = \"${11}\"}${12:, textcolor = color.new(color = ${13| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${14:0})}${15:, editable = ${16| ,true,false|}}${17:, size = ${18| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|}}${19:, show_last = ${20}}${21:, display = ${22| ,display.none,display.all|}}})",
        "${0}"
     ],
     "description": "Plots visual shapes on the chart ⇨ 𝑓 | plotshape(series = bool, title = string, style = string, location = string, color = color, offset = int, text = string, textcolor = color, editable = bool, size = int, show_last = input int, display = plot_display) → void"
  },
  "request.currency_rate ⇨ 𝑓": {
     "prefix": "request.currency_rate",
     "body": [
        "request.currency_rate(from = ${1| ,currency.AUD,currency.BTC,currency.CAD,currency.CHF,currency.ETH,currency.EUR,currency.GBP,currency.HKD,currency.INR,currency.JPY,currency.KRW,currency.MYR,currency.NOK,currency.NONE,currency.NZD,currency.RUB,currency.SEK,currency.SGD,currency.TRY,currency.USD,currency.USDT,currency.ZAR|}, to = ${2| ,currency.AUD,currency.BTC,currency.CAD,currency.CHF,currency.ETH,currency.EUR,currency.GBP,currency.HKD,currency.INR,currency.JPY,currency.KRW,currency.MYR,currency.NOK,currency.NONE,currency.NZD,currency.RUB,currency.SEK,currency.SGD,currency.TRY,currency.USD,currency.USDT,currency.ZAR|}${9:, ignore_invalid_currency = ${10| ,true,false|}}}) ${11}"
     ],
     "description": "Daily rate from A currency to B currency. ⇨ 𝑓 | request.currency_rate(from = simple string, to = simple string, ignore_invalid_currency = simple bool)   → series float"
  },
  "request.dividends ⇨ 𝑓": {
     "prefix": "request.dividends",
     "body": [
        "request.dividends(ticker = ${1| ,syminfo.ticker,syminfo.tickerid|}${2:${3:, field = ${4| ,dividends.gross,divdends.net|}}${5:, gaps = ${6| ,barmerge.gaps_off,barmerge.gaps_on|}}${7:, lookahead =  ${8| ,barmerge.lookahead_off,barmerge.lookahead_on|}}${9:, ignore_invalid_symbol = ${10| ,true,false|}}}) ${11}"
     ],
     "description": "Dividends data for the specified symbol. ⇨ 𝑓 | request.dividends(ticker = string, field = string, gaps = barmerge_gaps, lookahead = barmerge_lookahead, ignore_invalid_symbol = bool) → series float"
  },
  "request.earnings ⇨ 𝑓": {
     "prefix": "request.earnings",
     "body": [
        "request.earnings(ticker = ${1| ,syminfo.ticker,syminfo.tickerid|}${2:${3:, field = ${4| ,dividends.gross,divdends.net|}}${5:, gaps = ${6| ,barmerge.gaps_off,barmerge.gaps_on|}}${7:, lookahead =  ${8| ,barmerge.lookahead_off,barmerge.lookahead_on|}}${9:, ignore_invalid_symbol = ${10| ,true,false|}}}) ${11}"
     ],
     "description": "Earnings data for the specified symbol. ⇨ 𝑓 | request.earnings(ticker = string, field = string, gaps = barmerge_gaps, lookahead = barmerge_lookahead, ignore_invalid_symbol = bool) → series float"
  },
  "request.economic ⇨ 𝑓": {
     "prefix": "request.economic",
     "body": [
        "request.economic(country_code = $1, field = $2${3:${4:, gaps = ${5| ,barmerge.gaps_off,barmerge.gaps_on|}}${6:, ignore_invalid_symbol = ${7| ,true,false|}}}) ${0}"
     ],
     "description": "Requests economic data for a symbol. ⇨ 𝑓 | request.economic(country_code = string, field = string, gaps = barmerge_gaps, ignore_invalid_symbol = bool) → series float"
  },
  "request.financial ⇨ 𝑓": {
     "prefix": "request.financial",
     "body": [
        "request.financial(symbol = ${1| ,syminfo.ticker,syminfo.tickerid|}, financial_id = \"${2}\", gaps = ${3| ,barmerge.gaps_off,barmerge.gaps_on|}, period = ${3}${4:,ignore_invalid_symbol = ${5| ,true,false|}}) ${0}",
        "// Financial ID's https://www.tradingview.com/?solution=43000564727"
     ],
     "description": "Requests financial series for symbol. ⇨ 𝑓 | request.financial(symbol = string, financial_id = string, period = string, gaps = barmerge_gaps, ignore_invalid_symbol = bool, currency = input string) → series float"
  },
  "request.quandl ⇨ 𝑓": {
     "prefix": "request.quandl",
     "body": [
        "request.quandl(ticker = ${1| ,syminfo.ticker,syminfo.tickerid|}, gaps = ${2| ,barmerge.gaps_off,barmerge.gaps_on|}, index = ${3}${4:,ignore_invalid_symbol = ${5| ,true,false|}}) ${0}"
     ],
     "description": "Requests Quandl data for a symbol. ⇨ 𝑓 | request.quandl(ticker = string, gaps = barmerge_gaps, index = int, ignore_invalid_symbol = bool) → series float"
  },
  "request.security ⇨ 𝑓": {
     "prefix": "request.security",
     "body": [
        "request.security(symbol = ${1| ,syminfo.ticker,syminfo.tickerid|}, timeframe = \"${2}\", expression = ${3}${4:${5:, gaps = ${6| ,barmerge.gaps_off,barmerge.gaps_on|}}${7:,lookahead =  ${8| ,barmerge.lookahead_off,barmerge.lookahead_on|}}${9:,ignore_invalid_symbol = ${10| ,true,false|}}}) ${0}"
     ],
     "description": "Request another symbol/resolution ⇨ 𝑓 | request.security(symbol = string, timeframe = string, expression = any, gaps = barmerge_gaps, lookahead = barmerge_lookahead, ignore_invalid_symbol = bool) → series float|int|bool|color"
  },
  "request.security_lower_tf ⇨ 𝑓": {
     "prefix": "request.security_lower_tf",
     "body": [
        "request.security_lower_tf(symbol = ${1| ,syminfo.ticker,syminfo.tickerid|}, timeframe = ${2| ,timeframe.period,'1','2','3','5','7','10','15','30','60','90','120','180','240','360','480','D','2D','5D','W','2W','M','2M','6M','Y'|}, expression = ${3}${4:${5:,ignore_invalid_symbol = ${6| ,true,false|}}${7:, currency = ${8| ,syminfo.currency|}}}) ${0}"
     ],
     "description": "Requests data from a specified symbol from a lower timeframe. ⇨ 𝑓 | security_lower_tf(symbol = string, timeframe = string, expression = any, ignore_invalid_symbol = bool, currency = string) → array<type>"
  },
  "request.seed ⇨ 𝑓": {
     "prefix": "request.seed",
     "body": [
        "request.seed(source = $1, symbol = $2, expression = $3) $0"
     ],
     "description": "Requests data from a user-maintained GitHub repository and returns it as a series. ⇨ 𝑓 | request.seed(source = string, symbol = string, expression = <arg_expr_type>)"
  },
  "request.splits ⇨ 𝑓": {
     "prefix": "request.splits",
     "body": [
        "request.splits(ticker = ${1| ,syminfo.ticker,syminfo.tickerid|}, field = ${2|splits.denominator,splits.numerator|}${3:${4:,gaps = ${5| ,barmerge.gaps_off,barmerge.gaps_on|}}${6:,lookahead =  ${7| ,barmerge.lookahead_off,barmerge.lookahead_on|}}${8:,ignore_invalid_symbol = ${9| ,true,false|}}}) ${0}"
     ],
     "description": "Requests splits data for the specified symbol. ⇨ 𝑓 | request.splits(ticker = string, field = string, gaps = barmerge_gaps, lookahead = barmerge_lookahead, ignore_invalid_symbol = bool) → series float"
  },
  "runtime.error ⇨ 𝑓": {
     "prefix": "runtime.error",
     "body": [
        "runtime.error(message = ${1:\"${2}\"}) ",
        "${0}"
     ],
     "description": "Error message ⇨ 𝑓 | runtime.error(message = string) → void"
  },
  "second ⇨ 𝑓": {
     "prefix": "second",
     "body": [
        "second(time = ${1}${2:, timezone = ${3:\"${4}\"}})  ${0}"
     ],
     "description": "Second (in exchange timezone) for provided UNIX time ⇨ 𝑓 | second(time = int, timezone = string) → series int"
  },
  "str.contains ⇨ 𝑓": {
     "prefix": "str.contains",
     "body": [
        "str.contains(source = ${1:\"${2}\"}, str = ${3:\"${4}\"}) ${0}"
     ],
     "description": "String contains the specified substring, false otherwise ⇨ 𝑓 | str.contains(source = string, str = string)   → const|simple|series bool"
  },
  "str.endswith ⇨ 𝑓": {
     "prefix": "str.endswith",
     "body": [
        "str.endswith(source = ${1:\"${2}\"}, str = ${3:\"${4}\"}) ${0}"
     ],
     "description": "String ends with the specified substring, false otherwise ⇨ 𝑓 | str.endswith(source = string, str = string)   → const|simple|series bool"
  },
  "str.format ⇨ 𝑓": {
     "prefix": "str.format",
     "body": [
        "str.format(formatString = ${1:\"${2}\"}, arg0 = ${3}${4:, arg1 = ${5}}) ${0}"
     ],
     "description": "Formatting string and value(s) into a formatted string ⇨ 𝑓 | str.format(formatString = string, arg0 = any series, arg1 = any series, ...)   → simple string"
  },
  "str.format_time ⇨ 𝑓": {
     "prefix": "str.format_time",
     "body": [
        "str.format_time(${1:time}, format = timestamp(${2|Y,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000|}, ${3|M,01,02,03,04,05,06,07,08,09,10,11,12|}, ${4|D,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31|}, ${5|h,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}, ${6|m,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}, ${7|s,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}), timezone = ${8|TZ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}) ${0}"
     ],
     "description": "Formatting timestamp into a formatted string ⇨ 𝑓 | str.format_time(time = UNIX time, format = string, timezone = string)   → series string"
  },
  "str.length ⇨ 𝑓": {
     "prefix": "str.length",
     "body": [
        "str.length(string = ${1:\"${2}\"}) ${0}"
     ],
     "description": "Integer of the amount of chars in that string ⇨ 𝑓 | str.length(string = string)   → const|simple|series int"
  },
  "str.lower ⇨ 𝑓": {
     "prefix": "str.lower",
     "body": [
        "str.lower(source = ${1:\"${2}\"}) ${0}"
     ],
     "description": "Convert all letters to lowercase ⇨ 𝑓 | str.lower(source = string)   → const|simple|series string"
  },
  "str.match ⇨ 𝑓": {
     "prefix": "str.match",
     "body": [
        "str.match(source = ${1:\"${2}\"}, regex = ${3:\"${4}\"}) ${0}"
     ],
     "description": "substring of the `source` string if it matches a `regex` regular expression,   an empty string otherwise ⇨ 𝑓 | str.match(source = string, regex = string)   → simple|series string"
  },
  "str.pos ⇨ 𝑓": {
     "prefix": "str.pos",
     "body": [
        "str.pos(source = ${1:\"${2}\"}, str = ${3:\"${4}\"}) ${0}"
     ],
     "description": "Position of 1st occurrence of string ⇨ 𝑓 | str.pos(source = string, str = string)   → const|simple|series int"
  },
  "str.replace ⇨ 𝑓": {
     "prefix": "str.replace",
     "body": [
        "str.replace(source = ${1:\"${2}\"}, target = ${3:\"${4}\"}, replacement = ${5:\"${6}\"}, occurrence = ${7}) ${0}"
     ],
     "description": "Replaces N-th occurrence of string ⇨ 𝑓 | str.replace(source = string, target = string, replacement = string, occurrence = int)   → const|simple|series string"
  },
  "str.replace_all ⇨ 𝑓": {
     "prefix": "str.replace_all",
     "body": [
        "str.replace_all(source = ${1:\"${2}\"}, target = ${3:\"${4}\"}, replacement = ${5:\"${6}\"}) ${0}"
     ],
     "description": "Replaces each occurrence of string ⇨ 𝑓 | str.replace_all(source = string, target = string, replacement = string)   → simple|series string"
  },
  "str.split ⇨ 𝑓": {
     "prefix": "str.split",
     "body": [
        "str.split(string = ${1:\"${2}\"}, separator = ${3:\"${4}\"}) ${0}"
     ],
     "description": "Divides a string into an array of substrings and returns its array id ⇨ 𝑓 | str.split(string = string, separator = string)   → string[]"
  },
  "str.startswith ⇨ 𝑓": {
     "prefix": "str.startswith",
     "body": [
        "str.startswith(source = ${1:\"${2}\"}, str = ${3:\"${4}\"}) ${0}"
     ],
     "description": "String starts with the specified substring, false otherwise ⇨ 𝑓 | str.startswith(source = string, str = string)   → const|simple|series bool"
  },
  "str.substring ⇨ 𝑓": {
     "prefix": "str.substring",
     "body": [
        "str.substring(source = ${1:\"${2}\"}, begin_pos = ${3}${4:, end_pos = ${5}}) ${0}"
     ],
     "description": "Return substring of a string ⇨ 𝑓 | str.substring(source = string, begin_pos = int, end_pos = int)   → const|simple|series string"
  },
  "str.tonumber ⇨ 𝑓": {
     "prefix": "str.tonumber",
     "body": [
        "str.tonumber(string = ${1:\"${2}\"}) ${0}"
     ],
     "description": "String to float else na ⇨ 𝑓 | str.tonumber(string = string)   → series float"
  },
  "str.tostring ⇨ 𝑓": {
     "prefix": "str.tostring",
     "body": [
        "str.tostring(value = \"${1}\"${2:,format = ${3| ,format.mintick,format.percent,format.volume|}}) ${0}"
     ],
     "description": "String representation of the `value` argument else NaN ⇨ 𝑓 | str.tostring(value = any series, format = string)   → simple|series string"
  },
  "str.upper ⇨ 𝑓": {
     "prefix": "str.upper",
     "body": [
        "str.upper(source = ${1:\"${2}\"}) ${0}"
     ],
     "description": "Convert all letters to uppercase ⇨ 𝑓 | str.upper(source = string)   → const|simple|series string"
  },
  "strategy.cancel ⇨ 𝑓": {
     "prefix": "strategy.cancel",
     "body": [
        "strategy.cancel(id = \"${1}\"${2:,when = ${3}}) ",
        "${0}"
     ],
     "description": "Cancel/deactivate pending orders by referencing their id ⇨ 𝑓 | strategy.cancel(id = string, when = bool) → series void"
  },
  "strategy.cancel_all ⇨ 𝑓": {
     "prefix": "strategy.cancel_all",
     "body": [
        "strategy.cancel_all(${1:when = ${2}}) ${0}"
     ],
     "description": "Cancel/deactivate all pending orders ⇨ 𝑓 | strategy.cancel_all(when = bool) → series void"
  },
  "strategy.close ⇨ 𝑓": {
     "prefix": "strategy.close",
     "body": [
        "strategy.close(id = \"${1}\"${2:${3:, when = ${4}}${5:, comment = ${6:\"${7}\"}}${8:, qty = ${9}}${10:, qty_percent = ${11}}${12:, alert_message = ${13:\"${14}\"}}})",
        "${0}"
     ],
     "description": "Exit from the entry with the specified ID ⇨ 𝑓 | strategy.close(id = string, when = bool, comment = string, qty = int|float, qty_percent = int|float, alert_message = string) → void"
  },
  "strategy.close_all ⇨ 𝑓": {
     "prefix": "strategy.close_all",
     "body": [
        "strategy.close_all(when = \"${1}\"${2:${3:,comment = ${4:\"${5}\"}}${6:, alert_message = ${7:\"${8}\"}}})",
        "${0}"
     ],
     "description": "Exit all the open positions ⇨ 𝑓 | strategy.close_all(when = bool, comment = string, alert_message = string) → void"
  },
  "strategy.closedtrades.commission ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.commission",
     "body": [
        "strategy.closedtrades.commission(trade_num = ${1}) ${0}"
     ],
     "description": "Sum of entry and exit fees paid in the closed trade ⇨ 𝑓 | strategy.closedtrades.commission(trade_num = int) → series float"
  },
  "strategy.closedtrades.entry_bar_index ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.entry_bar_index",
     "body": [
        "strategy.closedtrades.entry_bar_index(trade_num = ${1}) ${0}"
     ],
     "description": "bar_index of the closed trade's ⇨ 𝑓 | strategy.closedtrades.entry_bar_index(trade_num = int) → series int"
  },
  "strategy.closedtrades.entry_comment ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.entry_comment",
     "body": [
        "strategy.closedtrades.entry_comment(trade_num = $1) $0"
     ],
     "description": "Comment message of the closed trade's entry. ⇨ 𝑓 | strategy.closedtrades.entry_comment(trade_num = int) → series string"
  },
  "strategy.closedtrades.entry_id ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.entry_id",
     "body": [
        "strategy.closedtrades.entry_id(trade_num = $1) $0"
     ],
     "description": "id of the closed trade's entry. ⇨ 𝑓 | strategy.closedtrades.entry_id(trade_num = int) → series string"
  },
  "strategy.closedtrades.entry_price ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.entry_price",
     "body": [
        "strategy.closedtrades.entry_price(trade_num = ${1}) ${0}"
     ],
     "description": "Price of the closed trade's entry ⇨ 𝑓 | strategy.closedtrades.entry_price(trade_num = int) → series int"
  },
  "strategy.closedtrades.entry_time ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.entry_time",
     "body": [
        "strategy.closedtrades.entry_time(trade_num = ${1}) ${0}"
     ],
     "description": "UNIX time of the closed trade's entry ⇨ 𝑓 | strategy.closedtrades.entry_time(trade_num = int) → series int"
  },
  "strategy.closedtrades.exit_bar_index ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.exit_bar_index",
     "body": [
        "strategy.closedtrades.exit_bar_index(trade_num = ${1}) ${0}"
     ],
     "description": "bar_index of the closed trade's exit ⇨ 𝑓 | strategy.closedtrades.exit_bar_index(trade_num = int) → series int"
  },
  "strategy.closedtrades.exit_comment ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.exit_comment",
     "body": [
        "strategy.closedtrades.exit_comment(trade_num = $1) $0"
     ],
     "description": "Comment message of the closed trade's exit. ⇨ 𝑓 | strategy.closedtrades.exit_comment(trade_num = int) → series string"
  },
  "strategy.closedtrades.exit_id ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.exit_id",
     "body": [
        "strategy.closedtrades.exit_id(trade_num = $1) $0"
     ],
     "description": "id of the closed trade's exit. ⇨ 𝑓 | strategy.closedtrades.exit_id(trade_num = int) → series string"
  },
  "strategy.closedtrades.exit_price ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.exit_price",
     "body": [
        "strategy.closedtrades.exit_price(trade_num = ${1}) ${0}"
     ],
     "description": "Price of the closed trade's exit ⇨ 𝑓 | strategy.closedtrades.exit_price(trade_num = int) → series float"
  },
  "strategy.closedtrades.exit_time ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.exit_time",
     "body": [
        "strategy.closedtrades.exit_time(trade_num = ${1}) ${0}"
     ],
     "description": "UNIX time of the closed trade's exit ⇨ 𝑓 | strategy.closedtrades.exit_time(trade_num = int) → series int"
  },
  "strategy.closedtrades.max_drawdown ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.max_drawdown",
     "body": [
        "strategy.closedtrades.max_drawdown(trade_num = ${1}) ${0}"
     ],
     "description": "Maximum possible loss during the closed trades ⇨ 𝑓 | strategy.closedtrades.max_drawdown(trade_num = int) → series float"
  },
  "strategy.closedtrades.max_runup ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.max_runup",
     "body": [
        "strategy.closedtrades.max_runup(trade_num = ${1}) ${0}"
     ],
     "description": "Maximum possible profit during the closed trade  ⇨ 𝑓 | strategy.closedtrades.max_runup(trade_num = int) → series float"
  },
  "strategy.closedtrades.profit ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.profit",
     "body": [
        "strategy.closedtrades.profit(trade_num = ${1}) ${0}"
     ],
     "description": "profit/loss of the closed trade ⇨ 𝑓 | strategy.closedtrades.profit(trade_num = int) → series float"
  },
  "strategy.closedtrades.size ⇨ 𝑓": {
     "prefix": "strategy.closedtrades.size",
     "body": [
        "strategy.closedtrades.size(trade_num = ${1}) ${0}"
     ],
     "description": "Trade number of the closed trade ⇨ 𝑓 | strategy.closedtrades.size(trade_num = int) → series float"
  },
  "strategy.convert_to_account ⇨ 𝑓": {
     "prefix": "strategy.convert_to_account",
     "body": [
        "strategy.convert_to_account(value = ${1}) ${0}"
     ],
     "description": "Converts currency used on the chart to `value`  ⇨ 𝑓 | strategy.convert_to_account(value) → series float"
  },
  "strategy.convert_to_symbol ⇨ 𝑓": {
     "prefix": "strategy.convert_to_symbol",
     "body": [
        "strategy.convert_to_symbol(value = ${1}) ${0}"
     ],
     "description": "Converts `value` to the currency on the chart ⇨ 𝑓 | strategy.convert_to_symbol(value = int|float) → series float"
  },
  "strategy.entry ⇨ 𝑓": {
     "prefix": "strategy.entry",
     "body": [
        "strategy.entry(id = \"${1}\", direction = ${2| ,strategy.long,strategy.short|}${3:${4:, qty = ${5}}${6:, limit = ${7}}${8:, stop = ${9}}${10:, oca_name = ${11:\"${12}\"}}${13:, oca_type = ${14| ,strategy.oca.none,strategy.oca.cancel,strategy.oca.reduce|}}${15:, comment = ${16:\"${17}\"}}${18:, when = ${19}}${20:, alert_message = ${21:\"${22}\"}}})",
        "${0}"
     ],
     "description": "Command to enter market position ⇨ 𝑓 | strategy.entry(id = string, direction = const built-in, qty = int|float, limit = int|float, stop = int|float, oca_name = string, oca_type = string, comment = string, when = bool, alert_message = string) → void"
  },
  "strategy.entry.block ⇨ 𝑓": {
     "prefix": "strategy.entry.block",
     "body": [
        "strategy.entry(",
        " id             = \"${1}\",",
        " direction      = ${2| ,strategy.long,strategy.short|}${3:${4:,",
        " qty            = ${5}}${6:,",
        " limit          = ${7}}${8:,",
        " stop           = ${9}}${10:,",
        " oca_name       = ${11:\"${12}\"}}${13:,",
        " oca_type       = ${14| ,strategy.oca.none,strategy.oca.cancel,strategy.oca.reduce|}}${15:,",
        " comment        = ${16:\"${17}\"}}${18:,",
        " when           = ${19}}${20:,",
        " alert_message  = ${21:\"${22}\"}}}",
        " )",
        "${0}"
     ],
     "description": "Command to enter market position | block ⇨ 𝑓 | strategy.entry(id = string, direction = const built-in, qty = int|float, limit = int|float, stop = int|float, oca_name = string, oca_type = string, comment = string, when = bool, alert_message = string) → void"
  },
  "strategy.exit ⇨ 𝑓": {
     "prefix": "strategy.exit",
     "body": [
        "strategy.exit(id = \"${1}\", from_entry = \"${2}\"${3:${4:, qty = ${5}}${6:, qty_percent = ${7}}${8:, profit = ${9}}${10:, limit = ${11}}${12:, loss = ${13}}${14:, stop = ${15}}${16:, trail_price = ${17}}${18:, trail_points = ${19}}${20:, trail_offset = ${21}}${22:, oca_name = ${23:\"${24}\"}}${25:, comment = ${26:\"${27}\"}}${28:, when = ${29}}${30:, trail_offset = ${31}}${32:, alert_message = ${33:\"${34}\"}}})",
        "${0}"
     ],
     "description": "Command to exit ⇨ 𝑓 | strategy.exit(id = string, from_entry = string, qty = int|float, qty_percent = int|float, profit = int|float, limit = int|float, loss = int|float, stop = int|float, trail_price = int|float, trail_points = int|float, trail_offset = int|float, oca_name = string, comment = string, when = bool, alert_message = string) → void"
  },
  "strategy.exit.block ⇨ 𝑓": {
     "prefix": "strategy.exit.block",
     "body": [
        "strategy.exit(",
        " id             = \"${1}\",",
        " from_entry     = \"${2}\"${3:${4:,",
        " qty            = ${5}}${6:,",
        " qty_percent    = ${7}}${8:,",
        " profit         = ${9}}${10:,",
        " limit          = ${11}}${12:,",
        " loss           = ${13}}${14:,",
        " stop           = ${15}}${16:,",
        " trail_price    = ${17}}${18:,",
        " trail_points   = ${19}}${20:,",
        " trail_offset   = ${21}}${22:,",
        " oca_name       = ${23:\"${24}\"}}${25:,",
        " comment        = ${26:\"${27}\"}}${28:,",
        " when           = ${29}}${30:,",
        " trail_offset   = ${31}}${32:,",
        " alert_message  = ${33:\"${34}\"}}}",
        " )",
        "${0}"
     ],
     "description": "Command to exit | block ⇨ 𝑓 | strategy.exit(id = string, from_entry = string, qty = int|float, qty_percent = int|float, profit = int|float, limit = int|float, loss = int|float, stop = int|float, trail_price = int|float, trail_points = int|float, trail_offset = int|float, oca_name = string, comment = string, when = bool, alert_message = string) → void"
  },
  "strategy.opentrades.commission ⇨ 𝑓": {
     "prefix": "strategy.opentrades.commission",
     "body": [
        "strategy.opentrades.commission(trade_num = ${1}) ${0}"
     ],
     "description": "Sum of entry and exit fees paid in the open trade ⇨ 𝑓 | strategy.opentrades.commission(trade_num = int) → float"
  },
  "strategy.opentrades.entry_bar_index ⇨ 𝑓": {
     "prefix": "strategy.opentrades.entry_bar_index",
     "body": [
        "strategy.opentrades.entry_bar_index(trade_num = ${1}) ${0}"
     ],
     "description": "bar_index of the open trades entry ⇨ 𝑓 | strategy.opentrades.entry_bar_index(trade_num = int) → float"
  },
  "strategy.opentrades.entry_comment ⇨ 𝑓": {
     "prefix": "strategy.opentrades.entry_comment",
     "body": [
        "strategy.opentrades.entry_comment(trade_num = $1) $0"
     ],
     "description": "Comment message of the open trade's entry. ⇨ 𝑓 | strategy.opentrades.entry_comment(trade_num = int) → series string"
  },
  "strategy.opentrades.entry_id ⇨ 𝑓": {
     "prefix": "strategy.opentrades.entry_id",
     "body": [
        "strategy.opentrades.entry_id(trade_num = $1) $0"
     ],
     "description": "id of the open trade's entry. ⇨ 𝑓 | strategy.opentrades.entry_id(trade_num = int) → series string"
  },
  "strategy.opentrades.entry_price ⇨ 𝑓": {
     "prefix": "strategy.opentrades.entry_price",
     "body": [
        "strategy.opentrades.entry_price(trade_num = ${1}) ${0}"
     ],
     "description": "Price of the open trades entry ⇨ 𝑓 | strategy.opentrades.entry_price(trade_num = int) → float"
  },
  "strategy.opentrades.entry_time ⇨ 𝑓": {
     "prefix": "strategy.opentrades.entry_time",
     "body": [
        "strategy.opentrades.entry_time(trade_num = ${1}) ${0}"
     ],
     "description": "UNIX time of the open trades entry ⇨ 𝑓 | strategy.opentrades.entry_time(trade_num = int) → float"
  },
  "strategy.opentrades.max_drawdown ⇨ 𝑓": {
     "prefix": "strategy.opentrades.max_drawdown",
     "body": [
        "strategy.opentrades.max_drawdown(trade_num = ${1}) ${0}"
     ],
     "description": "Maximum possible loss during the trade ⇨ 𝑓 | strategy.opentrades.max_drawdown(trade_num = int) → float"
  },
  "strategy.opentrades.max_runup ⇨ 𝑓": {
     "prefix": "strategy.opentrades.max_runup",
     "body": [
        "strategy.opentrades.max_runup(trade_num = ${1}) ${0}"
     ],
     "description": "Maximum possible profit during the trade ⇨ 𝑓 | strategy.opentrades.max_runup(trade_num = int) → float"
  },
  "strategy.opentrades.profit ⇨ 𝑓": {
     "prefix": "strategy.opentrades.profit",
     "body": [
        "strategy.opentrades.profit(trade_num = ${1}) ${0}"
     ],
     "description": "profit/loss of the open trade ⇨ 𝑓 | strategy.opentrades.profit(trade_num = int) → float"
  },
  "strategy.opentrades.size ⇨ 𝑓": {
     "prefix": "strategy.opentrades.size",
     "body": [
        "strategy.opentrades.size(trade_num = ${1}) ${0}"
     ],
     "description": "Direction and number of contracts traded in the open trade ⇨ 𝑓 | strategy.opentrades.size(trade_num = int) → float"
  },
  "strategy.order.block ⇨ 𝑓": {
     "prefix": "strategy.order.block",
     "body": [
        "strategy.order(",
        " id             = \"${1}\", ",
        " direction      = ${2| ,strategy.long,strategy.short|}${3:${4:, ",
        " qty            = ${5}}${6:,",
        " limit          = ${7}}${8:, ",
        " stop           = ${9}}${10:,",
        " oca_name       = ${11:\"${12}\"}}${13:, ",
        " oca_type       = ${14| ,strategy.oca.none,strategy.oca.cancel,strategy.oca.reduce|}}${15:,",
        " comment        = ${16:\"${17}\"}}${18:,",
        " when           = ${19}}${20:,",
        " alert_message  = ${21:\"${22}\"}}}",
        " )",
        "${0}"
     ],
     "description": "Command to place order | block ⇨ 𝑓 | strategy.order(id = string, direction = const built-in, qty = int|float, limit = int|float, stop = int|float, oca_name = string, oca_type = string, comment = string, when = bool, alert_message = string) → void"
  },
  "strategy.order ⇨ 𝑓": {
     "prefix": "strategy.order",
     "body": [
        "strategy.order(id = \"${1}\", direction = ${2| ,strategy.long,strategy.short|}${3:${4:, qty = ${5}}${6:,limit = ${7}}${8:, stop = ${9}}${10:,oca_name = ${11:\"${12}\"}}${13:, oca_type = ${14| ,strategy.oca.none,strategy.oca.cancel,strategy.oca.reduce|}}${15:,comment = ${16:\"${17}\"}}${18:,when = ${19}}${20:,alert_message = ${21:\"${22}\"}}})",
        "${0}"
     ],
     "description": "Command to place order ⇨ 𝑓 | strategy.order(id = string, direction = const built-in, qty = int|float, limit = int|float, stop = int|float, oca_name = string, oca_type = string, comment = string, when = bool, alert_message = string) → void"
  },
  "strategy.risk.allow_entry_in ⇨ 𝑓": {
     "prefix": "strategy.risk.allow_entry_in",
     "body": [
        "strategy.risk.allow_entry_in(value = ${1| ,strategy.direction.all,strategy.direction.long,strategy.direction.short|})",
        "${0}"
     ],
     "description": "Strict `value` direction entry ⇨ 𝑓 | strategy.risk.allow_entry_in(value = string) → void"
  },
  "strategy.risk.max_cons_loss_days ⇨ 𝑓": {
     "prefix": "strategy.risk.max_cons_loss_days",
     "body": [
        "strategy.risk.max_cons_loss_days(count = ${1}, alert_message = ${2:\"${3}\"})",
        "${0}"
     ],
     "description": "Close all and stop after consecutive days with `count` losses ⇨ 𝑓 | strategy.risk.max_cons_loss_days(count = int, alert_message = string) → series void"
  },
  "strategy.risk.max_drawdown ⇨ 𝑓": {
     "prefix": "strategy.risk.max_drawdown",
     "body": [
        "strategy.risk.max_drawdown(count = ${1}, type = ${2| ,strategy.percent_of_equity,strategy.cash|}, alert_message = ${3:\"${4}\"})",
        "${0}"
     ],
     "description": "Maximum drawdown ⇨ 𝑓 | strategy.risk.max_drawdown(count = int, type = string, alert_message = string) → series void"
  },
  "strategy.risk.max_intraday_filled_orders ⇨ 𝑓": {
     "prefix": "strategy.risk.max_intraday_filled_orders",
     "body": [
        "strategy.risk.max_intraday_loss(count = ${1}, alert_message = ${2:\"${3}\"})",
        "${0}"
     ],
     "description": "Maximum number of filled orders per 1 day ⇨ 𝑓 | strategy.risk.max_intraday_loss(count = int, alert_message = string) → series void"
  },
  "strategy.risk.max_intraday_loss ⇨ 𝑓": {
     "prefix": "strategy.risk.max_intraday_loss",
     "body": [
        "strategy.risk.max_intraday_loss(value = ${1}, type = ${2| ,strategy.percent_of_equity,strategy.cash,strategy.percent_of_equity|}, alert_message = ${3:\"${4}\"}) ",
        "${0}"
     ],
     "description": "Maximum loss per 1 day ⇨ 𝑓 | strategy.risk.max_intraday_loss(value = int|float, type = string, alert_message = string) → series void"
  },
  "strategy.risk.max_position_size ⇨ 𝑓": {
     "prefix": "strategy.risk.max_position_size",
     "body": [
        "strategy.risk.max_position_size(contracts = ${1})",
        "${0}"
     ],
     "description": "Maximum number of contracts|shares|lots|units in a position ⇨ 𝑓 | strategy.risk.max_position_size(contracts = int|float) → void"
  },
  "string ⇨ 𝑓": {
     "prefix": "string",
     "body": [
        "string(${1}) ${0}"
     ],
     "description": "Casts na to string ⇨ 𝑓 | string(x) → (const|input|simple|series) string"
  },
  "syminfo.prefix ⇨ 𝑓": {
     "prefix": "syminfo.prefix",
     "body": [
        "syminfo.prefix(symbol = ${1| ,syminfo.tickerid|}) ${0}"
     ],
     "description": "Returns exchange prefix of the `symbol`. ⇨ 𝑓 | syminfo.prefix(symbol = string) → (simple|series) string"
  },
  "syminfo.ticker ⇨ 𝑓": {
     "prefix": "syminfo.ticker",
     "body": [
        "syminfo.ticker(symbol = ${1| ,syminfo.tickerid|}) ${0}"
     ],
     "description": "Returns `symbol` name without exchange prefix. ⇨ 𝑓 | syminfo.ticker(symbol = string) → (simple|series) string"
  },
  "ta.alma ⇨ 𝑓": {
     "prefix": "ta.alma",
     "body": [
        "ta.alma(series = ${1}, length = ${2}, offset = ${3}, sigma = ${4}${5:, floor = ${6| ,true,false|}}) ${0}"
     ],
     "description": "Arnaud Legoux Moving Average ⇨ 𝑓 | ta.alma(series = int|float, length = int, offset  = int|float, sigma = int|float, floor = bool) → series float"
  },
  "ta.atr ⇨ 𝑓": {
     "prefix": "ta.atr",
     "body": [
        "ta.atr(length = ${1}) ${0}"
     ],
     "description": "Average True Range ⇨ 𝑓 | ta.atr(length = int) → series float"
  },
  "ta.barssince ⇨ 𝑓": {
     "prefix": "ta.barssince",
     "body": [
        "ta.barssince(condition = ${1}) ${0}"
     ],
     "description": "Bars since the last time the condition was true ⇨ 𝑓 | ta.barssince(condition = bool) → series int"
  },
  "ta.bb ⇨ 𝑓": {
     "prefix": "ta.bb",
     "body": [
        "ta.bb(series = ${1}, length = ${2}, mult = ${3}) ${0}"
     ],
     "description": "Bollinger Bands | [middle, upper, lower] ⇨ 𝑓 | ta.bb(series = int|float, length = int, mult = int|float) → [series float, series float, series float]"
  },
  "ta.bbw ⇨ 𝑓": {
     "prefix": "ta.bbw",
     "body": [
        "ta.bbw(series = ${1}, length = ${2}, mult = ${3}) ${0}"
     ],
     "description": "Bollinger Bands Width ⇨ 𝑓 | ta.bbw(series = int|float, length = int, mult = int|float) → series float"
  },
  "ta.cci ⇨ 𝑓": {
     "prefix": "ta.cci",
     "body": [
        "ta.cci(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "CCI | Commodity Channel Index ⇨ 𝑓 | ta.cci(source = int|float, length = int) → series float"
  },
  "ta.change ⇨ 𝑓": {
     "prefix": "ta.change",
     "body": [
        "ta.change(source = ${1}${2:, length = ${3}}) ${0}"
     ],
     "description": "Difference between current value and previous ⇨ 𝑓 | ta.change(source = int|float, length = int) → series float"
  },
  "ta.cmo ⇨ 𝑓": {
     "prefix": "ta.cmo",
     "body": [
        "ta.cmo(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Chande Momentum Oscillator ⇨ 𝑓 | ta.cmo(source = int|float, length = int) → series float"
  },
  "ta.cog ⇨ 𝑓": {
     "prefix": "ta.cog",
     "body": [
        "ta.cog(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "COG | Center Of Gravity ⇨ 𝑓 | ta.cog(source = int|float, length = int) → series float"
  },
  "ta.correlation ⇨ 𝑓": {
     "prefix": "ta.correlation",
     "body": [
        "ta.correlation(source1 = ${1}, source2 = ${2}, source2 = ${3}) ${0}"
     ],
     "description": "Pearson Correlation coefficient ⇨ 𝑓 | ta.correlation(source1 = int|float, source2 = int|float, length = int) → series float"
  },
  "ta.cross ⇨ 𝑓": {
     "prefix": "ta.cross",
     "body": [
        "ta.cross(source1 = ${1}, source2 = ${2}) ${0}"
     ],
     "description": "true if two series have crossed each other ⇨ 𝑓 | ta.cross(source1 = int|float, source2 = int|float) → series bool"
  },
  "ta.crossover ⇨ 𝑓": {
     "prefix": "ta.crossover",
     "body": [
        "ta.crossover(source1 = ${1}, source2 = ${2}) ${0}"
     ],
     "description": "true if `source1` crossed over `source2` ⇨ 𝑓 | ta.crossover(source1 = int|float, source2 = int|float) → series bool"
  },
  "ta.crossunder ⇨ 𝑓": {
     "prefix": "ta.crossunder",
     "body": [
        "ta.crossunder(source1 = ${1}, source2 = ${2}) ${0}"
     ],
     "description": "true if `source1` crossed under `source2` ⇨ 𝑓 | ta.crossunder(source1 = int|float, source2 = int|float) → series bool"
  },
  "ta.cum ⇨ 𝑓": {
     "prefix": "ta.cum",
     "body": [
        "ta.cum(source = ${1}) ${0}"
     ],
     "description": "Total sum `source` series ⇨ 𝑓 | ta.cum(source = int|float) → series float"
  },
  "ta.dev ⇨ 𝑓": {
     "prefix": "ta.dev",
     "body": [
        "ta.dev(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Deviation between the `source` series and it's ta.sma ⇨ 𝑓 | ta.dev(source = int|float, length = int) → series float"
  },
  "ta.dmi ⇨ 𝑓": {
     "prefix": "ta.dmi",
     "body": [
        "ta.dmi(diLength = ${1}, adxSmoothing = ${2}) ${0}"
     ],
     "description": "Tuple of three : [+DI, -DI, ADX] ⇨ 𝑓 | ta.dmi(diLength = int, adxSmoothing = int) → [series float, series float, series float]"
  },
  "ta.ema ⇨ 𝑓": {
     "prefix": "ta.ema",
     "body": [
        "ta.ema(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Exponentially Moving Average ⇨ 𝑓 | ta.ema(source = int|float, length = int) → series float"
  },
  "ta.falling ⇨ 𝑓": {
     "prefix": "ta.falling",
     "body": [
        "ta.falling(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "`source` series is now falling for `length` bars long ⇨ 𝑓 | ta.falling(source = int|float, length = int) → series bool"
  },
  "ta.highest ⇨ 𝑓": {
     "prefix": "ta.highest",
     "body": [
        "ta.highest(${1:source =${2}, }length = ${3}) ${0}"
     ],
     "description": "Highest value in the `source` series ⇨ 𝑓 | ta.highest(source = int|float, length = int) → series float"
  },
  "ta.highestbars ⇨ 𝑓": {
     "prefix": "ta.highestbars",
     "body": [
        "ta.highestbars(${1:source =${2}, }length = ${3}) ${0}"
     ],
     "description": "Offset to the highest bar ⇨ 𝑓 | ta.highestbars(source = int|float, length = int) → series int"
  },
  "ta.hma ⇨ 𝑓": {
     "prefix": "ta.hma",
     "body": [
        "ta.hma(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Hull Moving Average ⇨ 𝑓 | ta.hma(source = int|float, length = int) → series float"
  },
  "ta.kc ⇨ 𝑓": {
     "prefix": "ta.kc",
     "body": [
        "ta.kc(series = ${1}, length = ${2}, mult = ${3}${4:, useTrueRange = ${5| ,true,false|}}) ${0}"
     ],
     "description": "Keltner Channels ⇨ 𝑓 | ta.kc(series = int|float, length = int, mult = int|float, useTrueRange = bool) → [series float, series float, series float]"
  },
  "ta.kcw ⇨ 𝑓": {
     "prefix": "ta.kcw",
     "body": [
        "ta.kcw(series = ${1}, length = ${2}, mult = ${3}${4:, useTrueRange = ${5| ,true,false|}}) ${0}"
     ],
     "description": "Keltner Channels Width ⇨ 𝑓 | ta.kcw(series = int|float, length = int, mult = int|float, useTrueRange = bool) → series float"
  },
  "ta.linreg ⇨ 𝑓": {
     "prefix": "ta.linreg",
     "body": [
        "ta.linreg(source = ${1}, length = ${2}, offset = ${3}) ${0}"
     ],
     "description": "Linear Regression Curve ⇨ 𝑓 | ta.linreg(source = int|float, length = int, offset = int) → series float"
  },
  "ta.lowest ⇨ 𝑓": {
     "prefix": "ta.lowest",
     "body": [
        "ta.lowest(source = ${1}${2:, length = ${3}}) ${0}"
     ],
     "description": "Lowest value in the `source` ⇨ 𝑓 | ta.lowest(source = int|float, length = int) → series float"
  },
  "ta.lowestbars ⇨ 𝑓": {
     "prefix": "ta.lowestbars",
     "body": [
        "ta.lowestbars(source = ${1}${2:, length = ${3}}) ${0}"
     ],
     "description": "Offset to the lowest bar ⇨ 𝑓 | ta.lowestbars(source = int|float, length = int) → series int"
  },
  "ta.macd ⇨ 𝑓": {
     "prefix": "ta.macd",
     "body": [
        "ta.macd(source = ${1}, fastlen = ${2}, slowlen = ${3}, siglen = ${4}) ${0}"
     ],
     "description": "MACD | Moving Average Convergence/Divergence ⇨ 𝑓 | ta.macd(source = int|float, fastlen = int, slowlen = int, siglen = int) → [series float, series float, series float]"
  },
  "ta.max ⇨ 𝑓": {
     "prefix": "ta.max",
     "body": [
        "ta.max(source = ${1}) ${0}"
     ],
     "description": "Returns the all-time high value of `source` from the beginning of chart ⇨ 𝑓 | ta.max(source = int|float) → series float"
  },
  "ta.median ⇨ 𝑓": {
     "prefix": "ta.median",
     "body": [
        "ta.median(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Median of `source` ⇨ 𝑓 | ta.median(source = int|float, length = int) → series int|float"
  },
  "ta.mfi ⇨ 𝑓": {
     "prefix": "ta.mfi",
     "body": [
        "ta.mfi(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Money Flow Index ⇨ 𝑓 | ta.mfi(source = int|float, length = int) → series float"
  },
  "ta.min ⇨ 𝑓": {
     "prefix": "ta.min",
     "body": [
        "ta.min(source = ${1}) ${0}"
     ],
     "description": "Returns the all-time low value of `source` from the beginning of chart ⇨ 𝑓 | ta.min(source = int|float) → series float"
  },
  "ta.mode ⇨ 𝑓": {
     "prefix": "ta.mode",
     "body": [
        "ta.mode(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Mode of `source` ⇨ 𝑓 | ta.mode(source = int|float, length = int) → series int|float"
  },
  "ta.mom ⇨ 𝑓": {
     "prefix": "ta.mom",
     "body": [
        "ta.mom(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Momentum of `source` price & `length` ⇨ 𝑓 | ta.mom(source = int|float, length = int) → series float"
  },
  "ta.percentile_linear_interpolation ⇨ 𝑓": {
     "prefix": "ta.percentile_linear_interpolation",
     "body": [
        "ta.percentile_linear_interpolation(source = ${1}, length = ${2}, percentage = ${3}) ${0}"
     ],
     "description": "Percentile method of linear interpolation ⇨ 𝑓 | ta.percentile_linear_interpolation(source = int|float, length = int, percentage = int|float) → series float"
  },
  "ta.percentile_nearest_rank ⇨ 𝑓": {
     "prefix": "ta.percentile_nearest_rank",
     "body": [
        "ta.percentile_nearest_rank(source = ${1}, length = ${2}, percentage = ${3}) ${0}"
     ],
     "description": "Percentile using method of Nearest Rank ⇨ 𝑓 | ta.percentile_nearest_rank(source = int|float, length = int, percentage = int|float) → series float"
  },
  "ta.percentrank ⇨ 𝑓": {
     "prefix": "ta.percentrank",
     "body": [
        "ta.percentrank(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Previous values less than or equal to the curr. value ⇨ 𝑓 | ta.percentrank(source = int|float, length = int) → series float"
  },
  "ta.pivot_point_levels ⇨ 𝑓": {
     "prefix": "ta.pivot_point_levels",
     "body": [
        "ta.pivot_point_levels(type = ${1| ,\"Traditional\",\"Fibonacci\",\"Woodie\",\"Classic\",\"DM\",\"Camarilla\"|}, anchor = ${2| ,true,false|}${3:, developing = ${4| ,true,false|}}) ${0}"
     ],
     "description": "Calculates the pivot point levels using the specified `type` and `anchor`. ⇨ 𝑓 | ta.pivot_point_levels(type = string, anchor = bool, developing = bool) → float[]"
  },
  "ta.pivothigh ⇨ 𝑓": {
     "prefix": "ta.pivothigh",
     "body": [
        "ta.pivothigh(source = ${1}, leftbars = ${2}${3:, rightbars = ${4}}) ${0}"
     ],
     "description": "Price of the pivot high point else 'NaN' ⇨ 𝑓 | ta.pivothigh(source = int|float, leftbars = int|float, rightbars = int|float) → series float"
  },
  "ta.pivotlow ⇨ 𝑓": {
     "prefix": "ta.pivotlow",
     "body": [
        "ta.pivotlow(source = ${1}, leftbars = ${2}${3:, rightbars = ${4}}) ${0}"
     ],
     "description": "Price of the pivot low point else 'NaN' ⇨ 𝑓 | ta.pivotlow(source = int|float, leftbars = int|float, rightbars = int|float) → series float"
  },
  "ta.range ⇨ 𝑓": {
     "prefix": "ta.range",
     "body": [
        "ta.range(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Difference between the min and max ⇨ 𝑓 | ta.range(source = int|float, length = int) → series int|float"
  },
  "ta.rising ⇨ 𝑓": {
     "prefix": "ta.rising",
     "body": [
        "ta.rising(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "`source` series is now rising for `length` bars long ⇨ 𝑓 | ta.rising(source = int|float, length = int) → series bool"
  },
  "ta.rma ⇨ 𝑓": {
     "prefix": "ta.rma",
     "body": [
        "ta.rma(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Moving average used in RSI ⇨ 𝑓 | ta.rma(source = int|float, length = int) → series float"
  },
  "ta.roc ⇨ 𝑓": {
     "prefix": "ta.roc",
     "body": [
        "ta.roc(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Rate of change ⇨ 𝑓 | ta.roc(source = int|float, length = int) → series float"
  },
  "ta.rsi ⇨ 𝑓": {
     "prefix": "ta.rsi",
     "body": [
        "ta.rsi(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Relative strength index ⇨ 𝑓 | ta.rsi(source = int|float, length = int) → series float"
  },
  "ta.sar ⇨ 𝑓": {
     "prefix": "ta.sar",
     "body": [
        "ta.sar(start = ${1}, inc = ${2}, max = ${3}) ${0}"
     ],
     "description": "Parabolic SAR | Stop And Reverse ⇨ 𝑓 | ta.sar(start = int|float, inc = int|float, max = int|float) → series float"
  },
  "ta.sma ⇨ 𝑓": {
     "prefix": "ta.sma",
     "body": [
        "ta.sma(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Simple moving average ⇨ 𝑓 | ta.sma(source = int|float, length = int) → series float"
  },
  "ta.stdev ⇨ 𝑓": {
     "prefix": "ta.stdev",
     "body": [
        "ta.stdev(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Standard deviation ⇨ 𝑓 | ta.stdev(source = int|float, length = int) → series float"
  },
  "ta.stoch ⇨ 𝑓": {
     "prefix": "ta.stoch",
     "body": [
        "ta.stoch(source = ${1}, high = ${2}, low = ${3},  length = ${4}) ${0}"
     ],
     "description": "Stochastic ⇨ 𝑓 | ta.stoch(source = int|float, high = int|float, low = int|float, length = int) → series float"
  },
  "ta.supertrend ⇨ 𝑓": {
     "prefix": "ta.supertrend",
     "body": [
        "ta.supertrend(factor = ${1:ATR Multiplier}, atrPeriod = ${2:ATR Length}) ${0}"
     ],
     "description": "Supertrend Indicator ⇨ 𝑓 | ta.supertrend(factor = int|float, atrPeriod = int) → [series float, series float]"
  },
  "ta.swma ⇨ 𝑓": {
     "prefix": "ta.swma",
     "body": [
        "ta.swma(source = ${1| ,close,high,low,open,hl2,hlc3,ohlc4|}) ${0}"
     ],
     "description": "Symmetrically weighted moving average ⇨ 𝑓 | ta.swma(source = int|float) → series float"
  },
  "ta.tr ⇨ 𝑓": {
     "prefix": "ta.tr",
     "body": [
        "ta.tr(handle_na = ${1|true,false|}) ${0}"
     ],
     "description": "True range ⇨ 𝑓 | ta.tr(handle_na = bool) → series float"
  },
  "ta.tsi ⇨ 𝑓": {
     "prefix": "ta.tsi",
     "body": [
        "ta.tsi(source = ${1}, short_length = ${2}, long_length = ${3}) ${0}"
     ],
     "description": "True strength index ⇨ 𝑓 | ta.tsi(source = int|float, short_length = int, long_length = int) → series float"
  },
  "ta.valuewhen ⇨ 𝑓": {
     "prefix": "ta.valuewhen",
     "body": [
        "ta.valuewhen(condition = ${1}, source = ${2|close,high,low,open,hl2,hlc3,ohlc4|}, occurrence = ${3|0,1,2,3,4,5,6,7,8,9|}) ${0}"
     ],
     "description": "Source value when condition was true ⇨ 𝑓 | ta.valuewhen(condition = bool, source = int|float, occurrence = int) → series int|float"
  },
  "ta.variance ⇨ 𝑓": {
     "prefix": "ta.variance",
     "body": [
        "ta.variance(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Variance of `source` for `length` bars back ⇨ 𝑓 | ta.variance(source = int|float, length = int) → series float"
  },
  "ta.vwap ⇨ 𝑓": {
     "prefix": "ta.vwap",
     "body": [
        "ta.vwap(source = ${1}) ${0}"
     ],
     "description": "Volume weighted average price ⇨ 𝑓 | ta.vwap(source = int|float) → series float"
  },
  "ta.vwma ⇨ 𝑓": {
     "prefix": "ta.vwma",
     "body": [
        "ta.vwma(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Volume-weighted moving average ⇨ 𝑓 | ta.vwma(source = int|float, length = int) → series float"
  },
  "ta.wma ⇨ 𝑓": {
     "prefix": "ta.wma",
     "body": [
        "ta.wma(source = ${1}, length = ${2}) ${0}"
     ],
     "description": "Weighted moving average ⇨ 𝑓 | ta.wma(source = int|float, length = int) → series float"
  },
  "ta.wpr ⇨ 𝑓": {
     "prefix": "ta.wpr",
     "body": [
        "ta.wpr(length = ${1}) ${0}"
     ],
     "description": "Williams %R. Oscillator ⇨ 𝑓 | ta.wpr(length = int) → series float"
  },
  "table ⇨ 𝑓": {
     "prefix": "table",
     "body": [
        "table(x = ${1}) $0"
     ],
     "description": "Casts na to table ⇨ 𝑓 | table(x = table) → series table"
  },
  "table.cell.block ⇨ 𝑓": {
     "prefix": "table.cell.block",
     "body": [
        "table.cell(",
        " table_id       = ${1}, ",
        " column         = ${2| ,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|}, ",
        " row            = ${3| ,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|}, ",
        " text           = ${4:\"${5}\"}, ",
        " width          = ${6| ,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|}, ",
        " height         = ${7| ,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|}, ",
        " text_color     = color.new(color = ${8| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${9:0}), ",
        " text_halign    = ${10| ,text.align_left,text.align_center,text.align_right|}, ",
        " text_valign    = ${11| ,text.align_top,text.align_center,text.align_bottom|}, ",
        " text_size      = ${12| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|}, ",
        " bgcolor        = color.new(color = ${13| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${14:0})",
        " )",
        "$0"
     ],
     "description": "Defines a cell in the table and sets its attributes | Block ⇨ 𝑓 | table.cell(table_id = table, column = int, row = int, text = string, width = int|float, height = int|float, text_color = color, text_halign = string, text_valign = string, text_size = string, bgcolor = color) → void"
  },
  "table.cell ⇨ 𝑓": {
     "prefix": "table.cell",
     "body": [
        "table.cell(table_id = ${1}, column = ${2| ,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|}, row = ${3| ,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|}, text = ${4:\"${5}\"}, width = ${6| ,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|}, height = ${7| ,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20|}, text_color = color.new(color = ${8| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${9:0}), text_halign = ${10| ,text.align_left,text.align_center,text.align_right|}, text_valign = ${11| ,text.align_top,text.align_center,text.align_bottom|}, text_size = ${12| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|}, bgcolor = color.new(color = ${13| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${14:0}))",
        "$0"
     ],
     "description": "Defines a cell in the table and sets its attributes ⇨ 𝑓 | table.cell(table_id = table, column = int, row = int, text = string, width = int|float, height = int|float, text_color = color, text_halign = string, text_valign = string, text_size = string, bgcolor = color) → void"
  },
  "table.cell_set_bgcolor ⇨ 𝑓": {
     "prefix": "table.cell_set_bgcolor",
     "body": [
        "table.cell_set_bgcolor(table_id = ${1}, column = ${2}, row = ${3}, bgcolor = color.new(color = ${4| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${5:0}))",
        "$0"
     ],
     "description": "Background color of the cell ⇨ 𝑓 | table.cell_set_bgcolor(table_id = table, column = int, row = int, bgcolor = color) → void"
  },
  "table.cell_set_height ⇨ 𝑓": {
     "prefix": "table.cell_set_height",
     "body": [
        "table.cell_set_height(table_id = ${1}, column = ${2}, row = ${3}, height = ${4})",
        "$0"
     ],
     "description": "Height of cell ⇨ 𝑓 | table.cell_set_height(table_id = table, column = int, row = int, height = int|float) → void"
  },
  "table.cell_set_text ⇨ 𝑓": {
     "prefix": "table.cell_set_text",
     "body": [
        "table.cell_set_text(table_id = ${1}, column = ${2}, row = ${3}, text = ${4:\"${5}\"})",
        "$0"
     ],
     "description": "Sets the text in specified cell ⇨ 𝑓 | table.cell_set_text(table_id = table, column = int, row = int, text = string) → void"
  },
  "table.cell_set_text_color ⇨ 𝑓": {
     "prefix": "table.cell_set_text_color",
     "body": [
        "table.cell_set_text_color(table_id = ${1}, column = ${2}, row = ${3}, text_color = color.new(color = ${4| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${5:0}))",
        "$0"
     ],
     "description": "Color of the text inside the cell ⇨ 𝑓 | table.cell_set_text_color(table_id = table, column = int, row = int, text_color = color) → void"
  },
  "table.cell_set_text_font_family ⇨ 𝑓": {
     "prefix": "table.cell_set_text_font_family",
     "body": [
        "table.cell_set_text_font_family(table_id = ${1}, column = ${2}, row = ${3}, text_font_family = ${4})"
     ],
     "description": "Sets font family of text inside the cell. ⇨ 𝑓 | table.cell_set_text_font_family(table_id = table, column = int, row = int, text_font_family = string) → void"
  },
  "table.cell_set_text_halign ⇨ 𝑓": {
     "prefix": "table.cell_set_text_halign",
     "body": [
        "table.cell_set_text_halign(table_id = ${1}, column = ${2}, row = ${3}, text_halign = ${4| ,text.align_left,text.align_center,text.align_right|})",
        "$0"
     ],
     "description": "Horizontal alignment of the cell's text ⇨ 𝑓 | table.cell_set_text_halign(table_id = table, column = int, row = int, text_halign = string) → void"
  },
  "table.cell_set_text_size ⇨ 𝑓": {
     "prefix": "table.cell_set_text_size",
     "body": [
        "table.cell_set_text_size(table_id = ${1}, column = ${2}, row = ${3}, text_size = ${4| ,size.auto,size.tiny,size.small,size.normal,size.large,size.huge|})",
        "$0"
     ],
     "description": "Size of the cell's text ⇨ 𝑓 | table.cell_set_text_size(table_id = table, column = int, row = int, text_size = string) → void"
  },
  "table.cell_set_text_valign ⇨ 𝑓": {
     "prefix": "table.cell_set_text_valign",
     "body": [
        "table.cell_set_text_valign(table_id = ${1}, column = ${2}, row = ${3}, text_valign = ${4| ,text.align_top,text.align_center,text.align_bottom|})",
        "$0"
     ],
     "description": "Vertical alignment of a cell's text ⇨ 𝑓 | table.cell_set_text_valign(table_id = table, column = int, row = int, text_valign = string) → void"
  },
  "table.cell_set_tooltip ⇨ 𝑓": {
     "prefix": "table.cell_set_tooltip",
     "body": [
        "table.cell_set_tooltip(table_id = ${1}, column = ${2}, row = ${3}, tooltip = ${4})"
     ],
     "description": "Sets tooltip in specified cell. ⇨ 𝑓 | table.cell_set_tooltip(table_id = table, column = int, row = int, tooltip = string) → void"
  },
  "table.cell_set_width ⇨ 𝑓": {
     "prefix": "table.cell_set_width",
     "body": [
        "table.cell_set_width(table_id = ${1}, column = ${2}, row = ${3}, width = ${4})",
        "$0"
     ],
     "description": "Width of the cell ⇨ 𝑓 | table.cell_set_width(table_id = table, column = int, row = int, width = int|float) → void"
  },
  "table.clear ⇨ 𝑓": {
     "prefix": "table.clear",
     "body": [
        "table.clear(table_id = ${1}, start_column = ${2}, start_row = ${3}, end_column = ${4}, end_row = ${5})",
        "$0"
     ],
     "description": "Removes a cell or a sequence of cells from the table ⇨ 𝑓 | table.clear(table_id = table, start_column = int, start_row = int, end_column = int, end_row = int) → void"
  },
  "table.delete ⇨ 𝑓": {
     "prefix": "table.delete",
     "body": [
        "table.delete(table_id = ${1})",
        "$0"
     ],
     "description": "Deletes a table ⇨ 𝑓 | table.delete(table_id = table) → void"
  },
  "table.new.block ⇨ 𝑓": {
     "prefix": "table.new.block",
     "body": [
        "table.new(",
        " position       = ${1| ,position.top_left,position.top_center,position.top_right,position.middle_left,position.middle_center,position.middle_right,position.bottom_left,position.bottom_center,position.bottom_right|},",
        " columns        = ${2| ,1,2,3,4,5|},",
        " rows           = ${3| ,1,2,3,4,5|},",
        " bgcolor        = color.new(color = ${4| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${5:0}),",
        " frame_color    = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${7:0}),",
        " frame_width    = ${8| ,1,2,3,4,5|},",
        " border_color   = color.new(color = ${9| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${10:0}),",
        " border_width   = ${11| ,1,2,3,4,5|}",
        " )",
        "$0"
     ],
     "description": "Creates a new table | block ⇨ 𝑓 | table.new(position = int, columns = int, rows = int, bgcolor = color, frame_color = color, frame_width = int, border_color = color, border_width = int) → series table"
  },
  "table.new ⇨ 𝑓": {
     "prefix": "table.new",
     "body": [
        "table.new(position = ${1| ,position.top_left,position.top_center,position.top_right,position.middle_left,position.middle_center,position.middle_right,position.bottom_left,position.bottom_center,position.bottom_right|}, columns = ${2| ,1,2,3,4,5|}, rows = ${3| ,1,2,3,4,5|}, bgcolor = color.new(color = ${4| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${5:0}), frame_color = color.new(color = ${6| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${7:0}), frame_width = ${8| ,1,2,3,4,5|}, border_color = color.new(color = ${9| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${10:0}), border_width = ${11| ,1,2,3,4,5|})",
        "$0"
     ],
     "description": "Creates a new table ⇨ 𝑓 | table.new(position = int, columns = int, rows = int, bgcolor = color, frame_color = color, frame_width = int, border_color = color, border_width = int) → series table"
  },
  "table.set_bgcolor ⇨ 𝑓": {
     "prefix": "table.set_bgcolor",
     "body": [
        "table.set_bgcolor(table_id = ${1}, bgcolor = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${3:0})) ${0}"
     ],
     "description": "Background color of a table ⇨ 𝑓 | table.set_bgcolor(table_id = table, bgcolor = color) → void"
  },
  "table.set_border_color ⇨ 𝑓": {
     "prefix": "table.set_border_color",
     "body": [
        "table.set_border_color(table_id = ${1}, border_color = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${3:0})) ${0}"
     ],
     "description": "Color of the borders of the table's cells ⇨ 𝑓 | table.set_border_color(table_id = table, border_color = color) → void"
  },
  "table.set_border_width ⇨ 𝑓": {
     "prefix": "table.set_border_width",
     "body": [
        "table.set_border_width(table_id = ${1}, border_width = ${2}) ${0}"
     ],
     "description": "Width of the borders of the table's cells ⇨ 𝑓 | table.set_border_width(table_id = table, border_width = int) → void"
  },
  "table.set_frame_color ⇨ 𝑓": {
     "prefix": "table.set_frame_color",
     "body": [
        "table.set_frame_color(table_id = ${1}, frame_color = color.new(color = ${2| ,color.aqua,color.black,color.blue,color.fuchsia,color.gray,color.green,color.lime,color.maroon,color.navy,color.olive,color.orange,color.purple,color.red,color.silver,color.teal,color.white,color.yellow|}, transp = ${3:0})) ${0}"
     ],
     "description": "Color of the outer frame of a table ⇨ 𝑓 | table.set_frame_color(table_id = table, frame_color = color) → void"
  },
  "table.set_frame_width ⇨ 𝑓": {
     "prefix": "table.set_frame_width",
     "body": [
        "table.set_frame_width(table_id = ${1}, frame_width = ${2}) ${0}"
     ],
     "description": "Width of the outer frame of a table ⇨ 𝑓 | table.set_frame_width(table_id = table, frame_width = int) → void"
  },
  "table.set_position ⇨ 𝑓": {
     "prefix": "table.set_position",
     "body": [
        "table.set_position(table_id = ${1}, position = ${2| ,position.top_left,position.top_center,position.top_right,position.middle_left,position.middle_center,position.middle_right,position.bottom_left,position.bottom_center,position.bottom_right|}) ${0}"
     ],
     "description": "Position of a table ⇨ 𝑓 | table.set_position(table_id = table, position = string) → void"
  },
  "ticker.heikinashi ⇨ 𝑓": {
     "prefix": "ticker.heikinashi",
     "body": [
        "ticker.heikinashi(symbol =  ${1| ,\"\",syminfo.ticker,syminfo.tickerid|}) ${0}"
     ],
     "description": "Ticker identifier for requesting Heikin Ashi bar values ⇨ 𝑓 | ticker.heikinashi(symbol = simple string) → simple string"
  },
  "ticker.kagi ⇨ 𝑓": {
     "prefix": "ticker.kagi",
     "body": [
        "ticker.kagi(symbol =  ${1| ,\"\",syminfo.ticker,syminfo.tickerid|}, reversal = ${2}) ${0}"
     ],
     "description": "Ticker identifier for requesting Kagi values ⇨ 𝑓 | ticker.kagi(symbol = string, reversal = int|float) → simple string"
  },
  "ticker.linebreak ⇨ 𝑓": {
     "prefix": "ticker.linebreak",
     "body": [
        "ticker.linebreak(symbol =  ${1| ,\"\",syminfo.ticker,syminfo.tickerid|}, number_of_lines = ${2}) ${0}"
     ],
     "description": "Ticker identifier for requesting Line Break values ⇨ 𝑓 | ticker.linebreak(symbol = string, number_of_lines = int) → simple string"
  },
  "ticker.modify ⇨ 𝑓": {
     "prefix": "ticker.modify",
     "body": [
        "ticker.modify(tickerid = \"${1}\", session = ${2| ,session.regular,session.extended|}, adjustment = ${3| ,adjustment.none,adjustment.splits,adjustment.dividends|}) ${0}"
     ],
     "description": "Modify called ticker ⇨ 𝑓 | ticker.modify(tickerid = string, session = string, adjustment = string) → simple string"
  },
  "ticker.new ⇨ 𝑓": {
     "prefix": "ticker.new",
     "body": [
        "ticker.new(prefix = ${1| ,\"\",syminfo.prefix|}, ticker = ${2| ,\"\",syminfo.ticker|}, session = ${3| ,session.regular,session.extended|}, adjustment = ${4| ,adjustment.none,adjustment.splits,adjustment.dividends|}) ${0}"
     ],
     "description": "Creates a ticker identifier ⇨ 𝑓 | ticker.new(prefix = string, ticker = string, session = string, adjustment = string) → simple string"
  },
  "ticker.pointfigure ⇨ 𝑓": {
     "prefix": "ticker.pointfigure",
     "body": [
        "ticker.pointfigure(symbol = ${1| ,\"\",syminfo.ticker,syminfo.tickerid|}, source = ${2| ,\"hl\",\"close\"|}, style = ${3| ,\"ATR\",\"Traditional\"|}, param = ${4}, reversal = ${5}) ${0}"
     ],
     "description": "Ticker identifier for requesting Point & Figure values ⇨ 𝑓 | ticker.pointfigure(symbol = string, source = string, style = string, param = int|float, reversal = int) → simple string"
  },
  "ticker.renko ⇨ 𝑓": {
     "prefix": "ticker.renko",
     "body": [
        "ticker.renko(symbol = \"${1}\", style = ${2| ,\"ATR\",\"Traditional\"|}, param = ${3} ) ${0}"
     ],
     "description": "Ticker identifier for requesting Renko values ⇨ 𝑓 | ticker.renko(symbol = string, style = string, param = int|float) → simple string"
  },
  "ticker.standard ⇨ 𝑓": {
     "prefix": "ticker.standard",
     "body": [
        "ticker.standard(symbol = ${1| ,syminfo.tickerid|}) ${0}"
     ],
     "description": "Creates a ticker to request data from a standard chart that is unaffected by modifiers. ⇨ 𝑓 | ticker.standard(symbol = string) → simple string"
  },
  "time ⇨ 𝑓": {
     "prefix": "time",
     "body": [
        "time(timeframe = \"${1| ,1,2,3,5,7,10,15,30,60,90,120,180,240,360,480,D,2D,5D,W,2W,M,2M,6M,Y|}\"${2:, session = \"${3| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}-${4| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}\"${5:, timezone = ${6| ,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}}}) $0"
     ],
     "description": "UNIX time of the current bar for the specified timeframe and session or NaN ⇨ 𝑓 | time(timeframe = string, timezone = series string) → series int"
  },
  "time_close ⇨ 𝑓": {
     "prefix": "time_close",
     "body": [
        "time_close(timeframe = \"${1| ,1,2,3,5,7,10,15,30,60,90,120,180,240,360,480,D,2D,5D,W,2W,M,2M,6M,Y|}\"${2:, session = \"${3| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}-${4| ,0000,0001,0015,0030,0045,0100,0115,0130,0145,0200,0215,0230,0245,0300,0315,0330,0345,0400,0415,0430,0445,0500,0515,0530,0545,0600,0615,0630,0645,0700,0715,0730,0745,0800,0815,0830,0845,0900,0915,0930,0945,1000,1015,1030,1045,1100,1115,1130,1145,1200,1215,1230,1245,1300,1315,1330,1345,1400,1415,1430,1445,1500,1515,1530,1545,1600,1615,1630,1645,1700,1715,1730,1745,1800,1815,1830,1845,1900,1915,1930,1945,2000,2015,2030,2045,2100,2115,2130,2145,2200,2215,2230,2245,2300,2315,2330,2345,2359,2400|}\"${5:, timezone = ${6| ,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}}}) $0"
     ],
     "description": "UNIX time of the close of the current bar for the specified resolution and session or NaN ⇨ 𝑓 | time_close(timeframe = string, timezone = series string) → series int"
  },
  "timeframe.change ⇨ 𝑓": {
     "prefix": "timeframe.change",
     "body": [
        "timeframe.change(timeframe = ${1| ,timeframe.period,'1','2','3','5','7','10','15','30','60','90','120','180','240','360','480','D','2D','5D','W','2W','M','2M','6M','Y'|}) ${0}"
     ],
     "description": "Detects changes in the specified `timeframe`. ⇨ 𝑓 | timeframe.change(timeframe = string) → series bool"
  },
  "timeframe.in_seconds ⇨ 𝑓": {
     "prefix": "timeframe.in_seconds",
     "body": [
        "timeframe.in_seconds(timeframe = ${1| ,timeframe.period,'1','2','3','5','7','10','15','30','60','90','120','180','240','360','480','D','2D','5D','W','2W','M','2M','6M','Y'|}) ${0}"
     ],
     "description": "Converts the timeframe passed to the `timeframe` argument into seconds. ⇨ 𝑓 | timeframe.in_seconds(timeframe = string) → (simple|series) int"
  },
  "timestamp ⇨ 𝑓": {
     "prefix": "timestamp",
     "body": [
        "timestamp(${1|Y,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000|}, ${2|M,01,02,03,04,05,06,07,08,09,10,11,12|}, ${3|D,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31|}, ${4|h,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}, ${5|m,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}${6:, ${7|s,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}}) $0"
     ],
     "description": "UNIX time of specified date and time | int 1 ⇨ 𝑓 | timestamp(year = int, month = int, day = int, hour = int, minute = int, second = int) → simple int"
  },
  "timestamp.int.2 ⇨ 𝑓": {
     "prefix": "timestamp.int",
     "body": [
        "timestamp(${1|TZ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}, ${2|Y,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000|}, ${3|M,01,02,03,04,05,06,07,08,09,10,11,12|}, ${4|D,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31|}, ${5|h,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}, ${6|m,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}${7:, ${8|s,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}}) $0"
     ],
     "description": "UNIX time of specified date and time | int 2 -TZ ⇨ 𝑓 | timestamp(timezone = string, year = int, month = int, day = int, hour = int, minute = int, second = int) → simple int"
  },
  "timestamp.string.1 ⇨ 𝑓": {
     "prefix": "timestamp.string.1",
     "body": [
        "timestamp(dateString = \"${1|D,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31|} ${2|M,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec|} ${3|Y,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000|} ${4|h,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}:${5|m,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}:${6|s,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|} ${7|TZ,GMT-12,GMT-11,GMT-10,GMT-9,GMT-8,GMT-7,GMT-6,GMT-5,GMT-4,GMT-3,GMT-2,GMT-1,GMT+0,GMT+1,GMT+2,GMT+3,GMT+4,GMT+5,GMT+6,GMT+7,GMT+8,GMT+9,GMT+10,GMT+11,GMT+12|}\") $0"
     ],
     "description": "UNIX time of specified date and time | dateString 1 -TZ ⇨ 𝑓 | timestamp(dateString = string) → const int"
  },
  "timestamp.string.2 ⇨ 𝑓": {
     "prefix": "timestamp.string.2",
     "body": [
        "timestamp(dateString = \"${1|Y,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000|}-${2|M,01,02,03,04,05,06,07,08,09,10,11,12|}-${3|D,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31|}T${4|h,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}:${5|m,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}:${6|Seconds,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}\") $0"
     ],
     "description": "UNIX time of specified date and time | dateString 2 ⇨ 𝑓 | timestamp(dateString = string) → const int"
  },
  "timestamp.string.3 ⇨ 𝑓": {
     "prefix": "timestamp.string.3",
     "body": [
        "timestamp(dateString = \"${1|M,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec|} ${2|D,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31|} ${3|Y,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,2000|} ${4|h,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}:${5|m,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}:${6|s,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59|}\") $0"
     ],
     "description": "UNIX time of specified date and time | dateString 3 ⇨ 𝑓 | timestamp(dateString = string) → const int"
  },
  "weekofyear ⇨ 𝑓": {
     "prefix": "weekofyear",
     "body": [
        "weekofyear(time = ${1}${2:, timezone = ${3| ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}}) $0"
     ],
     "description": "Week of year (in exchange timezone) for provided UNIX time ⇨ 𝑓 | weekofyear(time = int, timezone = series string) → series int"
  },
  "year ⇨ 𝑓": {
     "prefix": "year",
     "body": [
        "year(time = ${1}${2:, timezone = ${3| ,syminfo.timezone,\"GMT-12\",\"GMT-11\",\"GMT-10\",\"GMT-9\",\"GMT-8\",\"GMT-7\",\"GMT-6\",\"GMT-5\",\"GMT-4\",\"GMT-3\",\"GMT-2\",\"GMT-1\",\"GMT+0\",\"GMT+1\",\"GMT+2\",\"GMT+3\",\"GMT+4\",\"GMT+5\",\"GMT+6\",\"GMT+7\",\"GMT+8\",\"GMT+9\",\"GMT+10\",\"GMT+11\",\"GMT+12\"|}}) $0"
     ],
     "description": "Year (in exchange timezone) for provided UNIX time ⇨ 𝑓 | year(time = int, timezone = series string) → series int"
  }
}